{"version":3,"sources":["webpack://core/webpack/universalModuleDefinition","webpack://core/webpack/bootstrap","webpack://core/external \"d3-selection\"","webpack://core/external \"d3-array\"","webpack://core/external \"d3-scale\"","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/defineProperty.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/toConsumableArray.js","webpack://core/external \"d3-axis\"","webpack://core/external \"d3-time\"","webpack://core/external \"d3-shape\"","webpack://core/external \"d3-format\"","webpack://core/external \"d3-ease\"","webpack://core/external \"d3-dispatch\"","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://core/external \"d3-time-format\"","webpack://core/external \"d3-interpolate\"","webpack://core/external \"d3-transition\"","webpack://core/external \"d3-collection\"","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/typeof.js","webpack://core/external \"d3-color\"","webpack://core/external \"d3-zoom\"","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://core//home/golodhros/src/britecharts/node_modules/base-64/base64.js","webpack://core/./src/charts/helpers/style.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/objectWithoutProperties.js","webpack://core/external \"d3-voronoi\"","webpack://core/external \"d3-brush\"","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://core/(webpack)/buildin/module.js","webpack://core/(webpack)/buildin/global.js","webpack://core/./src/charts/helpers/classes.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://core//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","webpack://core/./src/charts/helpers/text.js","webpack://core/./src/charts/helpers/color.js","webpack://core/./src/charts/helpers/export.js","webpack://core/./src/charts/helpers/load.js","webpack://core/./src/charts/helpers/number.js","webpack://core/./src/charts/helpers/locale.js","webpack://core/./src/charts/helpers/project.js","webpack://core/./src/charts/helpers/constants.js","webpack://core/./src/charts/helpers/grid.js","webpack://core/./src/charts/bar/bar.js","webpack://core/./src/charts/donut/donut.js","webpack://core/./src/charts/legend/legend.js","webpack://core/./src/charts/helpers/date.js","webpack://core/./src/charts/helpers/axis.js","webpack://core/./src/charts/helpers/filter.js","webpack://core/./src/charts/helpers/type.js","webpack://core/./src/charts/line/line.js","webpack://core/./src/charts/tooltip/tooltip.js","webpack://core/./src/charts/mini-tooltip/mini-tooltip.js","webpack://core/./src/charts/sparkline/sparkline.js","webpack://core/./src/charts/stacked-area/stacked-area.js","webpack://core/./src/charts/scatter-plot/scatter-plot.js","webpack://core/./src/charts/grouped-bar/grouped-bar.js","webpack://core/./src/charts/stacked-bar/stacked-bar.js","webpack://core/./src/charts/heatmap/heatmap.js","webpack://core/./src/charts/step/step.js","webpack://core/./src/charts/brush/brush.js","webpack://core/./src/charts/bullet/bullet.js","webpack://core/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__5__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__8__","__WEBPACK_EXTERNAL_MODULE__9__","__WEBPACK_EXTERNAL_MODULE__10__","__WEBPACK_EXTERNAL_MODULE__12__","__WEBPACK_EXTERNAL_MODULE__13__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__15__","__WEBPACK_EXTERNAL_MODULE__17__","__WEBPACK_EXTERNAL_MODULE__18__","__WEBPACK_EXTERNAL_MODULE__24__","__WEBPACK_EXTERNAL_MODULE__25__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","obj","configurable","writable","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","arr","arrayWithHoles","iterableToArrayLimit","nonIterableRest","_typeof","iterator","constructor","len","length","arr2","Array","arrayLikeToArray","minLen","toString","slice","from","test","freeExports","freeGlobal","global","InvalidCharacterError","message","this","Error","error","TABLE","REGEX_SPACE_CHARACTERS","base64","input","String","a","b","buffer","padding","output","position","charCodeAt","charAt","replace","bitStorage","bitCounter","indexOf","fromCharCode","noStyleTags","BASE","HEAD","HTML","META","NOFRAME","NOSCRIPT","PARAM","SCRIPT","STYLE","TITLE","tagNames","computeDefaultStyleByTagName","tagName","defaultStyle","element","document","body","appendChild","createElement","computedStyle","getComputedStyle","forEach","style","removeChild","initializeSerializer","defaultStylesByTagName","elem","elements","result","cssTexts","nodeType","Node","ELEMENT_NODE","querySelectorAll","el","toUpperCase","cssText","cssPropName","outerHTML","map","objectWithoutPropertiesLoose","source","excluded","target","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","isArray","iter","TypeError","webpackPolyfill","deprecate","paths","children","g","Function","e","classArray","classArr","arguments","asList","join","asSelector","_i","_s","_e","_arr","_n","_d","next","done","push","err","sourceKeys","keys","wrapConfig","wrapText","xOffset","fontSize","availableWidth","node","word","text","select","words","split","reverse","line","lineNumber","smallLineHeight","y","attr","dy","parseFloat","smallFontSize","tspan","append","classed","pop","getComputedTextLength","wrapTextWithEllipses","width","xpos","limit","each","getTextWidth","fontFace","getContext","font","measureText","getApproximateNumberOfLines","title","maxLength","approximateLineNumber","colorSchemas","britecharts","grey","orange","blueGreen","teal","green","yellow","pink","purple","red","colorSchemasHuman","colorGradients","greenBlue","orangePink","bluePurple","colorGradientsHuman","singleColors","aloeGreen","greenColor","blueColor","yellowColor","orangeColor","pinkColor","purpleColor","singleColorsHuman","isBrowser","isIE","navigator","msSaveOrOpenBlob","encoder","btoa","encode","config","styleClass","defaultFilename","chartBackground","imageSourceBase","titleFontSize","titleFontFamily","titleTopOffset","exportChart","d3svg","filename","console","loadImage","convertSvgToHtml","then","img","canvas","createCanvas","height","handleImageLoad","html","serializeWithStyles","serializer","userAgent","search","formatHtmlByBrowser","styleBackgroundString","addBackground","prependTitle","parseInt","createImage","svgHtml","callback","Image","src","encodeURIComponent","match","p1","drawImageOnCanvas","image","drawImage","extensionType","url","toDataURL","link","href","download","click","downloadCanvas","Promise","res","rej","addEventListener","svgWidth","margin","left","linearGradient","barLoadingMarkup","donutLoadingMarkup","lineLoadingMarkup","stackedAreaLoadingMarkup","sparkLineLoadingMarkup","brushLoadingMarkup","idCounter","integerValueFormats","small","format","medium","large","decimalValueFormats","getValueSize","limits","size","calcLinearRegression","dataPoints","x","xy","x2","denominator","intercept","slope","minX","min","maxX","max","x1","y1","y2","calculatePercent","total","decimals","percent","isInteger","formatDecimalValue","formatIntegerValue","uniqueId","prefix","id","REQUIRED_LOCALE_DEFINITION_KEYS","setDefaultLocale","locale","isValidLocaleDefinition","d3Format","every","localeKey","dataKeyDeprecationMessage","keyName","warn","axisTimeCombinations","MINUTE_HOUR","HOUR_DAY","DAY_MONTH","MONTH_YEAR","CUSTOM","timeBenchmarks","ONE_AND_A_HALF_YEARS","ONE_YEAR","ONE_DAY","hoursHuman","motion","curveMap","linear","curveLinear","basis","curveBasis","cardinal","curveCardinal","catmullRom","curveCatmullRom","monotoneX","curveMonotoneX","monotoneY","curveMonotoneY","natural","curveNatural","step","curveStep","stepAfter","curveStepAfter","stepBefore","curveStepBefore","emptyDonutData","quantity","percentage","timeIntervals","timeMillisecond","utcMillisecond","timeSecond","utcSecond","timeMinute","utcMinute","timeHour","utcHour","timeDay","utcDay","timeWeek","utcWeek","timeSunday","utcSunday","timeMonday","utcMonday","timeTuesday","utcTuesday","timeWednesday","utcWednesday","timeThursday","utcThursday","timeFriday","utcFriday","timeSaturday","utcSaturday","timeMonth","utcMonth","timeYear","utcYear","scaleLinear","DIR","positionNumber","scale","positionCenter","offset","Math","bandwidth","round","gridBase","orient","range","offsetStart","offsetEnd","hideEdges","ticks","tickValues","gridBaseGenerator","context","values","hideFirst","hideLast","scaleTicks","apply","domain","shift","getValues","copy","k","selection","initContainer","selectAll","data","container","merge","enter","order","lineExit","exit","lineEnter","exitPosition","isFinite","getAttribute","enterPosition","parentNode","__pos","transition","remove","_","gridHorizontal","gridVertical","dataZeroed","chartWidth","chartHeight","xScale","yScale","chartGradientEl","xAxis","yAxis","svg","orderingFunction","labelEl","top","right","bottom","isLoading","colorSchema","colorHelper","nameToColorMap","chartGradientColors","chartGradientId","yTicks","xTicks","percentageAxisToMaxRatio","numberFormat","enableLabels","labelsMargin","labelsNumberFormat","labelsSize","betweenBarsPadding","xAxisPadding","yAxisPaddingBetweenChart","isHorizontal","hasSingleBarHighlight","isAnimated","ease","easeQuadInOut","animationDuration","interBarDelay","highlightBarFunction","barSelection","color","darker","valueLabel","nameLabel","xAxisLabelEl","xAxisLabel","xAxisLabelOffset","yAxisLabelEl","yAxisLabel","yAxisLabelOffset","shouldReverseColorList","localeFormatter","dispatcher","dispatch","getName","getValue","_labelsHorizontalX","_labelsHorizontalY","_labelsVerticalX","_labelsVerticalY","_selection","_data","bars","unorderedData","sort","sortData","originalData","reduce","acc","cleanData","buildContainerGroups","buildSVG","percentageAxis","uniqueDataPoints","Set","has","getPercentageAxis","rangeRound","scaleBand","buildScales","axisBottom","tickSizeInner","axisLeft","buildAxis","grid","drawHorizontalBars","drawVerticalBars","on","barList","handleMouseOver","handleMouseMove","handleMouseOut","handleClick","computeColor","duration","delay","drawAnimatedHorizontalBars","drawAnimatedVerticalBars","labelXPosition","labelYPosition","drawLabels","containerWidth","mouse","barRect","_x","chartGradient","colorMap","hasPercentage","_flag","valueLocale","layout","shape","slices","highlightedSliceId","highlightedSlice","colorScale","easeCubicInOut","pieDrawingTransitionDuration","radiusHoverOffset","externalRadius","internalRadius","legendWidth","isEmpty","hasFixedHighlightedSlice","hasHoverAnimation","hasLastHoverSliceHighlighted","lastHighlightedSlice","emptyDataConfig","emptySliceColor","showEmptySlice","percentageFormat","hasCenterLegend","centeredTextFunction","storeAngle","_current","reduceOuterRadius","outerRadius","getQuantity","getSliceFill","undefined","totalQuantity","sumValues","pie","padAngle","scaleOrdinal","memo","item","arc","innerRadius","padRadius","newSlices","attrTween","tweenLoading","drawSlices","filterHighlightedSlice","drawLegend","__data__","tweenGrowth","drawEmptySlice","interpolate","startAngle","endAngle","textHelper","highlightSliceById","entries","markerSize","marginRatio","unit","highlightedEntryId","hasQuantities","getId","getFormattedQuantity","getMarkerFill","hasQuantity","legendEntries","numberOfEntries","lineHeight","newLine","lastEntry","legendGroupSize","emptySpace","newXPosition","lineWidth","filter","horizontalOffset","verticalOffset","labelWidth","getLineElementMargin","getBoundingClientRect","centerVerticalLegendOnSVG","drawVerticalLegend","cleanFadedLines","fadeLinesBut","exceptionItemId","entryLine","nodes","clearHighlight","highlight","entryId","highlightEntryById","localeTimeMap","minute","hour","day","daymonth","month","year","addDays","startDate","days","Date","setDate","getDate","diffDays","endDate","ceil","abs","getTime","convertMillisecondsToDays","milliseconds","getLocaleDateFormatter","timeUnit","options","formatter","Intl","DateTimeFormat","date","formatMap","timeFormat","settingsToMajorTickMap","getAxisSettingsFromTimeSpan","timeSpan","getMaxNumOfHorizontalTicks","dataPointNumber","ticksForWidth","getTimeSeriesAxis","dataByDate","settings","firstDate","lastDate","dateTimeSpan","minor","major","majorTickValue","minorTickValue","tick","getSortedNumberAxis","dataSorted","firstEntry","getMaxNumOfHorizontalTicksForNumberRanges","filterId","createFilterContainer","metadataSelection","createGlowWithMatrix","filterSelector","bounceCircleHighlight","radius","bounceRadius","castValueToType","type","Number","isDefined","xSubAxis","dataByTopic","overlay","verticalMarkerContainer","verticalMarkerLine","tooltipThreshold","singleLineGradientColors","lineGradientId","highlightFilter","highlightFilterId","xAxisValueType","xAxisScale","xAxisFormat","xAxisCustomFormat","shouldShowAllDataPoints","lineCurve","dateLabel","topicLabel","yAxisLabelPadding","hasMinimumValueScale","customLines","defaultCustomLineColor","pathYCache","getTopic","topic","getVariableTopicName","lines","topicLine","accum","dates","topicName","nest","topics","restProps","newDates","scaleLog","scaleTime","maxY","minY","yScaleBottomValue","yScaleTopValue","nice","tickFormat","log","LN10","getFormattedValue","tickSize","tickPadding","shouldHighlightXAxis","drawHorizontalGridLines","drawVerticalGridLines","drawGridLines","yValues","yValue","find","drawCustomLines","xLabelXPosition","xLabelYPosition","adjustYTickLabels","yLabelYPosition","yLabelXPosition","drawAxis","curve","defined","totalLength","findLongestPath","animateLine","mouseX","x0","d0","d1","dateFromInvertedX","dataEntryIndex","dataEntryForXPosition","previousDataEntryForXPosition","dataPointXPosition","xPosition","yPosition","xPositionOffset","dataPoint","verticalMarkerXPosition","invert","bisectDate","bisector","nodesById","topicsWithNode","index","marker","glowEl","addGlowFilter","handleHighlightClick","point","path","getPathYFromX","highlightDataPoints","allTopics","dataPointTopics","drawAllDataPoints","touch","handleTouchMove","formatFn","pathLength","lengthStart","lengthEnd","getPointAtLength","iterations","midpoint","lineGradient","tooltipBackground","tooltipTextContainer","tooltipBody","tooltipTitle","textHeight","tooltipRightWidth","shouldShowDateInTitle","tooltipOffset","tooltipHeight","ttTextX","ttTextY","additionalTooltipTitleHeight","defaultAxisSettings","dateFormat","dateCustomFormat","topicsOrder","valueFormatter","monthDayYearFormat","monthDayHourFormat","getTooltipTitleXPosition","tooltipContentPadding","approximateTitle","getTooltipTitle","now","approximateNumberOfTitleLines","hide","getValueText","missingValue","chosenValueFormatter","updateTopicContent","tooltipRight","tooltipLeftText","tooltipRightText","elementText","textWrap","getBBox","tooltipWidth","updatePositionAndSize","tooltipX","tooltipY","formatKey","localeOptions","formatDate","textTitle","formattedDate","entryLineLimit","updateContent","orderName","_sortByTopicsOrder","_sortByAlpha","updateTitle","updateTooltip","show","update","colorMapping","getMaxLengthLine","texts","textSizes","getTooltipPosition","mouseY","parentChartWidth","parentChartHeight","positionX","hasEnoughHorizontalRoom","positionY","hasEnoughVerticalRoom","tooltipValue","tooltipName","textSize","valueLineHeight","valueTextSize","defaultDy","temporalHeight","chartSize","mousePosition","DEFAULT_TITLE_TEXT_STYLE","areaGradientEl","lineGradientEl","maskingClip","topLine","areaBelow","circle","titleEl","titleText","areaGradient","areaGradientId","maskingClipId","clipDuration","titleTextStyle","extent","metadataGroup","createGradients","createMaskingClip","area","y0","lineStrokeWidth","datum","drawArea","drawLine","drawEndMarker","drawSparklineTitle","uniq","arrArg","pos","layers","series","layersInitial","areaShape","areaOutline","epsilon","dataSortedFormatted","dataSortedZeroed","yAxisBaseline","areaOpacity","areaCurve","areaAnimationDelays","maxAreaNumber","areaAnimationDuration","hasOutline","keyLabel","minDate","maxDate","isUsingFakeData","numDays","emptyArray","maxValueByDate","assign","getSortedData","entry","initialTotalsObject","totals","otherIndex","other","splice","concat","formatOrder","stack3","stack","stackOrderNone","stackOffsetNone","section","moveLayersByBaseline","buildLayers","getMinYAxisScale","vals","sum","axisRight","emptyDataLine","chartGroup","drawStackedAreas","drawHoverOverlay","drawVerticalMarker","setEpsilon","getNearestDataPoint","moveVerticalMarker","points","accumulator","sortedValues","current","highlightCircleRadius","voronoiMesh","xOriginalScale","yOriginalScale","areaScale","trendLinePath","highlightPointData","highlightCrossHairContainer","highlightCrossHairLabelsContainer","xAxisFormatType","yAxisFormat","trendLineCurve","highlightTextLegendOffset","circleOpacity","circleStrokeOpacity","circleStrokeWidth","highlightCircle","highlightCircleOpacity","maxCircleArea","hasCrossHairs","hasTrendline","enableZoom","easeCircleIn","hasHollowCircles","getPointData","scaleSqrt","colorRange","getXAxisFormat","voronoi","initHighlightComponents","circles","drawDataPoints","zoom","d3Zoom","scaleExtent","updateChartAfterZoom","initZoom","linearData","params","trendLine","drawTrendline","closestPoint","pointData","getClosestPoint","showCrossHairComponentsWithLabels","removePointHighlight","highlightDataPoint","transform","zoomTransform","rescaleX","rescaleY","mousePos","status","opacityIndex","xScale2","yScale2","groups","layerElements","transformedData","animationDelays","yTickTextOffset","groupLabel","betweenGroupsPadding","getGroup","group","rollup","ret","permute","prepareData","yMax","layerJoin","tween","horizontalBarsTween","layersSelection","verticalBarsTween","drawGroupedBar","originXPosition","originYPosition","getMousePosition","getNearestDataPoint2","handleBarsMouseOver","handleBarsMouseOut","addMouseEvents","event","adjustedMouseX","nearest","found","d2","adjustedMouseY","interpolateRound","j","interpolateNumber","stacks","hasReversedStacks","stackLabel","getStack","getValOrDefaultToZero","val","isNaN","dataInitial","filterOutUnkownValues","drawStackedBar","layerEls","barStart","barEnd","vertDiff","yAxisLabels","boxSize","daysHuman","dayLabelsGroup","arrayForYAxisLabels","hourLabelsGroup","interpolateHcl","label","boxElements","boxList","drawBoxes","maskGridLines","baseLine","yAxisTickFormat","getKey","steps","paddingInner","brush","chartBrush","brushArea","dateRange","isLocked","gradient","gradientId","roundingTimeInterval","dataToClone","handleFillColor","JSON","parse","stringify","timeAxisHelper","brushX","handleBrushStart","handleBrushEnd","setTimeout","drawBrush","newSelection","lockedSelectionSize","floor","selectedRange","move","sourceEvent","dateExtentRounded","dateExtent","setBrushByDates","dateA","dateB","rangeOpacityScale","measureOpacityScale","rangeColor","measureColor","markerColor","axis","barWidth","legendGroup","subtitleEl","rangesEl","measuresEl","markersEl","customTitle","subtitle","customSubtitle","paddingBetweenAxisAndChart","startMaxRangeOpacity","isReverse","ranges","markers","measures","hasTitle","getMeasureBarHeight","decidedRange","translateX","drawBullet","bar","donut","legend","loadingStates","tooltip","miniTooltip","sparkline","stackedArea","scatterPlot","groupedBar","stackedBar","heatmap","bullet","colors"],"mappings":"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AO,CAACN,KACNgC,IAjBZ,8BAqBE,OAAOA,G,kCCnFEC,EAAe,CACxBC,YAtHuB,CACvB,UACA,UACA,UACA,UACA,UACA,WAiHAC,KA9GgB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAsGAC,OAnGkB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA2FAC,UAxFqB,CACrB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAgFAC,KA7EgB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAqEAC,MAlEiB,CACjB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA0DAC,OAvDkB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA+CAC,KA5CgB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAoCAC,OAjCkB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAyBAC,IAtBe,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YAwDW,GACXV,eACAW,kBA3C6B,CAC7BV,YAAa,sBACbC,KAAM,mBACNC,OAAQ,SACRC,UAAW,OACXC,KAAM,aACNC,MAAO,QACPC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,IAAK,OAkCLE,eA1L0B,CAC1BC,UAAW,CAAC,UAAW,WACvBC,WAAY,CAAC,UAAW,WACxBC,WAAY,CAAC,UAAW,YAwLxBC,oBAtL+B,CAC/BH,UAAW,gBACXC,WAAY,iBACZC,WAAY,kBAoLZE,aAxBiB,CACjBC,UATqB,CAAC,WAUtBC,WATsB,CAAC,WAUvBC,UATqB,CAAC,WAUtBC,YATuB,CAAC,WAUxBC,YATuB,CAAC,WAUxBC,UATc,CAAC,WAUfC,YATgB,CAAC,YA2BjBC,kBAhBsB,CACtBP,UAAW,aACXC,WAAY,QACZC,UAAW,OACXC,YAAa,SACbC,YAAa,SACbC,UAAW,OACXC,YAAa,W,iBChLXE,EAA8B,oBAAXpP,OACnBqP,EAAOC,UAAUC,iBAKnBC,EAAUJ,GAAapP,OAAOyP,KAE7BD,IACDA,EAAUjK,IAAOmK,QAKrB,IAWMC,EAAS,CACXC,WAAY,kBACZC,gBAAiB,iBACjBC,gBAAiB,QACjBC,gBAAiB,6BACjBC,cAAe,OAEfC,gBA5BuB,iDA6BvBC,eAAgB,GAChB,4BACI,sCAAgChL,KAAK4K,gBAArC,gBAWD,SAASK,EAAYC,EAAOC,EAAU9C,GAAO,WAChD,OAAI8B,GAEAiB,QAAQlL,MA9CZ,kJAgDW,GAGJmL,EAAUC,EAAiBhP,KAAK0D,KAAMkL,EAAO7C,IAC/CkD,MAAK,SAACC,GACH,MAAO,CACHC,OAAQC,EAAa,EAAK/D,QAAS,EAAKgE,UACxCH,UAGPD,MAAK,gBAAGE,EAAH,EAAGA,OAAQD,EAAX,EAAWA,IAAX,OAAqBI,EAAgBtP,KAAKkP,EAAKC,EAAQN,MAmB9D,SAASG,EAAiBJ,EAAO7C,GACpC,GAAK6C,EAAL,CAIAA,EAAMjE,KAAK,UAAW,KAAKA,KAAK,QAAS,8BACzC,IACI4E,EADaC,IAAoBhJ,sBAC1BiJ,CAAWb,EAAM5E,QAW5B,OATAuF,EA6FJ,SAA6BA,GACzB,GAAIzB,UAAU4B,UAAUC,OAAO,YAAc,EACzC,OAAOJ,EAAK7K,QACR,gBACA,sDAIR,OAAO6K,EArGAK,CAAoBL,GAO3BA,EA3BJ,SAAuBA,GACnB,OAAOA,EAAK7K,QAAQ,IAAb,WAAsByJ,EAAO0B,wBA0B7BC,CANPP,EAAOQ,EAAa/P,KAChB0D,KACA6L,EACAxD,EACAiE,SAASpB,EAAMjE,KAAK,SAAU,OActC,SAASyE,EAAa/D,EAAOgE,GACzB,IAAIF,EAASpJ,SAASG,cAAc,UAKpC,OAHAiJ,EAAOE,OAASA,EAChBF,EAAO9D,MAAQA,EAER8D,EAUX,SAASc,EAAYC,EAASC,GAC1B,IAAIjB,EAAM,IAAIkB,MAEd,GAAID,EAAU,CACV,GAAwB,mBAAbA,EACP,MAAM,IAAIxM,MAAJ,mEAC6DwM,GAD7D,cAIVA,EAASjB,GAIb,OAFAA,EAAImB,IAAJ,UAAalC,EAAOI,iBAApB,OAxHOP,EACHsC,mBAuHmDJ,GAvH3BxL,QACpB,mBACA,SAAU6L,EAAOC,GACb,OAAOvM,OAAOa,aAAa,KAAO0L,QAsHvCtB,EASJ,SAASuB,EAAkBC,EAAOvB,GAGrC,OAFAA,EAAOxD,WAAW,MAAMgF,UAAUD,EAAO,EAAG,GAErCvB,EAkDX,SAASG,EAAgBH,EAAQN,IAtCjC,SACIM,GAGF,IAFEN,EAEF,uDAFaV,EAAOE,gBAClBuC,EACF,uDADkB,YAEZC,EAAM1B,EAAO2B,UAAUF,GACvBG,EAAOhL,SAASG,cAAc,KAElC6K,EAAKC,KAAOH,EACZE,EAAKE,SAAWpC,EAChB9I,SAASC,KAAKC,YAAY8K,GAC1BA,EAAKG,QACLnL,SAASC,KAAKO,YAAYwK,GA2B1BI,CAAeV,EAAkB/M,KAAMyL,GAASN,GASpD,SAASE,EAAUmB,GACf,OAAO,IAAIkB,SAAQ,SAACC,EAAKC,GACrBrB,EAAYC,GAAS,SAAChB,GAClBA,EAAIqC,iBAAiB,QAAQ,kBAAMF,EAAInC,MACvCA,EAAIqC,iBAAiB,SAAS,SAAC/H,GAAD,OAAS8H,EAAI9H,YAavD,SAASuG,EAAaR,EAAMxD,EAAOyF,GAC/B,IAAKzF,IAAUyF,EACX,OAAOjC,EAEX,IAAMnD,EAASF,EAATE,KAWN,OATAmD,EAAOA,EAAK7K,QACR,KADG,mBAEShB,KAAK+N,SAASC,KAFvB,gBAGCvD,EAAOO,eAHR,0BAIeP,EAAOM,gBAJtB,wBAKCN,EAAOK,cALR,mBAMQpC,EAAK,GANb,cAMqBL,EANrB,gBAYI,ICzPF4F,EAAiB,qiBAYjBC,EAAmB,2HAAH,OAEfD,EAFe,s0DA6BhBE,EAAqB,6HAAH,OAEjBF,EAFiB,8nBAclBG,EAAoB,6KAAH,OAMhBH,EANgB,41BAyBjBI,EAA2B,qLAAH,OAMvBJ,EANuB,6gEA0BxBK,EAAyB,kLAAH,OAMrBL,EANqB,whDActBM,EAAqB,8KAAH,OAMjBN,EANiB,mxDAoBhB,IACXA,iBACAC,mBACAC,qBACAC,oBACAG,qBACAD,yBACAD,4BChJAG,GAAY,EAEVC,GAAsB,CACxBC,MAAO,CACH7G,MAAO,GACP8G,OAAQA,iBAAO,KAEnBC,OAAQ,CACJ/G,MAAO,IACP8G,OAAQA,iBAAO,KAEnBE,MAAO,CACHhH,MAAO,KACP8G,OAAQA,iBAAO,SAIjBG,GAAsB,CACxBJ,MAAO,CACH7G,MAAO,GACP8G,OAAQA,iBAAO,QAEnBC,OAAQ,CACJ/G,MAAO,IACP8G,OAAQA,iBAAO,QAEnBE,MAAO,CACHhH,MAAO,KACP8G,OAAQA,iBAAO,SAWjBI,GAAe,SAAC3R,EAAO4R,GACzB,IAAIC,EAAO,QAQX,OANI7R,EAAQ4R,EAAON,MAAM7G,MACrBoH,EAAO,QACA7R,EAAQ4R,EAAOJ,OAAO/G,QAC7BoH,EAAO,UAGJA,GAUEC,GAAuB,SAACC,GACjC,IAAIvR,EAAIuR,EAAWjQ,OACfkQ,EAAI,EACJpI,EAAI,EACJqI,EAAK,EACLC,EAAK,EAETH,EAAWxM,SAAQ,SAAClG,GAChB2S,GAAK3S,EAAE2S,EACPpI,GAAKvK,EAAEuK,EACPqI,GAAM5S,EAAE2S,EAAI3S,EAAEuK,EACdsI,GAAM7S,EAAE2S,EAAI3S,EAAE2S,KAGlB,IAAMG,EAAc3R,EAAI0R,EAAKF,EAAIA,EAC3BI,GAAaxI,EAAIsI,EAAKF,EAAIC,GAAME,EAChCE,GAAS7R,EAAIyR,EAAKD,EAAIpI,GAAKuI,EAC3BG,EAAOC,cAAIR,GAAY,qBAAGC,KAC1BQ,EAAOC,cAAIV,GAAY,qBAAGC,KAEhC,MAAO,CACHU,GAAIJ,EACJK,GAAIN,EAAQ7R,EAAI4R,EAChBF,GAAIM,EACJI,GAAIP,EAAQG,EAAOJ,IAYdS,GAAmB,SAAC7S,EAAO8S,EAAOC,GAC3C,IAAMC,EAAUF,EAAS9S,EAAQ8S,EAAS,IAAM,EAEhD,OAAOvB,iBAAOwB,EAAPxB,CAAiByB,IASfC,GAAY,SAACjT,GACtB,OAAOA,EAAQ,GAAM,GASZkT,GAAqB,SAAClT,GAC/B,IAAI6R,EAAOF,GAAa3R,EAAO0R,IAG/B,OAAOH,EAFMG,GAAoBG,GAAMN,QAEzBvR,IASLmT,GAAqB,SAACnT,GAC/B,IAAI6R,EAAOF,GAAa3R,EAAOqR,IAG/B,OAAOE,EAFMF,GAAoBQ,GAAMN,QAEzBvR,IASLoT,GAAW,SAACC,GACrB,IAAMC,IAAOlC,GAEb,gBAAUiC,EAAOlR,WAAjB,YAA+BmR,IClJ7BC,GAAkC,CACpC,UACA,YACA,WACA,YAYSC,GAAmB,SAACC,GAC7B,GAAIC,GAAwBD,GACxB,OAAOE,sBAA6BF,GAEpC,MAAM,IAAI5Q,MAbd,oDAuBE6Q,GAA0B,SAACD,GAC7B,MACqB,UAAjB,IAAOA,IACPF,GAAgCK,OAAM,SAACC,GAAD,OAClCJ,EAAO7S,eAAeiT,OCpCrBC,GAA4B,SAACC,GAEtC/F,QAAQgG,KAAR,2EACwED,EADxE,mB,gBC2CSE,GAAuB,CAChCC,YAAa,cACbC,SAAU,gBACVC,UAAW,YACXC,WAAY,aACZC,OAAQ,UAGCC,GAAiB,CAC1BC,qBAAsB,QACtBC,SAAU,YACVC,QAAS,UAGAC,GAAa,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGSC,GACC,KAGDC,GAAW,CACpBC,OAAQC,eACRC,MAAOC,cACPC,SAAUC,iBACVC,WAAYC,mBACZC,UAAWC,kBACXC,UAAWC,kBACXC,QAASC,gBACTC,KAAMC,aACNC,UAAWC,kBACXC,WAAYC,oBAGHC,GAAiB,CAC1B,CACIC,SAAU,EACVC,WAAY,MAIPC,GAAgB,CACzBC,gBAAiBA,mBACjBC,eAAgBA,kBAChBC,WAAYA,cACZC,UAAWA,aACXC,WAAYA,cACZC,UAAWA,aACXC,SAAUA,YACVC,QAASA,WACTC,QAASA,WACTC,OAAQA,UACRC,SAAUA,YACVC,QAASA,WACTC,WAAYA,cACZC,UAAWA,aACXC,WAAYA,cACZC,UAAWA,aACXC,YAAaA,eACbC,WAAYA,cACZC,cAAeA,iBACfC,aAAcA,gBACdC,aAAcA,gBACdC,YAAaA,eACbC,WAAYA,cACZC,UAAWA,aACXC,aAAcA,gBACdC,YAAaA,eACbC,UAAWA,aACXC,SAAUA,YACVC,SAAUA,YACVC,QAASA,YCxILxQ,IADgBpK,EAAQ,GAAxB6a,YACe7a,EAAQ,IAAvBoK,YAWF0Q,GALuB,aAKvBA,GAJqB,WAgB3B,SAASC,GAAeC,GACpB,OAAO,SAAClZ,GAAD,OAAQkZ,EAAMlZ,GAAK,IAU9B,SAASmZ,GAAeD,GACpB,IAAIE,EAASC,KAAKjG,IAAI,EAAG8F,EAAMI,YAAc,GAAK,EAMlD,OAJIJ,EAAMK,UACNH,EAASC,KAAKE,MAAMH,IAGjB,SAACpZ,GAAD,OAAQkZ,EAAMlZ,GAAKoZ,EAAS,IAUvC,SAASI,GAASC,EAAQP,GACtB,IAAIQ,EAAQ,CAAC,EAAG,GACZC,EAAc,EACdC,EAAY,EACZC,GAAY,EACZC,EAAQ,KACRC,EAAa,KAEbxR,EAAWD,GAtDS,OAsDuBmR,GAG3C9G,EAAI8G,IAAWT,GAAQ,IAAM,IAC7BzO,EAAIkP,IAAWT,GAAQ,IAAM,IAMjC,SAASgB,EAAkBC,GACvB,IAAIC,EAmFR,WACI,IAAIC,GACkB,IAAdN,GACc,SAAdA,GACc,UAAdA,EACJO,GACkB,IAAdP,GACc,SAAdA,GACc,SAAdA,EACJK,EAAwB,OAAfH,EAajB,WACI,IAAIM,EAGAA,EADAnB,EAAMY,MACOZ,EAAMY,MAAMQ,MAAMpB,EAAOY,EAAQ,CAACA,GAAS,IAE3CZ,EAAMqB,SAGvB,OAAOF,EAAWtX,QAtBiBsX,GAAeN,EAAWhX,QAEzDoX,GAAWD,EAAOM,QAClBJ,GAAUF,EAAOnP,MAErB,OAAOmP,EAjGMO,GAGTrW,GAAY8U,EAAMI,UAAYH,GAAiBF,IAC3CC,EAAMwB,QAGVC,EAAIjB,EAAMA,EAAMjX,OAAS,IAAMiX,EAAM,GAAK,GAAK,EAE/CkB,EAAYX,EAAQW,UAAYX,EAAQW,YAAcX,EAEtDY,EAAgBD,EACXE,UAAUvS,EAASI,cACnBoS,KAAK,CAAC,OACXC,EAAYH,EAAcI,MACtBJ,EACKK,QACArQ,OAAO,KACPL,KAAK,QAASjC,EAASE,WAGhC2B,EAAO4Q,EAAUF,UAAU,QAAQC,KAAKb,EAAQhB,GAAOiC,QACvDC,EAAWhR,EAAKiR,OAChBC,EAAYlR,EAAK8Q,QAAQrQ,OAAO,QAAQL,KAAK,QAAS,aAK1D,GAHAJ,EAAOA,EAAK6Q,MAAMK,GAGdrB,IAAYW,EAAW,CAGvB,IAAMW,EAAe,SAAC/Q,GAAD,OACjB,SAAUxK,GACN,OAAOwb,SAAUxb,EAAIoE,EAASpE,IACxBA,EACAuD,KAAKkY,aAAajR,KAK1BkR,EAAgB,SAAU1b,GAC5B,IAAIwB,EAAI+B,KAAKoY,WAAWC,MAExB,OAAOpa,GAAKga,SAAUha,EAAIA,EAAExB,IAAOwB,EAAI4C,EAASpE,IAGpDoK,EAAOA,EAAKyR,WAAW5B,GAEvBmB,EAAWA,EACNS,WAAW5B,GACXzP,KAAK,UArHN,MAsHCA,KAAKD,EAAI,IAAKgR,EAAahR,EAAI,MAC/BC,KAAKD,EAAI,IAAKgR,EAAahR,EAAI,MAEpC+Q,EAAYA,EACP9Q,KAAK,UA1HN,MA2HCA,KAAKD,EAAI,IAAKmR,GACdlR,KAAKD,EAAI,IAAKmR,GAGvBN,EAASU,SAET1R,EAAKI,KAAK,UAAW,GAChBA,KAAKmI,EAAI,KAAM+G,EAAM,GAAKiB,EAAIhB,GAC9BnP,KAAKmI,EAAI,KAAM+G,EAAMA,EAAMjX,OAAS,GAAKkY,EAAIf,GAC7CpP,KAAKD,EAAI,KAAK,SAACvK,GAAD,OAAOoE,EAASpE,MAC9BwK,KAAKD,EAAI,KAAK,SAACvK,GAAD,OAAOoE,EAASpE,MAKnCgb,EAAU3P,MAAK,WACX9H,KAAKqY,MAAQxX,KAkKrB,OA5GA4V,EAAkBd,MAAQ,SAAU6C,GAChC,OAAKvT,UAAU/F,QAGfyW,EAAQ6C,EAED/B,GAJId,GAefc,EAAkBN,MAAQ,SAAUqC,GAChC,OAAKvT,UAAU/F,QAGfiX,EAAQqC,EAED/B,GAJIN,GAcfM,EAAkBL,YAAc,SAAUoC,GACtC,OAAKvT,UAAU/F,QAGfkX,EAAcoC,EAEP/B,GAJIL,GAcfK,EAAkBJ,UAAY,SAAUmC,GACpC,OAAKvT,UAAU/F,QAGfmX,EAAYmC,EAEL/B,GAJIJ,GAgBfI,EAAkBH,UAAY,SAAUkC,GACpC,OAAKvT,UAAU/F,QAGfoX,EAAYkC,EAEL/B,GAJIH,GAcfG,EAAkBF,MAAQ,SAAUiC,GAChC,OAAKvT,UAAU/F,QAGfqX,EAAQiC,EAED/B,GAJIF,GAcfE,EAAkBD,WAAa,SAAUgC,GACrC,OAAKvT,UAAU/F,QAGfsX,EAAmB,OAANgC,EAAa,KAAO,IAAIA,GAAGhZ,QAEjCiX,GAJID,GAAcA,EAAWhX,SAOjCiX,EAqXJ,SAASgC,GAAe9C,GAC3B,OAAOM,GAASR,GAAOE,GAkBpB,SAAS+C,GAAa/C,GACzB,OAAOM,GAASR,GAAOE,G,qkBCzmBZ,SAASjb,KACpB,IASI8c,EACAmB,EACAC,EACAC,EACAC,EACAC,EAKAC,EAWAC,EACAC,EAUAC,EAeAC,EAIAC,EA5DAtL,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EAOZC,EAAcC,EAAYlQ,aAAaC,UAEvCkQ,EAAiB,KACjBC,EAAsB,KAEtBC,EAAkBtJ,GAAS,gBAC3BuJ,EAAS,EACTC,EAAS,EACTC,EAA2B,EAC3BC,EAxFc,KAyFdC,GAAe,EACfC,EAAe,EACfC,EA3Fc,KA4FdC,EAAa,GACbC,EAAqB,GAGrBC,EAEU,EAFVA,EAGY,EAGZC,EAA2B,GAE3BC,GAAe,EAEfC,GAAwB,EACxBC,GAAa,EACbC,EAAOC,gBACPC,EAAoB/I,GAEpBgJ,EAAgB,SAACve,EAAGN,GAAJ,OADK,GAC0BA,GAC/C8e,EAAuB,SAACC,GAAD,OACnBA,EAAajU,KAAK,QAAQ,gBAAGvK,EAAH,EAAGA,KAAH,OACtBye,gBACItB,EACMA,EAAoB,GACpBD,EAAeld,IACvB0e,aAIVC,EAAa,QACbC,GAAY,OAEZC,GAAe,KACfC,GAAa,KACbC,GAAmB,GACnBC,GAAe,KACfC,GAAa,KACbC,IAAoB,GACpBC,IAAyB,EACzBhL,GAAS,KACTiL,GAAkB/K,EAGlBgL,GAAaC,mBACT,kBACA,iBACA,kBACA,eAGJC,GAAU,SAAC,GAAD,SAAGvf,MACbwf,GAAW,SAAC,GAAD,SAAG9e,OACd+e,GAAqB,SAAC,GAAD,IAAG/e,EAAH,EAAGA,MAAH,OAAe0b,EAAO1b,GAASgd,GACpDgC,GAAqB,SAAC,GAAD,IAAG1f,EAAH,EAAGA,KAAH,OACjBqc,EAAOrc,GAAQqc,EAAOhD,YAAc,EAAIuE,GAAc,EAAI,IAC9D+B,GAAmB,SAAC,GAAD,IAAG3f,EAAH,EAAGA,KAAH,OAAcoc,EAAOpc,IACxC4f,GAAmB,SAAC,GAAD,IAAGlf,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,GAASgd,GAQtD,SAAS3f,GAAQ8hB,GACT1L,KACAiL,GAAkBlL,GAAiBC,KAGvC0L,EAAWzU,MAAK,SAAU0U,GACtB5D,EACIjR,EACAoG,EAAOC,KACPD,EAAOwL,MACoB,IAA3BkB,EACJ5B,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OANd,IAif7BiD,EAjf6B,EAoOrC,SAAkBC,GACd,IAAMlF,EAAqBkF,EAArBlF,KAAMmB,EAAe+D,EAAf/D,WAERS,IACA5B,EAAKmF,KAAKvD,GACVT,EAAWgE,KAAKvD,IAGpB,MAAO,CAAE5B,OAAMmB,cArOaiE,CA0LhC,SAAmBC,GACf,IAAIrF,EAAOqF,EAAaC,QAAO,SAACC,EAAKtgB,GAIjC,OAHAA,EAAEW,OAASX,EAAE4e,GACb5e,EAAEC,KAAO6D,OAAO9D,EAAE6e,KAElB,cAAWyB,GAAX,CAAgBtgB,MACjB,IAECkc,EAAanB,EAAK3T,KAAI,SAACpH,GAAD,MAAQ,CAC9BW,MAAO,EACPV,KAAM6D,OAAO9D,EAAE6e,SAGnB,MAAO,CAAE9D,OAAMmB,cAvMsBqE,CAAUR,KAAxChF,EAP0B,EAO1BA,KAAMmB,EAPoB,EAOpBA,WAmKjB,SAAkBlB,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,wBAAwB,GA3H7C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KACG,YAJQ,oBAKK8G,EAAOC,KAAOyM,EALnB,aAMJ1M,EAAOuL,IANH,MAUhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EACKnQ,OAAO,KACPC,QAAQ,qBAAqB,GAC7BD,OAAO,KACPC,QAAQ,gBAAgB,GAC7BkQ,EACKnQ,OAAO,KACPL,KAAK,YAFV,qBAEqC,EAAIwT,EAFzC,SAGKlT,QAAQ,qBAAqB,GAC7BD,OAAO,KACPC,QAAQ,gBAAgB,GAC7BkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAmG5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GA7KhBuR,CAASld,MACLyZ,GA+iBRN,EAAI1S,OAAO,wBAAwBoF,KAAKqC,IA3TxCiL,EAAI1S,OAAO,4BAA4B8R,SA9I3C,WACI,IAAI4E,EAmkBR,WACI,IAAMC,EAAmB,IAAIC,IAAI7F,EAAK3T,IAAIqY,KAI1C,GAF8B,IAA1BkB,EAAiBnO,MAAcmO,EAAiBE,IAAI,GAGpD,OAAOrD,EAGX,OAAOnE,KAAKnG,IAAIsK,EAA2BpK,cAAI2H,EAAM0E,KA5kBhCqB,GAEjB7C,GACA5B,EAAStD,wBACJwB,OAAO,CAAC,EAAGmG,IACXK,WAAW,CAAC,EAAG5E,IAEpBG,EAAS0E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,KAChBuB,WAAW,CAAC,EAAG3E,IACflY,QAAQ4Z,KAEbzB,EAAS2E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,KAChBuB,WAAW,CAAC,EAAG5E,IACfjY,QAAQ4Z,GAEbxB,EAASvD,wBACJwB,OAAO,CAAC,EAAGmG,IACXK,WAAW,CAAC3E,EAAa,KAG9BgD,GACYrE,EACP3T,KAAI,SAACpH,GAAD,OAAOA,KACXmK,UACA/C,KAAI,WAAW1H,GAAX,MAAkB,CACnBO,KADC,EAAGA,KAEJye,MAAOzB,EAAYvd,EAAIud,EAAYxa,YAG/BsY,EACP3T,KAAI,SAACpH,GAAD,OAAOA,KACXoH,KAAI,WAAW1H,GAAX,MAAkB,CACnBO,KADC,EAAGA,KAEJye,MAAOzB,EAAYvd,EAAIud,EAAYxa,YAI/C0a,EACIA,GACApC,EACK3T,KAAI,SAACpH,GAAD,OAAOA,KACXqgB,QACG,SAACC,EAAD,EAAgB5gB,GAAhB,IAAQO,EAAR,EAAQA,KAAR,gBACOqgB,GADP,UAEKrgB,EAAOgd,EAAYvd,EAAIud,EAAYxa,YAExC,IAjJRwe,GAiBR,SAAmB7M,GACX6J,GACAzB,EAAQ0E,qBAAW7E,GACdvC,MAAMyD,EAAQnJ,EAAOlC,OAAOuL,IAC5B0D,cAAc,EAAE/E,IAErBK,EAAQ2E,mBAAS9E,GAAQxC,MAAMwD,EAAQlJ,EAAOlC,OAAOuL,MAErDjB,EAAQ0E,qBAAW7E,GAEnBI,EAAQ2E,mBAAS9E,GAAQxC,MAAMwD,EAAQlJ,EAAOlC,OAAOuL,KA1BrD4D,CAAUhC,KAqET9C,GAAmBa,IACpBb,EAAkBG,EACb1S,OAAO,mBACPa,OAAO,kBACPL,KAAK,KAAM6S,GACX7S,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,QACXA,KAAK,KAAM,QACXA,KAAK,gBAAiB,kBACtBsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAOtB,EAAoB,IAC3C,CAAEhE,OAAQ,MAAOsF,MAAOtB,EAAoB,MAE/ClC,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,UAob/BhC,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,SAE9CmC,GAYShC,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBAkBhB0S,EAAI1S,OAAO,qBACN8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,KAQHwR,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBAUhB0S,EAAI1S,OAAO,qBACN8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,IAnWhBM,EAAI1S,OAAO,sBACNQ,KAAK,YADV,uBACuC4R,EADvC,MAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,sBAAsBnK,KAAK4c,GAEtCC,EAAI5B,UAAU,4BAA4Bjb,KACtC4J,GACA6H,EAAOC,KAAOyM,GAWdkB,KACID,IACAA,GAAanD,SAEjBmD,GAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,IACV3U,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,KAGVH,KACID,IACAA,GAAahD,SAEjBgD,GAAepC,EACV1S,OAAO,iBACPa,OAAO,QACPL,KAAK,IAAKwU,IACVxU,KAAK,cAAe,UACpBM,QAAQ,qBAAqB,GAC7BN,KAAK,IAAK2R,EAAa,GACvBpS,KAAKgV,KA+LVZ,GACA6B,EAAOtD,EACF1S,OAAO,gBACP8Q,UAAU,QACVC,KAAKmB,GAEN+B,EACAsD,GAAmBvB,GAEnBwB,GAAiBxB,GAGrBA,EAAOtD,EAAI1S,OAAO,gBAAgB8Q,UAAU,QAAQC,KAAKA,GAErDkD,EAlKZ,SAAoC+B,GAEhCA,EAAK9E,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,IAAK,GACVA,KAAK,IAAK4R,GACV5R,KAAK,SAAU8R,EAAOhD,aACtB9O,KAAK,SAAS,gBAAG7J,EAAH,EAAGA,MAAH,OAAe0b,EAAO1b,MACpC8gB,GAAG,aAAa,SAAUzhB,EAAG+b,EAAG2F,GAC7BC,GAAgBpe,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEjDqF,GAAG,aAAa,SAAUzhB,GACvB4hB,GAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,EAAG+b,EAAG2F,GAC5BG,GAAete,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEhDqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAGzC4D,EAAKxV,KAAK,IAAK,GACVA,KAAK,KAAK,gBAAGvK,EAAH,EAAGA,KAAH,OAAcqc,EAAOrc,MAC/BuK,KAAK,SAAU8R,EAAOhD,aACtB9O,KAAK,QAAQ,mBAAcuX,GAAd,EAAG9hB,SAChB4b,aACAmG,SAAS1D,GACT2D,MAAM1D,GACNH,KAAKA,GACL5T,KAAK,SAAS,gBAAG7J,EAAH,EAAGA,MAAH,OAAe0b,EAAO1b,MAqIjCuhB,CAA2BlC,GA7HvC,SAAkCA,GAE9BA,EAAK9E,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,IAAK2R,GACV3R,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,UAAU,gBAAG7J,EAAH,EAAGA,MAAH,OAAeyb,EAAcE,EAAO3b,MACnD8gB,GAAG,aAAa,SAAUzhB,EAAG+b,EAAG2F,GAC7BC,GAAgBpe,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEjDqF,GAAG,aAAa,SAAUzhB,GACvB4hB,GAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,EAAG+b,EAAG2F,GAC5BG,GAAete,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEhDqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAEpCnB,MAAM+E,GACNxV,KAAK,KAAK,gBAAGvK,EAAH,EAAGA,KAAH,OAAcoc,EAAOpc,MAC/BuK,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,QAAQ,mBAAcuX,GAAd,EAAG9hB,SAChB4b,aACAmG,SAAS1D,GACT2D,MAAM1D,GACNH,KAAKA,GACL5T,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,UAAU,gBAAG7J,EAAH,EAAGA,MAAH,OAAeyb,EAAcE,EAAO3b,MAiGhDwhB,CAAyBnC,GAI7BA,EAAK3E,OAAOQ,aAAa1V,MAAM,UAAW,GAAG2V,WAE7CkE,EAAOtD,EAAI1S,OAAO,gBAAgB8Q,UAAU,QAAQC,KAAKA,GAErDkD,EACAsD,GAAmBvB,GAEnBwB,GAAiBxB,GAIrBA,EAAK3E,OAAOS,UA5fR4B,GAsbZ,SAAoBtJ,GAChB,IAAMgO,EAAiBnE,EACjByB,GACAE,GACAyC,EAAiBpE,EACjB0B,GACAE,GAIFjD,GACAF,EAAI5B,UAAU,2BAA2BgB,UAG7Cc,EAAUF,EACL1S,OAAO,mBACPa,OAAO,KACPC,QAAQ,0BAA0B,GAClCgQ,UAAU,QACVC,KAAKA,EAAK5Q,WACV+Q,QACArQ,OAAO,SAGPC,QAAQ,oBAAoB,GAC5BN,KAAK,IAAK4X,GACV5X,KAAK,IAAK6X,GACVtY,MApBiB,SAAC,GAAD,IAAGpJ,EAAH,EAAGA,MAAH,OAClByT,EAAOlC,OAAO0L,EAAdxJ,CAAkCzT,MAoBjC6J,KAAK,YAAaqT,EAAa,MAjd5ByE,CAAWjD,QAgMvB,SAAS0C,GAAa9hB,GAClB,OAAOmd,EAAmB,eACZC,EADY,KAEpBF,EAAeld,GA0BzB,SAASwJ,GAASM,EAAMwY,GACpBtX,EAAqBlB,EAAMwY,EAAgB,EAjTtB,GAwXzB,SAAShB,GAAmBvB,GAExBA,EAAK9E,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,IAAK4R,GACV5R,KAAK,IAAK,GACVA,KAAK,SAAU8R,EAAOhD,aACtB9O,KAAK,SAAS,gBAAG7J,EAAH,EAAGA,MAAH,OAAe0b,EAAO1b,MACpC8gB,GAAG,aAAa,SAAUzhB,EAAG+b,EAAG2F,GAC7BC,GAAgBpe,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEjDqF,GAAG,aAAa,SAAUzhB,GACvB4hB,GAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,EAAG+b,EAAG2F,GAC5BG,GAAete,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEhDqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAEpCnB,MAAM+E,GACNxV,KAAK,IAAK,GACVA,KAAK,KAAK,gBAAGvK,EAAH,EAAGA,KAAH,OAAcqc,EAAOrc,MAC/BuK,KAAK,SAAU8R,EAAOhD,aACtB9O,KAAK,SAAS,gBAAG7J,EAAH,EAAGA,MAAH,OAAe0b,EAAO1b,MACpC6J,KAAK,QAAQ,mBAAcuX,GAAd,EAAG9hB,SAoFzB,SAASuhB,GAAiBxB,GAEtBA,EAAK9E,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,IAAK2R,GACV3R,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,UAAU,gBAAG7J,EAAH,EAAGA,MAAH,OAAeyb,EAAcE,EAAO3b,MACnD8gB,GAAG,aAAa,SAAUzhB,EAAG+b,EAAG2F,GAC7BC,GAAgBpe,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEjDqF,GAAG,aAAa,SAAUzhB,GACvB4hB,GAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,EAAG+b,EAAG2F,GAC5BG,GAAete,KAAMvD,EAAG0hB,EAASvF,EAAYC,MAEhDqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAEpCnB,MAAM+E,GACNxV,KAAK,KAAK,gBAAGvK,EAAH,EAAGA,KAAH,OAAcoc,EAAOpc,MAC/BuK,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,UAAU,gBAAG7J,EAAH,EAAGA,MAAH,OAAeyb,EAAcE,EAAO3b,MACnD6J,KAAK,QAAQ,mBAAcuX,GAAd,EAAG9hB,SA6KzB,SAAS0hB,GAAgBtZ,EAAGrI,EAAG0hB,EAASvF,EAAYC,GAChDkD,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IAEJoC,EAAuBA,GAAwB,aAE3CN,EACAM,EAAqBxU,iBAAO3B,IAKhCqZ,EAAQxb,SAAQ,SAACuc,GACTA,IAAYpa,GAGhBmW,EAAqBxU,iBAAOyY,OASpC,SAASb,GAAgBvZ,EAAGrI,EAAGmc,EAAYC,GACvCkD,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IASR,SAASyF,GAAexZ,EAAGrI,EAAG0hB,EAASvF,EAAYC,GAC/CkD,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC9C8T,EACAC,IAGJsF,EAAQxb,SAAQ,SAACuc,GACbzY,iBAAOyY,GAASjY,KAAK,QAAQ,mBAAcuX,GAAd,EAAG9hB,YASxC,SAAS6hB,GAAYzZ,EAAGrI,EAAGmc,EAAYC,GACnCkD,GAAWzf,KAAK,cAAewI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC3C8T,EACAC,IA8iBR,OAlhBApe,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAaftgB,GAAQ8f,mBAAqB,SAAU4E,GACnC,OAAKla,UAAU/F,QAGfqb,EAAqB4E,EAEdnf,MAJIua,GAaf9f,GAAQ2kB,cAAgB,SAAUD,GAC9B,OAAKla,UAAU/F,QAGf2a,EAAsBsF,EAEfnf,MAJI6Z,GAcfpf,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAafjf,GAAQ0f,aAAe,SAAUgF,GAC7B,OAAKla,UAAU/F,QAGfib,EAAegF,EAERnf,MAJIma,GAcf1f,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IASpD5N,GAAQ6kB,cAAgB,SAAUH,GAC9B,OAAKla,UAAU/F,QAIXgb,EADAiF,EAp9Bc,IACJ,KAy9BPnf,MA19BW,MAk9BPka,GAsBfzf,GAAQkgB,sBAAwB,SAAUwE,GACtC,OAAKla,UAAU/F,QAGfyb,EAAwBwE,EAEjBnf,MAJI2a,GAaflgB,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAqBflR,GAAQwgB,qBAAuB,SAAUkE,GACrC,OAAKla,UAAU/F,QAGf+b,EAAuBkE,EAEhBnf,MAJIib,GAefxgB,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAafngB,GAAQigB,aAAe,SAAUyE,GAC7B,OAAKla,UAAU/F,QAGfwb,EAAeyE,EAERnf,MAJI0a,GAafjgB,GAAQ2f,aAAe,SAAU+E,GAC7B,OAAKla,UAAU/F,QAGfkb,EAAe+E,EAERnf,MAJIoa,GAaf3f,GAAQ4f,mBAAqB,SAAU8E,GACnC,OAAKla,UAAU/F,QAGfmb,EAAqB8E,EAEdnf,MAJIqa,GAaf5f,GAAQ6f,WAAa,SAAU6E,GAC3B,OAAKla,UAAU/F,QAGfob,EAAa6E,EAENnf,MAJIsa,GAaf7f,GAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,GAAH,MACCA,GACAoR,GAGAnf,MAPI+N,GAiBftT,GAAQ6gB,UAAY,SAAU6D,GAC1B,OAAKla,UAAU/F,QAGfoc,GAAY6D,EACZjO,GAA0B,QAEnBlR,MALIsb,IAcf7gB,GAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAefzf,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAS5C3C,GAAQwf,yBAA2B,SAAUkF,GACzC,OAAKla,UAAU/F,QAGf+a,EAA2BkF,EAEpBnf,MAJIia,GAafxf,GAAQohB,uBAAyB,SAAUsD,GACvC,OAAKla,UAAU/F,QAGf2c,GAAyBsD,EAElBnf,MAJI6b,IAafphB,GAAQ2e,iBAAmB,SAAU+F,GACjC,OAAKla,UAAU/F,QAGfka,EAAmB+F,EAEZnf,MAJIoZ,GAcf3e,GAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAkBf5gB,GAAQ+kB,YAAc,SAAUL,GAC5B,OAAKla,UAAU/F,QAGf2R,GAASsO,EAEFnf,MAJI6Q,IAafpW,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAaflN,GAAQ+gB,WAAa,SAAU2D,GAC3B,OAAKla,UAAU/F,QAGfsc,GAAa2D,EAENnf,MAJIwb,IAaf/gB,GAAQghB,iBAAmB,SAAU0D,GACjC,OAAKla,UAAU/F,QAGfuc,GAAmB0D,EAEZnf,MAJIyb,IAafhhB,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAafvf,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,GAAawD,EAENnf,MAJI2b,IAaflhB,GAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,GAAmBuD,EAEZnf,MAJI4b,IAafnhB,GAAQggB,yBAA2B,SAAU0E,GACzC,OAAKla,UAAU/F,QAGfub,EAA2B0E,EAEpBnf,MAJIya,GAafhgB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAORtf,G,klBCn1CI,SAASC,KACpB,IAcI8c,EACAoB,EACAC,EAIA4G,EACAC,EACAC,EACAxG,EAGAyG,EACAC,EAaA3F,EAGA4F,EA3CA/R,EAAS,CACLuL,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRxL,KAAM,GAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EACZoB,EAAOkF,iBACPC,EAA+BhO,GAE/BiO,EAAoB,GAKpBC,EAAiB,IACjBC,EAAiB,KACjBC,EAAcF,EAAiBC,EAK/BvF,GAAa,EACbyF,GAAU,EAGVC,GAA2B,EAC3BC,GAAoB,EACpBC,GAA+B,EAC/BC,EAAuB,KACvBC,EAAkB,CACdC,gBAAiB,UACjBC,gBAAgB,GAKpBC,EAAmB,MAEnBC,GAAkB,EAGlBlH,EAAiB,KACjBF,EAAcC,EAAYnR,aAAaC,YACvCsY,EAAuB,SAACtkB,GAAD,gBAAUA,EAAE+W,WAAZ,aAA2B/W,EAAEC,OAEpDskB,EAAa,SAAUvkB,GACnBuD,KAAKihB,SAAWxkB,GAEpBykB,EAAoB,SAACzkB,GACjBA,EAAE0kB,YAAcjB,EAAiBD,GAErC7G,EAAmB,SAAC5Y,EAAGC,GAAJ,OAAUA,EAAE8S,SAAW/S,EAAE+S,UAG5C6N,EAAc,SAAC,GAAD,SAAG7N,UACjB0I,EAAU,SAAC,GAAD,SAAGvf,MACb2kB,EAAe,SAAC,GAAD,IAAG7J,EAAH,EAAGA,KAAH,OAAcoC,EAAepC,EAAK9a,OAEjDqf,EAAaC,mBACT,kBACA,iBACA,kBACA,eAUR,SAASvhB,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GACtB5D,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EA4GR,SAAmBA,GACf,IACIwF,EAAYxF,EAAKsF,QAAO,SAACC,EAAKtgB,GAE9B,YAAyB6kB,IAArB7kB,EAAC,UAAsD,OAArBA,EAAC,SAC5BsgB,GAGXtgB,EAAE8W,UAAY9W,EAAC,SACfA,EAAEC,KAAO6D,OAAO9D,EAAC,MACjBA,EAAE+W,WAAa/W,EAAC,YAAqB,KAErC,cAAWsgB,GAAX,CAAgBtgB,OACjB,IAEC8kB,EAnJQ,SAAC/J,GAAD,OAAUA,EAAKsF,QAAO,SAAC5M,EAAOzT,GAAR,OAAcA,EAAE8W,SAAWrD,IAAO,GAmJhDsR,CAAUxE,GAER,IAAlBuE,GAAuBb,EAAgBE,iBACvCP,GAAU,GAgBd,OAbsBrD,EAAUnZ,KAAI,SAACpH,GAUjC,OATAA,EAAE+W,WAAajT,OACX9D,EAAE+W,YACEvD,GACIxT,EAAC,SACD8kB,EACAV,IAILpkB,KA3IAugB,CAAUR,GAsFzB,SAAkB/E,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,0BAA0B,GAzC/C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoBU,EAAQ,EAH5B,aAGkCgE,EAAS,EAH3C,MAKhBwN,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,gBAAgB,GAkC1C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAhGhBuR,CAASld,MACLyZ,EAqNRN,EAAI1S,OAAO,wBAAwBoF,KAAKsC,IA1DxCgL,EAAI1S,OAAO,4BAA4B8R,SA5FvCkH,EAASgC,iBACJC,SArIU,GAsIVtkB,MAAMgkB,GACNzE,KAAKvD,GAxCNM,IACAoG,EAAa6B,yBAAexL,MAAMuD,GAElCE,EACIA,GACAkG,EACK9I,OAAOQ,EAAK3T,IAAIoY,IAChBjF,SACA8F,QAAO,SAAC8E,EAAMC,GAGX,OAFAD,EAAKC,GAAQ/B,EAAW+B,GAEjBD,IACR,KAoCflC,EAAQoC,iBAAMC,YAAY5B,GAAgB6B,UAAU9B,GAkJxD,WAEQP,GACAxG,EAAI5B,UAAU,SAASgB,SAQ3B,IAAI0J,GALJtC,EAASxG,EACJ1S,OAAO,gBACP8Q,UAAU,SACVC,KAAKiI,EAAOjI,KAGZG,QACArQ,OAAO,KACPQ,KAAKkZ,GACLlZ,KAAKoZ,GACL3Z,QAAQ,OAAO,GACfD,OAAO,QAERsT,EACAqH,EACKvK,MAAMiI,GACN1Y,KAAK,OAAQoa,GACbnD,GAAG,aAAa,SAAUzhB,GACvB2hB,EAAgBpe,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,aAAa,SAAUzhB,GACvB4hB,EAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,GACtB6hB,GAAete,KAAMvD,EAAGmc,EAAYC,MAEvCqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAEpCP,aACAuC,KAAKA,GACL4D,SAASuB,GACTkC,UAAU,IAAKC,IAEpBF,EACKvK,MAAMiI,GACN1Y,KAAK,OAAQoa,GACbpa,KAAK,IAAKyY,GACVxB,GAAG,aAAa,SAAUzhB,GACvB2hB,EAAgBpe,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,aAAa,SAAUzhB,GACvB4hB,EAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,GACtB6hB,GAAete,KAAMvD,EAAGmc,EAAYC,MAEvCqF,GAAG,SAAS,SAAUzhB,GACnB8hB,GAAYve,KAAMvD,EAAGmc,EAAYC,MAI7C8G,EAAO7H,OAAOS,SA7QV6J,GAwZJjJ,EAAI1S,OAAO,iBAAiBa,OAAO,QAAQL,KAAK,QAAS,cArZjD2Y,IAkYRC,EAAmB1G,EACd5B,UAAU,0BACV9Q,OAAO4b,GACP/b,UAGDgc,EAAWzC,EAAiB0C,UAC5BC,GACI3C,EACAK,EACAF,IAzYAK,GAAWK,EAAgBE,gBAmJvC,WACQjB,GACAxG,EAAI5B,UAAU,SAASgB,UAE3BoH,EAASxG,EACJ1S,OAAO,gBACP8Q,UAAU,SACVC,KAAKiI,EAAOnM,MAGZqE,QACArQ,OAAO,KACPQ,KAAKkZ,GACLlZ,KAAKoZ,GACL3Z,QAAQ,OAAO,GACfD,OAAO,QAGPoQ,MAAMiI,GACN1Y,KAAK,OAAQyZ,EAAgBC,iBAC7B1Z,KAAK,IAAKyY,GACVpH,aACAuC,KAAKA,GACL4D,SAASuB,GACTkC,UAAU,IAAKC,IAEpBxC,EAAO7H,OAAOS,SA5KNkK,OAqLZ,SAASH,EAAWnkB,GACZA,EAAIqZ,MAAQsJ,IACZ3H,EAAI1S,OAAO,eACND,MAAK,kBAAMua,EAAqB5iB,EAAIqZ,SACpCvQ,KAAK,KAAM,QACXA,KAAK,cAAe,UAEzBkS,EAAI1S,OAAO,eAAenK,KAAK4J,GAAUka,IAmFjD,SAASiC,EAAT,GACI,GADsC,EAAR7K,KACrB9G,KAAOkP,EACZ,OAAO5f,KASf,SAASoe,EAAgB5a,EAAI/G,EAAGmc,EAAYC,GACxCyJ,EAAW7lB,GACXsf,EAAWzf,KAAK,kBAAmBkH,EAAI/G,EAAGwiB,gBAAMzb,GAAK,CACjDoV,EACAC,IAGA0H,IAGIE,GAAwBjd,IAAOid,GAC/B+B,GACI/B,EACAP,EAAiBD,EA9XA,KAkYrBJ,GAAoBrc,IAAOqc,GAC3B2C,GACI3C,EACAK,EAAiBD,GAGzBuC,GAAYhf,EAAI0c,IASxB,SAAS7B,EAAgB7a,EAAI/G,EAAGmc,EAAYC,GACxCkD,EAAWzf,KAAK,kBAAmBkH,EAAI/G,EAAGwiB,gBAAMzb,GAAK,CACjDoV,EACAC,IASR,SAASyF,GAAe9a,EAAI/G,EAAGmc,EAAYC,GAnMvCM,EAAI1S,OAAO,eAAeD,KAAK,IAyM3BqZ,GACAS,IACCE,IAED8B,EAAWzC,EAAiB0C,UAC5BC,GAAY3C,EAAkBK,KAM9B1c,IAAOqc,IACLS,GAA4B9c,IAAOqc,IAErC2C,GACIhf,EACA0c,EAAiBD,EAnbI,KAwbzBO,IACA8B,EAAW9e,EAAG+e,UACdC,GAAYhf,EAAI0c,GAChBO,EAAuBjd,GAG3BuY,EAAWzf,KAAK,iBAAkBkH,EAAI/G,EAAGwiB,gBAAMzb,GAAK,CAChDoV,EACAC,IASR,SAAS0F,GAAY/a,EAAI/G,EAAGmc,EAAYC,GACpCkD,EAAWzf,KAAK,cAAekH,EAAI/G,EAAGwiB,gBAAMzb,GAAK,CAC7CoV,EACAC,IAyDR,SAAS2J,GAAYhjB,EAAO2hB,GAAwB,IAAXzC,EAAW,uDAAH,EAC7CjY,iBAAOjH,GACF8Y,aACAoG,MAAMA,GACNwD,UAAU,KAAK,SAAUzlB,GACtB,IAAIN,EAAIumB,uBAAYjmB,EAAE0kB,YAAaA,GAEnC,OAAO,SAAC9jB,GAGJ,OAFAZ,EAAE0kB,YAAchlB,EAAEkB,GAEXqiB,EAAMjjB,OAa7B,SAAS0lB,GAAa1hB,GAClB,IAAItE,EAKJ,OAHAsE,EAAEshB,YAAc,EAChB5lB,EAAIumB,uBAAY,CAAEC,WAAY,EAAGC,SAAU,GAAKniB,GAEzC,SAAUpD,GACb,OAAOqiB,EAAMvjB,EAAEkB,KAWvB,SAAS6I,GAASM,EAAM4Z,GAGpByC,EAAoBvmB,KAAK,KAAM,EAFhB4jB,EAAiB,EAEYE,EAAa5Z,EAAKF,QAiXlE,OAvWA7L,EAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf8gB,EAA+Bb,EAExBnf,MAJIggB,GAkBfvlB,EAAQsmB,qBAAuB,SAAU5B,GACrC,OAAKla,UAAU/F,QAGf6hB,EAAuB5B,EAEhBnf,MAJI+gB,GAcftmB,EAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,EAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAgBfjf,EAAQimB,gBAAkB,SAAUvB,GAChC,OAAKla,UAAU/F,QAGfwhB,EAAkBvB,EAEXnf,MAJI0gB,GAcfjmB,EAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,EAAS0e,EAAKhO,EAAU9C,IASpD5N,EAAQylB,eAAiB,SAAUf,GAC/B,OAAKla,UAAU/F,QAGfghB,EAAiBf,EAEVnf,MAJIkgB,GAefzlB,EAAQqmB,gBAAkB,SAAU3B,GAChC,OAAKla,UAAU/F,QAGf4hB,EAAkB3B,EAEXnf,MAJI8gB,GAefrmB,EAAQ8lB,kBAAoB,SAAUpB,GAClC,OAAKla,UAAU/F,QAGfqhB,EAAoBpB,EAEbnf,MAJIugB,GAef9lB,EAAQ6lB,yBAA2B,SAAUnB,GACzC,OAAKla,UAAU/F,QAGfohB,EAA2BnB,EAEpBnf,MAJIsgB,GAkBf7lB,EAAQ+lB,6BAA+B,SAAUrB,GAC7C,OAAKla,UAAU/F,QAGfshB,EAA+BrB,EAExBnf,MAJIwgB,GAaf/lB,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,EAAQqoB,mBAAqB,SAAU3D,GACnC,OAAKla,UAAU/F,QAGf0gB,EAAqBT,EAEdnf,MAJI4f,GAafnlB,EAAQ0lB,eAAiB,SAAUhB,GAC/B,OAAKla,UAAU/F,QAGfihB,EAAiBhB,EAEVnf,MAJImgB,GAef1lB,EAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAafngB,EAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAgBftT,EAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAefzf,EAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,EAAWmC,GAAGnH,MAAMgF,EAAY9W,WAE5C,OAAO7H,IAAU2e,EAAathB,EAAU2C,GAS5C3C,EAAQ2e,iBAAmB,SAAU+F,GACjC,OAAKla,UAAU/F,QAGfka,EAAmB+F,EAEZnf,MAJIoZ,GAaf3e,EAAQomB,iBAAmB,SAAU1B,GACjC,OAAKla,UAAU/F,QAGf2hB,EAAmB1B,EAEZnf,MAJI6gB,GAafpmB,EAAQwlB,kBAAoB,SAAUd,GAClC,OAAKla,UAAU/F,QAGf+gB,EAAoBd,EAEbnf,MAJIigB,GAafxlB,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAORlN,E,qkBC56BI,SAASC,KACpB,IAsBIolB,EAkBAiD,EACAnK,EACAC,EACArB,EACA2B,EA5CApL,EAAS,CACLuL,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRxL,KAAM,GAEVrG,EAAQ,IACRgE,EAAS,IAGTqX,EAAa,GAEbC,EAAc,IAGd/I,EAAe,IACfgJ,EAAO,GAEPxI,GAAe,EACfyI,EAAqB,KACrBC,GAAgB,EAGhBxJ,EAAiB,KACjBF,EAAcC,EAAYnR,aAAaC,YACvC4a,EAAQ,SAAC,GAAD,SAAG3S,IACXuL,EAAU,SAAC,GAAD,SAAGvf,MACb4mB,EAAuB,SAAC,GAAD,IAAG/P,EAAH,EAAGA,SAAH,OACnB5E,iBAAOuL,EAAPvL,CAAqB4E,GAAY2P,GACrCK,EAAgB,SAAC,GAAa,IAAX7mB,EAAW,EAAXA,KACf,OAAuB,OAAnBkd,GACOA,EAAeld,GAChBkd,EAAeld,GAIlBojB,EAAWpjB,IAEtB8mB,EAAc,SAAC,GAAD,IAAGjQ,EAAH,EAAGA,SAAH,MACU,iBAAbA,GAA6C,iBAAbA,GAa/C,SAAS9Y,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GA2B9B,IA4RQiH,EACAC,EACAC,EACAC,EAKAC,EAvOAC,EAKAC,EACAC,EAlEAC,EAmIA9d,EA9JAyS,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EA+HR,SAAmBA,GAGf,OAFA4L,EAAgB5L,EAAK0M,OAAOV,GAAatkB,SAAWsY,EAAKtY,OAElDsY,EAAKsF,QAAO,SAACC,EAAKtgB,GAOrB,YANmB6kB,IAAf7kB,EAAE8W,UAAyC,OAAf9W,EAAE8W,WAC9B9W,EAAE8W,UAAY9W,EAAE8W,UAEpB9W,EAAEC,KAAO6D,OAAO9D,EAAEC,MAClBD,EAAEiU,IAAMjU,EAAEiU,GAEV,cAAWqM,GAAX,CAAgBtgB,MACjB,IA1IQugB,CAAUR,GAwDrBsD,EAAa6B,yBAAexL,MAAMuD,GAQtC,SAAkBjC,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,gCAAgC,IAxB5CD,OAAO,KACPC,QAAQ,0BAA0B,GAClCN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKNhS,OAAO,KAAKC,QAAQ,gBAAgB,GAyB9C4R,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAzEhBuR,CAASld,MAEL0a,GAuJJvU,EAAU6c,EAEd7J,EAAI1S,OAAO,iBAAiB8Q,UAAU,KAAKgB,SAG3CY,EAAI1S,OAAO,iBAAiBa,OAAO,KAAKC,QAAQ,eAAe,IAG/Dwb,EAAU5J,EACL1S,OAAO,gBACP8Q,UAAU,kBACVC,KAAKA,IAILG,QACArQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBN,KAAK,YAAaoc,GAClBpc,KAAK,aAAa,SAAU,GAAU,IAARvK,EAAQ,EAARA,KACvBynB,EAAmBhe,EAEnBie,EADavL,EAAc,EAE3BwL,EAAaxB,EAAwBnmB,EAnOtC,IAuOH,OAFAyJ,GAAW6c,EAAa,EAAIsB,IAAyBD,EAErD,oBAAoBF,EAApB,YAAwCC,EAAxC,QAEH1M,MAAMqL,GACNzb,OAAO,UACPC,QAAQ,iBAAiB,GACzBN,KAAK,KAAM+b,EAAa,GACxB/b,KAAK,MA1OM,GA2OXA,KAAK,IAAK+b,EAAa,GACvBpgB,MAAM,OAAQ2gB,GACd3gB,MAAM,eAAgB,GAE3BuW,EAAI1S,OAAO,iBACN8Q,UAAU,kBACVjQ,OAAO,QACPC,QAAQ,qBAAqB,GAC7Bf,KAAKyV,GACLhV,KAAK,IAAKqd,KACV1hB,MAAM,YANX,UAlPW,GAkPX,OAOKA,MAAM,iBAPX,UAjPoB,GAiPpB,OAUAuW,EAAI1S,OAAO,iBACN8Q,UAAU,kBACVO,OACAQ,aACA1V,MAAM,UAAW,GACjB2V,SAxLD0L,EACA9K,EAAI1S,OAAO,gBAAgBH,OAAOie,wBAAwB5c,MAC1Dqb,EACiBpK,EAAaqL,GAEZ,IAsRlBR,EAAgBtK,EAAI5B,UAAU,iBAC9BmM,EAAkBD,EAAcxU,OAChC0U,EAAc9K,EAAc,EAAK,IACjC+K,EAAUzK,EACT1S,OAAO,iBACPa,OAAO,KACPC,QAAQ,eAAe,GACvBN,KAAK,YAJI,uBAIyB0c,EAJzB,OAKVE,EAAYJ,EAAcS,OAAd,qBAAmCR,EAAnC,OAENzc,KAAK,YAAf,oBAAyC+b,EAAzC,QACAY,EAAQtc,QAAO,kBAAMuc,EAAUvd,WA1O3Bwd,EACA3K,EACK1S,OAAO,4BACPH,OACAie,wBAAwB5c,MAAQ2c,IAErCN,GADAD,EAAapc,EAAQmc,GACO,EAE5BC,EAAa,GACb5K,EAAI1S,OAAO,4BAA4BQ,KACnC,YADJ,oBAEiB+c,EAFjB,SA4HR,WACI7K,EAAI1S,OAAO,iBAAiB8Q,UAAU,KAAKgB,UAE3CwK,EAAU5J,EACL1S,OAAO,iBACP8Q,UAAU,iBACVC,KAAKA,IAILG,QACArQ,OAAO,KACPC,QAAQ,eAAe,GACvBD,OAAO,KACPC,QAAQ,gBAAgB,GACxBN,KAAK,YAAaoc,GAClBpc,KAAK,aAAa,SAAUxK,EAAGN,GAC5B,IAAIgoB,EAAmBnB,EAAasB,IAEhCF,GAAkBjoB,EAAI,IADT0c,GAAerB,EAAKtY,OAAS,IAG9C,0BAAoBilB,EAApB,YAAwCC,EAAxC,QAEH1M,MAAMqL,GACNzb,OAAO,UACPC,QAAQ,iBAAiB,GACzBN,KAAK,KAAM+b,EAAa,GACxB/b,KAAK,MAlSM,GAmSXA,KAAK,IAAK+b,EAAa,GACvBpgB,MAAM,OAAQ2gB,GACd3gB,MAAM,eAAgB,GAE3BuW,EAAI1S,OAAO,iBACN8Q,UAAU,iBACVA,UAAU,kBACVjQ,OAAO,QACPC,QAAQ,qBAAqB,GAC7Bf,KAAKyV,GACLhV,KAAK,IAAKqd,KACV1hB,MAAM,YAPX,UA1SW,GA0SX,OAQKA,MAAM,iBARX,UAzSoB,GAySpB,OAUIwgB,EAoEJjK,EAAI1S,OAAO,iBACN8Q,UAAU,iBACVA,UAAU,kBACVjQ,OAAO,QACPC,QAAQ,sBAAsB,GAC9Bf,KAAK8c,GACLrc,KAAK,IAAK2R,EAzXM,IA0XhBhW,MAAM,YAPX,UAxXW,GAwXX,OAQKA,MAAM,iBARX,UAlXsB,GAkXtB,OASKA,MAAM,cAAe,OACrBA,MAAM,cAAe,QAxO9B,WACI,IAAIkhB,EAAkB3K,EACjB1S,OAAO,4BACPH,OACAie,wBAAwB5c,MACzBoc,EAAapc,EAAQmc,EACrBE,EAAeD,EAAa,EAAID,EAAkB,EAElDC,EAAa,GACb5K,EAAI1S,OAAO,4BAA4BQ,KACnC,YADJ,oBAEiB+c,EAFjB,QAoJAQ,GAIJrL,EAAI1S,OAAO,iBACN8Q,UAAU,iBACVO,OACAQ,aACA1V,MAAM,UAAW,GACjB2V,SAxQGkM,GAGAtB,IACAuB,IACAC,EAAaxB,OAoIzB,SAASuB,IACLvL,EAAI1S,OAAO,iBACN8Q,UAAU,kBACVhQ,QA3Lc,YA2LY,GAoInC,SAASod,EAAaC,GAClB,IACIC,EAAY1L,EAAI1S,OAAJ,sBAA0Bme,EAA1B,OAEZC,EAAUC,QAAQ5lB,SAClBia,EAAI1S,OAAO,iBACN8Q,UALS,kBAMThQ,QAtUU,YAsUgB,GAE/Bsd,EAAUtd,QAxUK,YAwUqB,IAS5C,SAAS+c,IACL,OAAOrB,EAAcD,EA0OzB,OA1LAvoB,EAAQsqB,eAAiB,WACrBL,KASJjqB,EAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,EAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAafjf,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAYflR,EAAQuqB,UAAY,SAAUC,GAC1BP,IACAC,EAAaM,IASjBxqB,EAAQyqB,mBAAqB,SAAU/F,GACnC,OAAKla,UAAU/F,QAGfikB,EAAqBhE,EAEdnf,MAJImjB,GAaf1oB,EAAQigB,aAAe,SAAUyE,GAC7B,OAAKla,UAAU/F,QAGfwb,EAAeyE,EAERnf,MAJI0a,GAafjgB,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,EAAQwoB,YAAc,SAAU9D,GAC5B,OAAKla,UAAU/F,QAGf+jB,EAAc9D,EAEPnf,MAJIijB,GAgBfxoB,EAAQuoB,WAAa,SAAU7D,GAC3B,OAAKla,UAAU/F,QAGf8jB,EAAa7D,EAENnf,MAJIgjB,GAafvoB,EAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAafzf,EAAQyoB,KAAO,SAAU/D,GACrB,OAAKla,UAAU/F,QAGfgkB,EAAO/D,EAEAnf,MAJIkjB,GAafzoB,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAORlN,E,iEC7oBL0qB,GAAgB,CAClBC,OAAQ,CAAEA,OAAQ,WAClBC,KAAM,CAAEA,KAAM,WACdC,IAAK,CAAEA,IAAK,WACZC,SAAU,CAAED,IAAK,UAAWE,MAAO,SACnCA,MAAO,CAAEA,MAAO,SAChBC,KAAM,CAAEA,KAAM,YAULC,GAAU,SAACC,EAAWC,GAC/B,IAAM1iB,EAAS,IAAI2iB,KAAKF,GAIxB,OAFAziB,EAAO4iB,QAAQ5iB,EAAO6iB,UAAYH,GAE3BrlB,OAAO2C,IAUL8iB,GAAW,SAACL,EAAWM,GAGhC,OAAOnQ,KAAKoQ,KACRpQ,KAAKqQ,KACA,IAAIN,KAAKF,GAAWS,UAAY,IAAIP,KAAKI,GAASG,WAJ9B,SAgBpBC,GAA4B,SAACC,GAAD,OACrCxQ,KAAKoQ,KAAKI,EAAe,QAShBC,GAAyB,SAAC1V,GAA6B,IAArB2V,EAAqB,uDAAV,MAClDC,EAAUtB,GAAcqB,GACxBE,EAAY,IAAIC,KAAKC,eAAe/V,EAAQ4V,GAEhD,OAAO,SAACI,GAAD,OAAUH,EAAU/X,OAAOkY,KCpDhCC,GAAY,CACd1B,OAAQ2B,sBAAW,QACnB1B,KAAM0B,sBAAW,SACjBzB,IAAKyB,sBAAW,MAChBxB,SAAUwB,sBAAW,SACrBvB,MAAOuB,sBAAW,MAClBtB,KAAMsB,sBAAW,OAEfC,IAAsB,aACvB3V,GAAqBC,YAAc0C,YAAShD,MAAM,IAD3B,OAEvBK,GAAqBE,SAAW2C,WAAQlD,MAAM,IAFvB,OAGvBK,GAAqBG,UAAY4D,aAAUpE,MAAM,IAH1B,OAIvBK,GAAqBI,WAAa6D,YAAStE,MAAM,IAJ1B,IAatBiW,GAA8B,SAACC,GAYjC,OARIA,EAHwBvV,GAAZG,QAIDT,GAAqBE,SACzB2V,EALiBvV,GAAtBE,SAMSR,GAAqBG,UAErBH,GAAqBI,YAalC0V,GAA6B,SAACxf,EAAOyf,GACvC,IAAIC,EAAgBvR,KAAKoQ,KACrBve,EAAQ,IAGZ,OAAOyf,EAlDqB,EAmDtBlT,WACA4B,KAAKnG,IAAIyX,EAAiBC,IA4BvBC,GAAoB,SAC7BC,EACA5f,GAGC,IAFD6f,EAEC,uDAFU,KACX3W,EACC,uDADQ,KAEH4W,EAAY,IAAI5B,KAAK0B,EAAW,GAAGV,MACnCa,EAAW,IAAI7B,KAAK0B,EAAWA,EAAWroB,OAAS,GAAG2nB,MACtDc,EAAeD,EAAWD,EAG5B5W,IACiB,oBAAT8V,MACa,YAAhB,oBAAOA,KAAP,gBAAOA,SAAsBA,KAAKC,kBAEvC/V,EAAS,MAGR2W,IACDA,EAAWP,GAA4BU,IAG3C,MAAuBH,EAAS7gB,MAAM,KAAtC,YAAOihB,EAAP,KAAcC,EAAd,KACMC,EAAiBd,GAAuBQ,GACxCO,EAAiBZ,GACnBxf,EACA0e,GAA0BsB,IAG9B,MAAO,CACHC,MAAO,CACHjZ,OAAQkC,EACF0V,GAAuB1V,EAAQ+W,GAC/Bd,GAAUc,GAChBI,KAAMD,GAEVF,MAAO,CACHlZ,OAAQkC,EACF0V,GAAuB1V,EAAQgX,GAC/Bf,GAAUe,GAChBG,KAAMF,KAaLG,GAAsB,SAACC,EAAYvgB,GAC5C,IAAMwgB,EAAaD,EAAW,GAAGrB,KASjC,MAAO,CACHmB,KAjF0C,SAACrgB,EAAOyf,GACtD,IAAIC,EAAgBvR,KAAKoQ,KACrBve,EAAQ,IAGZ,OAAOmO,KAAKnG,IAAIyX,EAAiBC,GAsEVe,CACnBzgB,EAJcugB,EAAWA,EAAWhpB,OAAS,GAAG2nB,KACvBsB,KAYlB,GACXb,GC7JEe,GAAW,mBAEJC,GAAwB,SAACC,GAMlC,OALsBA,EACjBjhB,OAAO,QACPA,OAAO,UACPL,KAAK,KAAMohB,KAqCPG,GAAuB,SAACC,GAGjCA,EACKxhB,KAAK,IAAK,SACVA,KAAK,IAAK,SACVA,KAAK,QAAS,SACdA,KAAK,SAAU,SAEpBwhB,EACKnhB,OAAO,iBACPL,KAAK,OAAQ,UACbA,KAAK,SAXQ,2CAalBwhB,EACKnhB,OAAO,kBACPL,KAAK,eAAgB,KACrBA,KAAK,SAAU,eACfA,KAAK,KAAM,iBAEhB,IAAIyQ,EAAQ+Q,EAAenhB,OAAO,WAMlC,OAJAoQ,EAAMpQ,OAAO,eAAeL,KAAK,KAAM,eAEvCyQ,EAAMpQ,OAAO,eAAeL,KAAK,KAAM,iBAEhCohB,IA6CEK,GAAwB,SACjCllB,EACAqX,EACA8N,GAEC,IADDC,EACC,uDADuB,EAATD,EAETlK,EAAW,IACXC,EAAQ,GAEdlb,EAAG8U,aACEuC,KAAKA,GACL4D,SAASA,GACTxX,KAAK,IAAK2hB,GACVtQ,aACAuC,KAAKA,GACL6D,MAAMA,GACND,SAASA,GACTxX,KAAK,IAAK0hB,IC3HNE,GAAkB,SAACzrB,EAAO0rB,GACnC,MAAa,WAATA,EACOC,OAAO3rB,GAGX,IAAIyoB,KAAKzoB,IAUP4rB,GAAY,SAAC5rB,GACtB,OAAOA,S,0mDCqJI,SAAS1C,KACpB,IAUIye,EACAzU,EACAkU,EACAC,EACAC,EACAC,EACA+G,EACA7G,EACAgQ,EACA/P,EAaAjL,EAgBA4C,EAQAqY,EACAhB,EAaAiB,EAEAC,EACAC,EACAnP,EA1EAnM,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EACZ6P,EAAmB,IAWnB9O,EAEU,GAFVA,EAGY,EAMZd,EAAcC,EAAYnR,aAAaC,YACvCmR,EAAiB,KACjB2P,EAA2B5P,EAAYvQ,eAAeC,UAEtDmgB,EAAiBhZ,GAAS,qBAC1BiZ,EAAkB,KAClBC,EAAoB,KAQpBC,EAAiB,OACjBC,EAAa,SACbC,EAAc,KACd7P,EAAS,KACT8P,EAAoB,KAEpBC,GAA0B,EAC1BnP,GAAa,EACbC,EAAOC,gBACPC,EAAoB/I,GAGpBgY,EAAY,SAGZC,EAAY,OACZ5O,EAAa,QACb6O,GAAa,QAEb1O,GAAa,KACbD,GAAe,KAEfI,GAAa,KACbD,GAAe,KACfyO,GAAoB,GACpBpQ,GAAS,EACTqQ,IAAuB,EAMvBC,GAAc,GACdC,GAAyB3Q,EAAYnR,aAAaE,KAAK,GACvDqV,GAAO,KAGPwM,GAAa,GAEbxE,GAAU,SAAC,GAAD,SAAGc,MACb3K,GAAW,SAAC,GAAD,SAAG9e,OACdotB,GAAW,SAAC,GAAD,SAAGC,OACdC,GAAuB,SAACjuB,GAAD,OAAOA,EAAC,WAG/Bsf,GAAaC,mBACT,kBACA,iBACA,kBACA,uBACA,mBAYR,SAASvhB,GAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GAAO,IA2f7BmO,EAAOC,EA3fsB,EA2UrC,YAAsD,IAAjC1B,EAAiC,EAAjCA,YAAahB,EAAoB,EAApBA,WAAY1Q,EAAQ,EAARA,KAC1C,IAAK0R,IAAgB1R,EACjB,MAAM,IAAIvX,MACN,6IAKHipB,GAUD1R,EAAO0R,EAAYpM,QAAO,SAAC+N,EAAOJ,GAU9B,OATAA,EAAMK,MAAMnoB,SAAQ,SAACkkB,GACjBgE,EAAMhlB,KAAK,CACPklB,UAAWN,EAAK,UAChB/tB,KAAM+tB,EAAMP,IACZrD,KAAMA,EAAKoD,GACX7sB,MAAOypB,EAAKxL,QAIbwP,IACR,IAGHzf,QAAQgG,KACJ,2IAxBJ8X,EAAc8B,kBACTttB,IAAIgtB,IACJ3H,QAAQvL,GACR3T,KAAI,SAACpH,GAAD,MAAQ,CACTguB,MAAOhuB,EAAEka,OAAO,GAAT,KACPoU,UAAWtuB,EAAEiB,IACbotB,MAAOruB,EAAEka,WAgDrB,OAzBAuR,EAAa8C,kBACRttB,IAAIqoB,IACJhD,QAAQvL,GACR3T,KAAI,SAACpH,GACF,MAAO,CACHoqB,KAAMgC,GAAgBpsB,EAAEiB,IAAKisB,GAC7BsB,OAAQxuB,EAAEka,WAmBf,CACHuS,YAhB0BA,EAAYpM,QAAO,SAAC+N,EAAOJ,GACrD,IAAMK,EAAwBL,EAAxBK,MAAUI,EAAhB,KAA8BT,EAA9B,IAEIU,EAAWL,EAAMjnB,KAAI,SAACpH,GACtB,MAAO,CACHoqB,KAAMgC,GAAgBpsB,EAAEwtB,GAAYN,GACpCvsB,OA3YSA,EA2YcX,EAAE4e,GA3YK,OAAVje,EAAiB,MAAQA,IAArC,IAACA,KAiZjB,OAFAytB,EAAMhlB,KAAN,IAAailB,MAAOK,GAAaD,IAE1BL,IACR,IAIC3C,cA3Y2ClL,CAAUR,IAAlD0M,EAD0B,EAC1BA,YAAyBhB,EADC,EACbA,WAEhBtP,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAmTnD,SAAkB/B,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,yBAAyB,GAhI9C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EACKF,UAAU,iBACVjQ,OAAO,KACPC,QAAQ,cAAc,GAC3BkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,sBAAsB,GACpDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAyG5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GA7ThBuR,CAASld,MACLyZ,GA4hBRN,EAAI1S,OAAO,wBAAwBoF,KAAKuC,IAtIxC+K,EAAI1S,OAAO,4BAA4B8R,SAvK3C,WAyBQ7I,EAAOC,cAAIuZ,GAAa,gBAAG4B,EAAH,EAAGA,MAAH,OAAenb,cAAImb,EAAO/E,OAClDnW,EAAOC,cAAIqZ,GAAa,gBAAG4B,EAAH,EAAGA,MAAH,OAAejb,cAAIib,EAAO/E,OAzBtDjN,EA2BuB,WAAnB6Q,EACmB,gBAAfC,EACOwB,qBACFpU,OAAO,CAACtH,EAAME,IACd4N,WAAW,CAAC,EAAG5E,IAEbpD,wBACFwB,OAAO,CAACtH,EAAME,IACd4N,WAAW,CAAC,EAAG5E,IAGjByS,sBAAYrU,OAAO,CAACtH,EAAME,IAAO4N,WAAW,CAAC,EAAG5E,IASvD0S,EAAOzb,cAAIqZ,GAAa,gBAAG4B,EAAH,EAAGA,MAAH,OAAejb,cAAIib,EAAO5O,OAClDqP,EAAO5b,cAAIuZ,GAAa,gBAAG4B,EAAH,EAAGA,MAAH,OAAenb,cAAImb,EAAO5O,OAClDsP,EAAoBD,EAAO,GAAKnB,GAAuBmB,EAAO,EAC9DE,EAA0B,IAATF,GAAuB,IAATD,EAAa,EAAIA,EAjDpDvS,EAmDOvD,wBACFwB,OAAO,CAACwU,EAAmBC,IAC3BjO,WAAW,CAAC3E,EAAa,IACzB6S,OATT,IACQJ,EACAC,EACAC,EACAC,EA3BR,IACQ/b,EACAE,EAlBJ,IAAIuG,GAJJ2J,EAAa6B,yBACRxL,MAAMuD,GACN1C,OAAOkS,EAAYrlB,IAAI2mB,MAELrU,QAEvByD,EACIA,GACAkG,EAAW9I,SAAS8F,QAAO,SAAC8E,EAAMC,EAAM1lB,GAGpC,OAFAylB,EAAKC,GAAQ1L,EAAMha,GAEZylB,IACR,IAzPHlE,GAyGR,WACI,IAAIkK,EAAOC,EAEX,GAAuB,WAAnB8B,EACA/B,EAAQK,GAAoBC,EAAYvgB,GACxCkgB,EAAQ,KAGJ5O,EADe,gBAAf2Q,EACQjM,qBAAW7E,GACdvC,MAAMqR,EAAMI,KAAM,KAClB2D,YAAW,SAAUlvB,GAClB,IAAMmvB,EAAM9V,KAAK8V,IAAInvB,GAAKqZ,KAAK+V,KAE/B,OAAO/V,KAAKqQ,IAAIrQ,KAAKE,MAAM4V,GAAOA,GAAO,KACnC,MAAQ9V,KAAKE,MAAM4V,GACnB,MAGNjO,qBAAW7E,GACdvC,MAAMqR,EAAMI,MACZ2D,WAAWG,QAEjB,CACH,GACoB,WAAhBjC,GAC6B,iBAAtBC,EAEPlC,EAAQ,CACJI,KAAMhO,EACNrL,OAAQoY,sBAAW+C,IAEvBjC,EAAQ,SACL,OACiBP,GAChBY,EACAvgB,EACAkiB,EACAhZ,GAJD+W,EADA,EACAA,MAAOC,EADP,EACOA,MAOVoB,EAAWtL,qBAAW7E,GACjBvC,MAAMsR,EAAMG,MACZ+D,SAAS,EAAG,GACZJ,WAAW9D,EAAMlZ,QAG1BsK,EAAQ0E,qBAAW7E,GACdvC,MAAMqR,EAAMI,MACZ+D,SAAS,GAAI,GACbC,YArPK,GAsPLL,WAAW/D,EAAMjZ,QAG1BuK,EAAQ2E,mBAAS9E,GACZxC,MAAMwD,IACNgS,SAAS,CAAC,IACVC,YA5PS,GA6PTL,WAAWG,IA4XpB,SAAuB9R,EAAQD,GAC3BZ,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,SAElD,IACI0T,EADOtc,cAAIuZ,GAAa,gBAAG4B,EAAH,EAAGA,MAAH,OAAenb,cAAImb,EAAO5O,OACpB,EAErB,eAAT6B,IAAkC,SAATA,MAqDjC,SAAiChE,GAChBtB,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBAWJ0S,EACP1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAM,GACXA,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GA/EZqT,CAAwBnS,GACpBkS,GAuFe9S,EAClB1S,OAAO,eACP8Q,UAAU,cAEAtQ,KAAK,SAAS,SAACxK,GAAD,OACnB,IAANA,EACM,8CACA,gBAzFG,aAATshB,IAAgC,SAATA,IAW/B,SAA+B/D,GACdtB,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBAUJ0S,EACP1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,GApCZklB,CAAsBnS,GAxY1BoS,CAAcxE,EAAMI,KAAMjO,IAwe9B,WACIZ,EAAI1S,OAAO,uBAAuB8Q,UAAU,gBAAgBgB,SAC5DY,EAAI1S,OAAO,uBACN8Q,UAAU,2BACVgB,SAEL,IAAI8T,EAAUhC,GAAYxmB,KAAI,SAACgD,GAAD,OAAUA,EAAKG,KAe7CmS,EAAI1S,OAAO,uBACN8Q,UAAU,oBACVC,KAAK6U,GACL1U,QACArQ,OAAO,QACPL,KAAK,QAAS,eACdA,KAAK,KAAM,GACXA,KAAK,KAAM2R,GACX3R,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,MACzBwK,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,MACzBwK,KAAK,UAAU,SAACxK,GAAD,OAvBJ6vB,EAuBoB7vB,EAtBX4tB,GAAYkC,MAC7B,SAAC1lB,GAAD,OAAUA,EAAKG,IAAMslB,KACvBnR,OAMKmP,GATI,IAACgC,KAwBXrlB,KAAK,OAAQ,QAhCK,WAmCNojB,IAnCM,IAmCvB,2BAA8B,KAArBxjB,EAAqB,QACtBA,EAAKnK,MACLyc,EAAI1S,OAAO,uBACNa,OAAO,QACPL,KAAK,IAAK2R,GACV3R,KAAK,IAAK8R,EAAOlS,EAAKG,GAAK,GAC3BC,KAAK,QAAS,0BACdA,KAAK,cAAe,OACpBA,KAAK,oBAAqB,YAC1BT,KAAKK,EAAKnK,OA5CA,+BAvevB8vB,GApKI1O,GA+aR,WACI3E,EAAI1S,OAAO,yBACNQ,KAAK,YADV,uBACuC4R,EADvC,MAEKvc,KAAK2c,GAEU,WAAhB4Q,GAA+C,WAAnBF,GAC5BxQ,EAAI1S,OAAO,6BACNQ,KACG,YAFR,uBAGwB4R,EArhBT,GAkhBf,MAKKvc,KAAK2sB,GAGd,GAAIzN,GAAY,CACRD,IACApC,EAAI5B,UAAU,iBAAiBgB,SAEnC,IAAIkU,EAAkB7T,EAAa,EAC/B8T,EACA7T,EAhiBW,GAqCC,GA6fhB0C,GAAepC,EACV1S,OAAO,iBACPa,OAAO,QACPL,KAAK,IAAKwlB,GACVxlB,KAAK,IAAKylB,GACVzlB,KAAK,cAAe,UACpBA,KAAK,QAAS,gBACdT,KAAKgV,IAQd,GALArC,EAAI1S,OAAO,yBACNQ,KAAK,YADV,qBACqCuT,EADrC,SAEKle,KAAK4c,GACL5c,KAAKqwB,IAENhR,GAAY,CACRD,IACAvC,EAAI5B,UAAU,iBAAiBgB,SAGnC,IAAIqU,GAAmBzC,GAAoB3P,EACvCqS,GAAmBhU,EAAc,EAErC6C,GAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPL,KAAK,IAAK4lB,GACV5lB,KAAK,IAAK2lB,GACV3lB,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,QAAS,gBACdT,KAAKmV,KAneVmR,GA6MC7e,IACDA,EAAiBkL,EACZ1S,OAAO,mBACPa,OAAO,kBACPL,KAAK,KAAMuiB,GACXviB,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,QACXA,KAAK,KAAM,MACXA,KAAK,gBAAiB,kBACtBsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAOoO,EAAyB,IAChD,CAAE1T,OAAQ,OAAQsF,MAAOoO,EAAyB,MAErD5R,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,UAgR/BoP,GAAa,GAEbK,EAAY/jB,kBACPkmB,MAAM9a,GAAS+X,IACf5a,GAAE,gBAAGyX,EAAH,EAAGA,KAAH,OAAc/N,EAAO+N,MACvBmG,SAAQ,mBAAyB,OAAzB,EAAG5vB,SACX4J,GAAE,gBAAG5J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAE7ButB,EAAQxR,EACH1S,OAAO,gBACP8Q,UAAU,SACVC,KAAK0R,EAAasB,IAEvB9lB,EAAQimB,EACHhT,QACArQ,OAAO,KACPL,KAAK,QAAS,SACdK,OAAO,QACPL,KAAK,QAAS,QACdyQ,MAAMiT,GACN1jB,KAAK,MAAM,qBAAGwjB,SACdxjB,KAAK,KAAK,gBAAG6jB,EAAH,EAAGA,MAAH,OAAeF,EAAUE,MACnC7jB,KAAK,UAAU,SAACxK,GAAD,OACW,IAAvBysB,EAAYhqB,OAAZ,eACcsqB,EADd,MAziBUiB,EA2iBShuB,EA3iBTguB,MAAY7Q,EAAe6Q,IAA9B,IAAGA,KA6iBbxjB,KAAK,OAAQ,QAElB0jB,EAAM7S,OAAOS,SArHjB,WACI,GAAIqC,EAAY,CACZ,IAAMqS,EAAcvoB,EAAMogB,QAAQhI,OAAOoQ,GAAiB,GAE1DxoB,EACKuC,KACG,mBACAgmB,EAAc,IAjeF,EAiegCA,GAE/CrqB,MAAM,cAAe,oBACrBqE,KAAK,oBAAqBgmB,GAC1B3U,aACAmG,SAAS1D,GACTF,KAAKA,GACL5T,KAAK,oBAzeK,KAuEfkmB,GA+iCGxlB,EAAQ2hB,IAjXVH,IACDA,EAAUhQ,EACL1S,OAAO,mBACPa,OAAO,QACPL,KAAK,QAAS,WACdA,KAAK,KAAM,GACXA,KAAK,KAAM0E,GACX1E,KAAK,SAAU4R,GACf5R,KAAK,QAAS2R,GACd3R,KAAK,OA5vBC,oBA6vBNrE,MAAM,UAAW,SA0DrBwmB,IACDA,EAA0BjQ,EACrB1S,OAAO,mBACPa,OAAO,KACPL,KAAK,QAAS,0CACdA,KAAK,YAAa,sBAEvBoiB,EAAqBD,EAChB7R,UAAU,QACVC,KAAK,CACF,CACI1H,GAAI,EACJC,GAAI,EACJT,GAAI,EACJU,GAAI,KAGX2H,QACArQ,OAAO,QACPC,QAAQ,mBAAmB,GAC3BN,KAAK,KAAM,GACXA,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,IA7uBpBkS,EAAI+E,GAAG,aAAa,SAAUzhB,IAs1BlC,SAAyBqI,EAAGrI,GACxB0sB,EAAQvmB,MAAM,UAAW,SACzBymB,EAAmB9hB,QAAQ,gBAAgB,GAE3CwU,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,IAz1B3CsZ,CAAgBpe,KAAMvD,MAErByhB,GAAG,YAAY,SAAUzhB,IAu0BlC,SAAwBqI,EAAGrI,GACvB0sB,EAAQvmB,MAAM,UAAW,QACzBymB,EAAmB9hB,QAAQ,gBAAgB,GAC3C6hB,EAAwBniB,KAAK,YAAa,sBAE1C8U,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,IA30BtCwZ,CAAete,KAAMvD,MAExByhB,GAAG,aAAa,SAAUzhB,GA6wBnC,IAA6B2wB,EAhBDC,EAAIC,EAAIC,EAiB5BC,EAEAC,EACAC,EACAC,EAqBiB7oB,EAIjB8oB,EAHJ,IAAKC,EAAWC,EACZC,EACAC,EA8LoBC,EAjMHnpB,EAtyBG9E,KAuyBxB,EAA6Bif,gBAAMna,GAAnC,YAAK+oB,EAAL,KAAgBC,EAAhB,KACIC,GAAmBhgB,EAAOC,KA5BLof,EA6BWS,EAAYE,EA5B5CP,EAAoB1U,EAAOoV,OAAOd,GAElCK,GAAiBU,EADJC,mBAASrI,IAAS/X,MACHka,EAAYsF,EAAmB,GAC3DE,EAAwBxF,EAAWuF,GACnCE,EAAgCzF,EAAWuF,EAAiB,IAwB5DO,EArBAL,GAAiCD,GAxBbL,EA0BhBG,EA1BoBF,EA2BpBI,EA3BwBH,EA4BxBI,EA3Be,WAAnBhE,EACO0D,EAAKC,EAAGzG,KAAO0G,EAAG1G,KAAOwG,EAAKC,EAAKC,EAGvC,IAAI1H,KAAKwH,GAAIjH,UAAY,IAAIP,KAAKyH,EAAGzG,MAAMT,UAC9C,IAAIP,KAAK0H,EAAG1G,MAAMT,UAAY,IAAIP,KAAKwH,GAAIjH,UACzCkH,EACAC,GAuBiBG,KAkBnBE,EAAqB9U,EAAO,IAAI+M,KAAKmI,EAAUnH,OA0L3BoH,EAxLDL,EAyLvBxE,EAAwBniB,KACpB,YADJ,oBAEiBgnB,EAFjB,QA3HJ,SAA6BD,GA7hBzB5E,EAAwB7R,UAAU,qBAAqBgB,SAgiBvD,IACM8V,EADQ3pB,EAAMogB,QACIhI,QAAO,SAACC,EAAKzW,GAGjC,OAFAyW,EAAIzW,EAAKoK,IAAMpK,EAERyW,IACR,IAKGuR,EAAiBN,EAAU/C,OAC5BpnB,KAAI,SAAC4mB,GAAD,MAAY,CACbA,QACAnkB,KAAM+nB,EAAU5D,EAAM/tB,UAEzBwnB,QAAO,sBAAGuG,SACV9N,MACG,SAACnc,EAAGC,GAAJ,OACImZ,EAAepZ,EAAEiqB,MAAM/tB,MAAQkd,EAAenZ,EAAEgqB,MAAM/tB,SAGlEsxB,EAAU/C,OAASqD,EAAezqB,KAAI,qBAAG4mB,SAEzCuD,EAAU/C,OAAOtoB,SAAQ,SAAClG,EAAG8xB,GACzB,IAAIC,EAASpF,EACR9hB,OAAO,KACPC,QAAQ,oBAAoB,GAC5BD,OAAO,UACPC,QAAQ,0BAA0B,GAClCN,KAAK,KAxhCQ,IAyhCbA,KAAK,KAAM,GACXA,KAAK,IAzhCU,GA0hCfrE,MAAM,gBAAgB,kBACnBmnB,EAzhCe,EADH,KA8hCfnnB,MAAM,SAAUgX,EAAend,EAAEC,OACjCkG,MAAM,SAAU,WAChBsb,GAAG,SAAS,YAr7BzB,SAAuB1a,GACdimB,IACDA,EAAkBnB,GACdnP,EAAI1S,OAAO,oBAEfijB,EAAoBlB,GAAqBiB,IAG7C,IAAIgF,EAAShoB,iBAAOjD,GAEpBirB,EACK7rB,MAAM,eAnHwB,GAoH9BA,MAAM,iBAnH0B,IAoHhCqE,KAAK,SAHV,eAG4ByiB,EAH5B,MAKAhB,GAAsB+F,EAAQ5T,EA3HN,GAkiCZ6T,CAAc1uB,MA7D9B,SAA8B8E,EAAGrI,GAC7Bsf,GAAWzf,KAAK,uBAAwBwI,EAAGrI,EAAGwiB,gBAAMna,IA6DxC6pB,CAAqB3uB,KAAMvD,MAE9ByhB,GAAG,YAAY,WAuF5B,IAAsB0Q,IAtFO5uB,KAuFzByG,iBAAOmoB,GAAO3nB,KAAK,SAAU,WApFnB4nB,EAAOP,EAAeC,GAAOjoB,KAE7BU,EAAI8nB,GADAhW,EAAO,IAAI+M,KAAKmI,EAAU/C,OAAOsD,GAAO1H,OACvBgI,EAAMpyB,EAAEC,MAEnC8xB,EAAOvnB,KACH,YADJ,sBA9iCkB,GA8iClB,aAE2CD,EAF3C,UAlHA+nB,CAAoBf,GAEpBjS,GAAWzf,KACP,kBACAwI,EACAkpB,EACApU,EACAgU,EACAE,QAp2BA/D,GA0sBZ,WACI5Q,EAAI1S,OAAO,gBAAgB8Q,UAAU,0BAA0BgB,SAE/D,IAAM8V,EAAY3pB,EAAMogB,QAAQhI,QAAO,SAACC,EAAKzW,GAGzC,OAFAyW,EAAIzW,EAAKoK,IAAMpK,EAERyW,IACR,IAEGiS,EAAY9G,EAAWpL,QAAO,SAAC+N,EAAOmD,GACxC,IAAMiB,EAAkBjB,EAAU/C,OAAOpnB,KAAI,SAAC4mB,GAAD,MAAY,CACrDA,QACAnkB,KAAM+nB,EAAU5D,EAAM/tB,UAK1B,OAFAmuB,EAAQ,GAAH,WAAOA,GAAP,IAAiBoE,MAGvB,IAEiB9V,EACf1S,OAAO,gBACPa,OAAO,KACPC,QAAQ,yBAAyB,GACjCgQ,UAAU,UACVC,KAAKwX,GACLrX,QACArQ,OAAO,UACPC,QAAQ,mBAAmB,GAC3BN,KAAK,IAt0Bc,GAu0BnBrE,MAAM,eAt0Ba,GAu0BnBA,MAAM,UAAU,SAACnG,GAAD,OAAOmd,EAAend,EAAEguB,MAAM/tB,SAC9CkG,MAAM,SAAU,WAChBqE,KAAK,MAAM,SAACxK,GAAD,OAAOqc,EAAO,IAAI+M,KAAKppB,EAAEguB,MAAM5D,UAC1C5f,KAAK,MAAM,SAACxK,GAAD,OACRqyB,GACIhW,EAAO,IAAI+M,KAAKppB,EAAEguB,MAAM5D,OACxBpqB,EAAE6J,KACF7J,EAAEguB,MAAM/tB,SA/uBZwyB,GAoDR/V,EAAI+E,GAAG,aAAa,SAAUzhB,IA01BlC,SAAyBqI,EAAGrI,GACxBsf,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAG0yB,gBAAMrqB,IA11B3CsqB,CAAgBpvB,KAAMvD,UAS9B,SAASkwB,GAAkBtV,GACvBA,EAAUE,UAAU,cAActQ,KAAK,YAAa,oBAQxD,SAAS6kB,GAAkB1uB,GACvB,IAAIiyB,EAYJ,OATIA,EADAhf,GAAUjT,GACCmT,GAEAD,GAGX4J,IACAmV,EAAW1gB,iBAAOuL,IAGfmV,EAASjyB,GAusBpB,SAAS8vB,GAAgBnQ,EAAK8R,GAC1B,OAAO9R,EAAM8R,EAAKS,WAAavS,EAAM8R,EAAKS,WAgM9C,SAASR,GAAc1f,EAAGyf,EAAMnyB,EAAMwD,GAClC,IAAMxC,EAAM,GAAH,OAAMhB,EAAN,YAAc0S,GAEvB,GAAI1R,KAAO6sB,GACP,OAAOA,GAAW7sB,GAGtBwC,EAAQA,GAAS,IAEjB,IAII0uB,EAFAW,EAAc,EACdC,EAAYX,EAAKS,WAGrB,IACIV,EAAQC,EAAKY,kBAAkBD,EAAYD,GAAe,GAC5D,MAAOzqB,GACL8pB,EAAQ,CAAExf,EAAG,EAAGpI,EAAG,GAIvB,IAFA,IAAI0oB,EAAa,EAEVtgB,EAAIwf,EAAMxf,EAAIlP,GAASkP,EAAIwf,EAAMxf,EAAIlP,GAAO,CAC/C,IAAMyvB,GAAYJ,EAAcC,GAAa,EAE7C,IACIZ,EAAQC,EAAKY,iBAAiBE,GAChC,MAAO7qB,GACL8pB,EAAQ,CAAExf,EAAG,EAAGpI,EAAG,GAUvB,GAPIoI,EAAIwf,EAAMxf,EACVogB,EAAYG,EAEZJ,EAAcI,EAzBA,KA4BlBD,GAAc,GAEV,MAMR,OAFAnF,GAAW7sB,GAAOkxB,EAAM5nB,EAEjBujB,GAAW7sB,GA6hBtB,OAtfAjD,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAaftgB,GAAQ4W,qBAAuBA,GAQ/B5W,GAAQ+gB,WAAa,SAAU2D,GAC3B,OAAKla,UAAU/F,QAGfsc,GAAa2D,EAENnf,MAJIwb,IAaf/gB,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,GAAawD,EAENnf,MAJI2b,IAaflhB,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAcfjf,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAcfnf,GAAQwvB,UAAY,SAAU9K,GAC1B,OAAKla,UAAU/F,QAGf+qB,EAAY9K,EACZjO,GAA0B,QAEnBlR,MALIiqB,GAgBfxvB,GAAQqvB,kBAAoB,SAAU3K,GAClC,OAAKla,UAAU/F,QAGf4qB,EAAoB3K,EAEbnf,MAJI8pB,GAgBfrvB,GAAQovB,YAAc,SAAU1K,GAC5B,OAAKla,UAAU/F,QAGf2qB,EAAc1K,EAEPnf,MAJI6pB,GAgBfpvB,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAcfvf,GAAQsjB,KAAO,SAAUoB,GACrB,OAAKla,UAAU/F,QAGf6e,GAAOoB,EAEAnf,MAJI+d,IAgBftjB,GAAQ2vB,qBAAuB,SAAUjL,GACrC,OAAKla,UAAU/F,QAGfkrB,GAAuBjL,EAEhBnf,MAJIoqB,IAaf3vB,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAmBfngB,GAAQkwB,MAAQ,SAAUxL,GACtB,OAAKla,UAAU/F,QAGfmrB,GAAclL,EAEPnf,MAJIqqB,IAef5vB,GAAQuvB,UAAY,SAAU7K,GAC1B,OAAKla,UAAU/F,QAGf8qB,EAAY7K,EAELnf,MAJIgqB,GAafvvB,GAAQm1B,aAAe,SAAUzQ,GAC7B,OAAKla,UAAU/F,QAGfqqB,EAA2BpK,EAEpBnf,MAJIupB,GAaf9uB,GAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAefhf,GAAQoW,OAAS,SAAUsO,GACvB,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAafpW,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAgBftT,GAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAafzf,GAAQsvB,wBAA0B,SAAU5K,GACxC,OAAKla,UAAU/F,QAGf6qB,EAA0B5K,EAEnBnf,MAJI+pB,GAcftvB,GAAQ6uB,iBAAmB,SAAUnK,GACjC,OAAKla,UAAU/F,QAGfoqB,EAAmBnK,EAEZnf,MAJIspB,GAcf7uB,GAAQyvB,WAAa,SAAU/K,GAC3B,OAAKla,UAAU/F,QAGfgrB,GAAa/K,EACbjO,GAA0B,SAEnBlR,MALIkqB,IAefzvB,GAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAcf5gB,GAAQ0vB,kBAAoB,SAAUhL,GAClC,OAAKla,UAAU/F,QAGfirB,GAAoBhL,EAEbnf,MAJImqB,IAaf1vB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,GAASoF,EAEFnf,MAJI+Z,IAaftf,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAcflN,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IAYpD5N,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAY5C3C,GAAQkvB,eAAiB,SAAUxK,GAC/B,OAAKla,UAAU/F,QAGfyqB,EAAiBxK,EAEVnf,MAJI2pB,GAgBflvB,GAAQmvB,WAAa,SAAUzK,GAC3B,OAAKla,UAAU/F,QAGf0qB,EAAazK,EAENnf,MAJI4pB,GAORnvB,GCryDI,SAASC,KACpB,IAYIm1B,EAOAC,EACAC,EACAC,EAQAC,EAMAC,EAMA7Q,EAkBAxO,EAIAsI,EA/DApL,EACS,EADTA,EAEW,EAFXA,EAGY,EAHZA,EAIU,EAIV1F,EAAQ,gBACR8nB,GAAwB,EAIxBC,EAAgB,CACZppB,GAAI,GACJoI,EAAG,GAQPihB,EAAgB,GAIhBC,EAAU,EACVC,EAAU,GAIVC,EAA+B,EAO/B3V,EAAOC,gBAMPmP,EAAY,OACZ5O,EAAa,QACbC,EAAY,OACZ4O,EAAa,SACbuG,EAAsBpf,GAAqBG,UAC3CmY,EAAiB,OACjB+G,EAAa,KACbC,EAAmB,KACnBC,EAAc,GAEd1W,EAAe,KACf2W,EAAiB,KACjBC,EAAqB/J,sBAAW,aAChCgK,EAAqBhK,sBAAW,gBAapC,SAAStsB,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GAlElB,IAmEiBzO,EAAcA,EAlE9B,GAmEkBA,EAAaA,EAC7ByO,EAyBf,SAAkB/E,GACT0B,KACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,KACPC,QAAQ,iCAAiC,GACzC3E,MAAM,aAAc,WAjBxB0E,OAAO,KACPC,QAAQ,0CAA0C,GAClDN,KAAK,YAHQ,qBAGmB8G,EAHnB,aAGmCA,EAHnC,MAKRzG,OAAO,KAAKC,QAAQ,iBAAiB,GA0C/CuoB,EAAuB3W,EAClB5B,UAAU,kBACVjQ,OAAO,KACPC,QAAQ,gBAAgB,GAE7BsoB,EAAoBC,EACfxoB,OAAO,QACPC,QAAQ,sBAAsB,GAC9BN,KAAK,KAVS,MAWdA,KAAK,IAAK,GACVA,KAAK,QA1HK,KA2HVA,KAAK,SAAUopB,GACfppB,KAAK,KA1HY,GA2HjBA,KAAK,KA3HY,GA6HtB+oB,EAAeF,EACVxoB,OAAO,QACPC,QAAQ,iBAAiB,GACzBN,KAAK,IAAK+pB,KACV/pB,KAAK,KAAM,OACXA,KAAK,IAAKgqB,IACVruB,MAAM,OAjHM,WAmHjBmtB,EAAcD,EACTxoB,OAAO,KACPC,QAAQ,gBAAgB,GACxB3E,MAAM,OArHK,WAgZVsuB,EAAmBC,EAAgBtL,KAAKuL,QACxCC,EAAgCjpB,EAClC8oB,EACA,GA5aoB,MAgbY,IAChCV,EACI,IAAMa,EAAgC,KAjUlD,IAwTUH,EACAG,EA9UNlY,EAAIb,aAAarR,KAAK,QAxGd,KAwG8BA,KAAK,SAvGlC,IA0GTxM,EAAQ62B,OApCJpU,CAASld,SAmJjB,SAASuxB,EAAa/Z,GAClB,IAAIpa,EAAQoa,EAAK6D,GASjB,OANI7D,EAAKga,aACO,IA1DpB,SAA2Bp0B,GACvB,GAAuB,OAAnByzB,EACA,OAAOA,EAAezzB,GAG1B,IAAIq0B,EAAuBnhB,GAE3B,OAAKlT,GAGgB,OAAjB8c,EACAuX,EAAuB9iB,iBAAOuL,GACvB7J,GAAUjT,KACjBq0B,EAAuBlhB,IAGpBkhB,EAAqBr0B,IARjB,EAoDK0uB,CAAkB1uB,GAAOmC,WAuB7C,SAASmyB,EAAmBjH,GACxB,IACIkH,EACAC,EACAC,EACAC,EAJAp1B,EAAO+tB,EAAMnP,GAMjBsW,EAAkBnH,EAAMM,WAAaruB,EACrCm1B,EAAmBN,EAAa9G,GAEhCqH,EAAc/B,EACTzoB,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM,OACXA,KAAK,IAAKqpB,GACVrpB,KAAK,IAAKspB,GACV3tB,MAAM,OAlOQ,WAmOd4D,KAAKorB,GACLt1B,KAAKy1B,EA/Pc,KAgBM,IAiP9BJ,EAAe5B,EACVzoB,OAAO,QACPC,QAAQ,sBAAsB,GAC9BN,KAAK,KAAM,OACXA,KAAK,IAAKqpB,GACVrpB,KAAK,IAAKspB,GACV3tB,MAAM,OA5OQ,WA6Od4D,KAAKqrB,GAKV5B,EAAa6B,EAAYxrB,OAAO0rB,UAAUrmB,OACpCmmB,EAAYxrB,OAAO0rB,UAAUrmB,OAC7BskB,EAENI,GAAiBJ,EAhQQ,EAmQzBC,EAAoByB,EAAarrB,OAAO0rB,UAAUrqB,MAC5CgqB,EAAarrB,OAAO0rB,UAAUrqB,MAC9BuoB,EACNyB,EAAa1qB,KACT,IAnRW,IAoRIipB,EAAoB,GAAK+B,MAG5ClC,EACKzoB,OAAO,UACPC,QAAQ,kBAAkB,GAC1BN,KAAK,MAAM,MACXA,KAAK,KAAMspB,EAzQA,GA0QXtpB,KAAK,IAxRa,GAyRlBrE,MAAM,OAAQyc,EAAS3iB,IACvBkG,MAAM,eAAgB,GAE3B2tB,GAAWN,EAAa,EAY5B,SAASiC,EAAsBrE,EAAWC,GACtC,IA9HJ,EAA8C,EAAjBV,EA8HzB,GA9HJ,EA8HkD,CAACS,EAAWC,GA9HhB,YAAjBV,EAAiB,UAmBnC,CAfHA,EAnLW,IAmLa,EAEb6E,IAGC,IAID7B,EAAcppB,IAiH7B,YAAKmrB,EAAL,KAAeC,EAAf,KAEAjZ,EAAIb,aACCmG,SAhSY,KAiSZ5D,KAAKA,GACLjY,MAAM,UAAW,GAEtBitB,EACK5oB,KAAK,QArTK,KAsTVA,KAAK,SAAUopB,GAEpBlX,EAAI5B,UAAU,kBACTe,aACAmG,SA3SgB,KA4ShB5D,KAAKA,GACL5T,KAAK,YAJV,oBAIoCkrB,EAJpC,aAIiDC,EAJjD,MAaJ,SAASC,EAAU30B,GACf,MAAuB,WAAnBisB,EACOZ,OAAOrrB,GAYtB,SAAoBmpB,GAChB,IAAIW,EAAWkJ,GAAcD,EACzB9hB,EAAS,KACT2jB,EAAgB,CAAE9M,MAAO,QAASF,IAAK,WAGvCkC,IAAanW,GAAqBG,WAClCgW,IAAanW,GAAqBI,YAElC9C,EAASmiB,EACTwB,EAAc7M,KAAO,WAErB+B,IAAanW,GAAqBE,UAClCiW,IAAanW,GAAqBC,aAElC3C,EAASoiB,EACTuB,EAAcjN,KAAO,WAErBmC,IAAanW,GAAqBK,QACN,iBAArBif,IAEPhiB,EAASoY,sBAAW4J,IAGxB,GACI9f,GACgB,oBAAT8V,MACS,YAAhB,oBAAOA,KAAP,gBAAOA,QACPA,KAAKC,eACP,CAGE,OAFQD,KAAKC,eAAe/V,EAAQyhB,GAE3B3jB,OAAOkY,GAGpB,OAAOlY,EAAOkY,GA5CP0L,CAAW,IAAI1M,KAAKnoB,IAmD/B,SAASszB,IACL,OAAO,KAuEX,SAASG,EAAgBtK,GACrB,IAAI2L,EAAYnqB,EACZoqB,EAAgBJ,EAAUxL,GAU9B,OARI2L,EAAUtzB,OACNixB,IACAqC,EAAY,GAAH,OAAMA,EAAN,cAAqBC,IAGlCD,EAAYC,EAGTD,EA+BX,SAAST,EAASvrB,EAAMmB,GAAiB,IAAVC,EAAU,uDAAH,EAClCpB,EAAKsB,MAAK,WACN,IAAIpB,EAAOH,EAAMM,EAAMC,EAAwBE,EAAGE,EAAIG,EAiBtD,IAbAX,GAFAF,EAAOC,iBAAOzG,OAEDwG,OAAOG,MAAM,OAAOC,UACjCC,EAAO,GACPC,EAAa,EACA,IACbE,EAAIR,EAAKS,KAAK,KACdC,EAAKC,WAAWX,EAAKS,KAAK,OAC1BI,EAAQb,EACHA,KAAK,MACLc,OAAO,SACPL,KAAK,IAAKW,GACVX,KAAK,IAAKD,GACVC,KAAK,KAAMC,EAAK,MAEbX,EAAOG,EAAMc,OAAQ,CACzBX,EAAKhB,KAAKU,GACVc,EAAMb,KAAKK,EAAK1B,KAAK,MAGH4C,EACdlB,EAAK1B,KAAK,KACV,GACA,qBAGYwC,IACZd,EAAKW,MACLH,EAAMb,KAAKK,EAAK1B,KAAK,MAEjB2B,EAAa4rB,IACb7rB,EAAO,CAACN,GACRc,EAAQb,EACHc,OAAO,SACPL,KAAK,IAAKW,GACVX,KAAK,IAAKD,GACVC,KAAK,KA/BT,MA+BiBH,EAA0BI,EAAK,MAC5CV,KAAKD,SAa9B,SAASosB,EAAc3E,GACnB,IAAI/C,EAAS+C,EAAU9D,GAGnB0G,EAAY1xB,OACZ+rB,EAnKR,SAA4BA,GAA6B,IAArBrT,EAAqB,uDAAbgZ,EACxC,OAAOhZ,EAAM/T,KACT,SAAC+uB,GAAD,OAAe3H,EAAO/G,QAAO,qBAAGxnB,OAAoBk2B,KAAW,MAiKtDC,CAAmB5H,GACrBA,EAAO/rB,QAAU+rB,EAAO,GAAGvuB,OAClCuuB,EAzJR,SAAsBA,GAClB,OAAOA,EACFpnB,KAAI,SAACpH,GAAD,OAAOA,KACXkgB,MAAK,SAACnc,EAAGC,GACN,OAAID,EAAE9D,KAAO+D,EAAE/D,KAAa,EACxB8D,EAAE9D,OAAS+D,EAAE/D,KAAa,GAEtB,KAkJHo2B,CAAa7H,IAzc1B8E,EAAYxY,UAAU,QAAQgB,SAC9BwX,EAAYxY,UAAU,UAAUgB,SAmVpC,SAAqByV,GACjB,IAAMwE,EAAYrB,EAAgBnD,EAAU/D,IAE5C+F,EACKxpB,KAAKgsB,GACLl2B,KAAKy1B,EAjcc,KAkYjB,MAmLPgB,CAAY/E,GArVZqC,EACI,GAAKG,EA1Ne,GA2NxBD,EArN8B,GAqNUC,EACxCF,EAAU,EAoVVrF,EAAOtoB,QAAQ+uB,GAYnB,SAASsB,EAAchF,EAAWH,EAAWC,GACzC6E,EAAc3E,GACdkE,EAAsBrE,EAAWC,GAqRrC,OA3QArzB,EAAQ4W,qBAAuBA,GAQ/B5W,EAAQi2B,WAAa,SAAUvR,GAC3B,OAAKla,UAAU/F,QAGfwxB,EAAavR,EAENnf,MAJI0wB,GAAcD,GAe7Bh2B,EAAQk2B,iBAAmB,SAAUxR,GACjC,OAAKla,UAAU/F,QAGfyxB,EAAmBxR,EAEZnf,MAJI2wB,GAcfl2B,EAAQwvB,UAAY,SAAU9K,GAC1B,OAAKla,UAAU/F,QAGf+qB,EAAY9K,EACZjO,GAA0B,QAEnBlR,MALIiqB,GAafxvB,EAAQ62B,KAAO,WAGX,OA5KAnY,EAAIvW,MAAM,aAAc,UA4KjB5C,MASXvF,EAAQoW,OAAS,SAAUsO,GACvB,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAcfpW,EAAQ6gB,UAAY,SAAU6D,GAC1B,OAAKla,UAAU/F,QAGfoc,EAAY6D,EACZjO,GAA0B,QAEnBlR,MALIsb,GAcf7gB,EAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAefzf,EAAQo2B,eAAiB,SAAU1R,GAC/B,OAAKla,UAAU/F,QAGf2xB,EAAiB1R,EAEVnf,MAJI6wB,GAafp2B,EAAQ01B,sBAAwB,SAAUhR,GACtC,OAAKla,UAAU/F,QAGfixB,EAAwBhR,EAEjBnf,MAJImwB,GAYf11B,EAAQw4B,KAAO,WAGX,OA7PA9Z,EAAIvW,MAAM,aAAc,WAAWA,MAAM,UAAW,GA6P7C5C,MASXvF,EAAQ4N,MAAQ,SAAU8W,GACtB,OAAKla,UAAU/F,QAGfmJ,EAAQ8W,EAEDnf,MAJIqI,GAaf5N,EAAQ21B,cAAgB,SAAUjR,GAC9B,OAAKla,UAAU/F,QAGfkxB,EAAgBjR,EAETnf,MAJIowB,GAaf31B,EAAQm2B,YAAc,SAAUzR,GAC5B,OAAKla,UAAU/F,QAGf0xB,EAAczR,EAEPnf,MAJI4wB,GAcfn2B,EAAQyvB,WAAa,SAAU/K,GAC3B,OAAKla,UAAU/F,QAGfgrB,EAAa/K,EACbjO,GAA0B,SAEnBlR,MALIkqB,GAgBfzvB,EAAQy4B,OAAS,SACblF,EACAmF,EACAtF,GAEF,IADEC,EACF,uDADc,KAKZ,OAHAzO,EAAW8T,EACXH,EAAchF,EAAWH,EAAWC,GAE7B9tB,MAUXvF,EAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAef5gB,EAAQkvB,eAAiB,SAAUxK,GAC/B,OAAKla,UAAU/F,QAGfyqB,EAAiBxK,EAEVnf,MAJI2pB,GAORlvB,ECz3BI,SAASC,KACpB,IAiBIm1B,EAEAC,EAoBAlX,EACAC,EACAM,EAzCApL,EACS,GADTA,EAEW,GAFXA,EAGY,GAHZA,EAIU,GAKV1F,EAAQ,GAERgT,EAAa,QACbC,EAAY,OAGZT,EAAOC,gBAKPsV,EACO,EADPA,EAEO,GAePlW,EArEc,MAsEd2W,EAAiB,SAACzzB,GAAD,OAAWuR,iBAAOuL,EAAPvL,CAAqBvR,IAUrD,SAAS3C,EAAQ8hB,GACbA,EAAWzU,MAAK,WACZ8Q,EA5CI,IA4CiB7K,EAAcA,EACnC8K,EA5CK,IA4CkB9K,EAAaA,EA0B5C,SAAkB0J,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,KACPC,QAAQ,sCAAsC,IAhBlDD,OAAO,KACPC,QAAQ,2BAA2B,GACnCN,KAAK,YAHM,qBAGqB8G,EAHrB,aAGqCA,EAHrC,MAKNzG,OAAO,KAAKC,QAAQ,iBAAiB,GAgB/C4R,EAAIb,aAAarR,KAAK,QA/Ed,KA+E8BA,KAAK,SA9ElC,KAiFTxM,EAAQ62B,OAnCJpU,CAASld,MA4Cb8vB,EAAuB3W,EAClB5B,UAAU,kBACVjQ,OAAO,KACPC,QAAQ,+BAA+B,GAE5CsoB,EAAoBC,EACfxoB,OAAO,QACPC,QAAQ,sBAAsB,GAC9BN,KAAK,QAnGF,KAoGHA,KAAK,SAnGD,KAoGJA,KAAK,KAzFe,GA0FpBA,KAAK,KA1Fe,GA2FpBA,KAAK,KAAM8G,GACX9G,KAAK,KAAM8G,GACXnL,MAAM,iBAAkB,WASjC,SAASwwB,IAA2B,2BAAPC,EAAO,yBAAPA,EAAO,gBAChC,IAAIC,EAAYD,EACXnP,QAAO,SAAC9U,GAAD,QAASA,KAChBvL,KAAI,SAACuL,GAAD,OAAOA,EAAE9I,OAAO0rB,UAAUrqB,SAEnC,OAAOkI,cAAIyjB,GAYf,SAASC,EAAT,KAGE,gBAFGnG,EAEH,KAFWoG,EAEX,iBADGC,EACH,KADqBC,EACrB,KAeE,MAAO,CAUX,SAAiCD,EAAkBE,GAC/C,OACIF,EACI1lB,EACAA,EACA6K,EACA+a,EACJ,EA7BAC,CAAwBH,EAAkBrG,GAC/BA,EAASgD,EAEThD,EAASxU,EAAawX,EAAkBriB,EAqC3D,SAA+B2lB,EAAmBG,GAC9C,OACIH,EACI3lB,EACAA,EACA8K,EACAgb,EACJ,EAzCAC,CAAsBJ,EAAmBF,GAC9BA,EAASpD,EAEToD,EAAS3a,EAAcuX,EAAkBriB,GAoE5D,SAAS4kB,IAA8B,IAO/BoB,EACAC,EACAhE,EATehC,EAAgB,uDAAJ,GAC3B5wB,EAAQ4wB,EAAU3S,IAAe,GACjC3e,EAAOsxB,EAAU1S,IAAc,GAC/BqI,EAAasQ,GACbC,EAAkBC,MAClBC,EAAY,MACZC,EAAiB,EAKrBvE,EAAqBvY,UAAU,QAAQgB,SAEnClQ,IACA2nB,EAAeF,EACVxoB,OAAO,QACPC,QAAQ,sBAAsB,GAC9BN,KAAK,KAAMmtB,GACXntB,KAAK,IAAK,GACVrE,MAAM,OA/ME,WAgNRA,MAAM,YAvNJ,IAwNF4D,KAAK6B,GAEVgsB,EAAiB1Q,EAAa0Q,GAG9B33B,IACAs3B,EAAclE,EACTxoB,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAMmtB,GACXntB,KAAK,IAAKotB,GAAkB,GAC5BzxB,MAAM,OA3NK,WA4NXA,MAAM,YApOJ,IAqOF4D,KAAK9J,GAEV23B,EAAiB1Q,EAAa0Q,GAG9BrL,GAAU5rB,KACV22B,EAAejE,EACVxoB,OAAO,QACPC,QAAQ,sBAAsB,GAC9BN,KAAK,KAAMmtB,GACXntB,KAAK,IAAKotB,GAAkB,GAC5BzxB,MAAM,OAvOM,WAwOZA,MAAM,YA/OC,IAgPPA,MAAM,cAxOG,KAyOT4D,KAAKqqB,EAAezzB,IAEzBi3B,EAAiBH,EAAkBG,GAGvCzb,EAAawa,EAAiBY,EAAahE,EAAc+D,GACzDlb,EAAcwb,EAmClB,SAASrB,EAAchF,EAAWntB,EAAUyzB,GA1B5C,IACI,IAAKnC,EAAUC,EA0BfO,EAAc3E,GA1Bd,EAA2BuF,EA2BL1yB,EAAUyzB,GA3BhC,YAAKnC,EAAL,KAAeC,EAAf,KAKAjZ,EAAIb,aACCmG,SApRY,KAqRZ5D,KAAKA,GACLjY,MAAM,UAAW,GACjBqE,KAAK,SAAU4R,EAAc9K,EAAaA,GAC1C9G,KAAK,QAAS2R,EAAa7K,EAAcA,GACzC9G,KAAK,YANV,oBAMoCkrB,EANpC,YAMgDC,EANhD,MAQAvC,EACK5oB,KAAK,SAAU4R,EAAc9K,EAAaA,GAC1C9G,KAAK,QAAS2R,EAAa7K,EAAcA,GAoIlD,OAhHAtT,EAAQ62B,KAAO,WAGX,OA1HAnY,EAAIvW,MAAM,aAAc,UA0HjB5C,MAUXvF,EAAQ6gB,UAAY,SAAU6D,GAC1B,OAAKla,UAAU/F,QAGfoc,EAAY6D,EACZjO,GAA0B,QAEnBlR,MALIsb,GAcf7gB,EAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAgBfzf,EAAQo2B,eAAiB,SAAU1R,GAC/B,OAAKla,UAAU/F,QAGf2xB,EAAiB1R,EAEVnf,MAJI6wB,GAYfp2B,EAAQw4B,KAAO,WAGX,OA7KAN,IACAxZ,EAAIvW,MAAM,aAAc,WAAWA,MAAM,UAAW,GA4K7C5C,MASXvF,EAAQ4N,MAAQ,SAAU8W,GACtB,OAAKla,UAAU/F,QAGfmJ,EAAQ8W,EAEDnf,MAJIqI,GAcf5N,EAAQy4B,OAAS,SAAUlF,EAAWuG,EAAeD,GAGjD,OAFAtB,EAAchF,EAAWuG,EAAeD,GAEjCt0B,MAUXvF,EAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAQR5gB,E,qkBC1cX,IAAM+5B,GAA2B,CAC7B,YAAa,OACb,cAAe,aACf,aAAc,SACd,cAAe,GA2CJ,SAAS95B,KACpB,IASIoe,EACAC,EAEA0b,EAIAC,EAEAC,EAEAxb,EACAP,EACAC,EACArB,EAKAod,EACAC,EACAC,EACAC,EACAC,EAhCAjnB,EAAS,CACLC,KAAM,EACNuL,MAAO,EACPD,IAAK,EACLE,OAAQ,GAEZ7R,EAAQ,IACRgE,EAAS,GACT8N,GAAY,EAGZwb,EAAe,CAAC,UAAW,WAE3BC,EAAiB1kB,GAAS,2BAE1Bof,EAAejW,EAAYvQ,eAAeC,UAE1CmgB,EAAiBhZ,GAAS,2BAE1B2kB,EAAgB3kB,GAAS,eAMzBoK,GAAa,EACbwa,EAAepjB,GACf6I,EAAOC,gBAMPua,EAAiBb,GAEjBnZ,EAAa,QACb4O,EAAY,OAEZlE,EAAU,SAAC,GAAD,SAAGc,MACb3K,EAAW,SAAC,GAAD,SAAG9e,OASlB,SAAS3C,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GACtB5D,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EAAiBgF,EAmFDM,QAAO,SAACC,EAAKtgB,GAI7B,OAHAA,EAAEoqB,KAAO,IAAIhB,KAAKppB,EAAEwtB,IACpBxtB,EAAEW,OAASX,EAAE4e,GAEb,cAAW0B,GAAX,CAAgBtgB,MACjB,IA5BP,SAAkBgb,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,wBAAwB,GApC7C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,cAAc,GAC5CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GA4B5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAtEhBuR,CAASld,MACLyZ,EAqORN,EAAI1S,OAAO,wBAAwBoF,KAAKyC,IAxIxC6K,EAAI1S,OAAO,4BAA4B8R,SAlDvCO,EAAStD,wBACJwB,OAAOse,iBAAO9d,EAAMuO,IACpB5P,MAAM,CAAC,EAAGyC,IAEfG,EAASvD,wBACJwB,OAAOse,iBAAO9d,EAAM0E,IACpB/F,MAAM,CAAC0C,EAAa,IAmD7B,WACI,IAAI0c,EAAgBpc,EAAI1S,OAAO,oBAE3BguB,GAAkBC,KAClBvb,EAAI5B,UAAJ,WAAkB2d,IAAkB3c,SACpCY,EAAI5B,UAAJ,WAAkBiS,IAAkBjR,UAGxCkc,EAAiBc,EACZjuB,OAAO,kBACPL,KAAK,KAAMiuB,GACXjuB,KAAK,QAAS,iBACdA,KAAK,gBAAiB,kBACtBA,KAAK,KAAM,GACXA,KAAK,KAAM6R,EAAOtB,EAAKA,EAAKtY,OAAS,GAAG2nB,OACxC5f,KAAK,KAAM,GACXA,KAAK,KAAM,GACXsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAO8Z,EAAa,IACpC,CAAEpf,OAAQ,OAAQsF,MAAO8Z,EAAa,MAEzCtd,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,SAE3BuZ,EAAiBa,EACZjuB,OAAO,kBACPL,KAAK,KAAMuiB,GACXviB,KAAK,QAAS,iBACdA,KAAK,gBAAiB,kBACtBA,KAAK,KAAM,GACXA,KAAK,KAAM6R,EAAOtB,EAAKA,EAAKtY,OAAS,GAAG2nB,OACxC5f,KAAK,KAAM,GACXA,KAAK,KAAM,GACXsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAOyU,EAAa,IACpC,CAAE/Z,OAAQ,OAAQsF,MAAOyU,EAAa,MAEzCjY,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,SAzIvBqa,GAkJR,WACQb,GACAxb,EAAI5B,UAAJ,WAAkB4d,IAAiB5c,SAGnCqC,IACA+Z,EAAcxb,EACT1S,OAAO,mBACPa,OAAO,YACPL,KAAK,KAAMkuB,GACXluB,KAAK,QAAS,aACdK,OAAO,QACPL,KAAK,QAAS,GACdA,KAAK,SAAU0E,GAEpBlF,iBAAO,IAAD,OAAK0uB,EAAL,UACD7c,aACAuC,KAAKA,GACL4D,SAAS2W,GACTnuB,KAAK,QAASU,IApKnB8tB,GA4KR,WACQZ,GACA1b,EAAI5B,UAAU,mBAAmBgB,SAGrCsc,EAAYa,kBACPtmB,GAAE,gBAAGyX,EAAH,EAAGA,KAAH,OAAc/N,EAAO+N,MACvB8O,IAAG,kBAAM5c,EAAO,GAAK6c,KACrB7lB,IAAG,gBAAG3S,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MACzB2vB,MAAM1a,eAEX8G,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMre,GACNvQ,KAAK,QAAS,kBACdA,KAAK,OAJV,eAI0BiuB,EAJ1B,MAKKjuB,KAAK,IAAK4tB,GACV5tB,KAAK,YANV,eAM+BkuB,EAN/B,MAtLIW,GAmMR,WACQlB,GACAzb,EAAI5B,UAAU,SAASgB,SAG3Bqc,EAAU/tB,kBACLkmB,MAAM1a,eACNjD,GAAE,gBAAGyX,EAAH,EAAGA,KAAH,OAAc/N,EAAO+N,MACvB7f,GAAE,gBAAG5J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAE7B+b,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMre,GACNvQ,KAAK,QAAS,QACdA,KAAK,SAJV,eAI4BuiB,EAJ5B,MAKKviB,KAAK,IAAK2tB,GACV3tB,KAAK,YANV,eAM+BkuB,EAN/B,MAOKluB,KAAK,OAAQ,QAnNd8uB,GA0QR,WACQjB,GACA3b,EAAI5B,UAAU,qBAAqBgB,SAGvCuc,EAAS3b,EACJ5B,UAAU,gBACVjQ,OAAO,UACPL,KAAK,QAAS,oBACdA,KAAK,KAAM6R,EAAOtB,EAAKA,EAAKtY,OAAS,GAAG2nB,OACxC5f,KAAK,KAAM8R,EAAOvB,EAAKA,EAAKtY,OAAS,GAAG9B,QACxC6J,KAAK,IApTG,KAgCT+uB,GAEIhB,GAgOZ,WACQD,GACA5b,EAAI5B,UAAU,mBAAmBgB,SAGrCwc,EAAU5b,EACL5B,UAAU,eACVjQ,OAAO,QACPL,KAAK,IAAK2R,EAAa,GACvB3R,KAAK,IAAK4R,EAAc,GACxB5R,KAAK,cAAe,UACpBA,KAAK,QAAS,kBACdrE,MACG,YACAyyB,EAAe,cACXb,GAAyB,cAEhC5xB,MAAM,OAAQyyB,EAAc,MAAYzF,EAAa,IACrDhtB,MACG,cACAyyB,EAAe,gBACXb,GAAyB,gBAEhC5xB,MACG,cACAyyB,EAAe,gBACXb,GAAyB,gBAEhC5xB,MACG,aACAyyB,EAAe,eACXb,GAAyB,eAEhChuB,KAAKwuB,GAhQFiB,OAwfZ,OA7NAx7B,EAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGfk2B,EAAejW,EAERnf,MAJIo1B,GAaf36B,EAAQw6B,aAAe,SAAU9V,GAC7B,OAAKla,UAAU/F,QAGf+1B,EAAe9V,EAERnf,MAJIi1B,GAcfx6B,EAAQwvB,UAAY,SAAU9K,GAC1B,OAAKla,UAAU/F,QAGf+qB,EAAY9K,EACZjO,GAA0B,QAEnBlR,MALIiqB,GAefxvB,EAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,EAAS0e,EAAKhO,EAAU9C,IASpD5N,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAeflR,EAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAafngB,EAAQm1B,aAAe,SAAUzQ,GAC7B,OAAKla,UAAU/F,QAGf0wB,EAAezQ,EAERnf,MAJI4vB,GAafn1B,EAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,EAAQu6B,UAAY,SAAU7V,GAC1B,OAAKla,UAAU/F,QAGf81B,EAAY7V,EAELnf,MAJIg1B,GAuCfv6B,EAAQ46B,eAAiB,SAAUlW,GAC/B,OAAKla,UAAU/F,QAGfm2B,EAAiBlW,EAEVnf,MAJIq1B,GAcf56B,EAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAcf5gB,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAORlN,E,qkBC5lBX,IAAMy7B,GAAO,SAACC,GAAD,OACTA,EAAOjS,QAAO,SAAClhB,EAAMozB,EAAK13B,GAAZ,OAAoBA,EAAIyC,QAAQ6B,KAAUozB,MA2C7C,SAAS17B,KACpB,IASIoe,EACAG,EACAgQ,EACAlQ,EACAG,EAOAyC,EACAD,EAgBA9D,EACAgZ,EAIA/f,EAGAwlB,EACAC,EACAC,EACAC,EACAC,EASAtN,EAEAC,EACAC,EACAqN,EASAvd,EACAP,EACAC,EACArB,EACA0Q,EACAyO,EACAC,EA7EA7oB,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EAOZkQ,EAAiB,OACjBC,EAAa,SACb7P,EAAS,EAET8c,EAAgB,EAGhBjb,GAAoB,GAGpBlC,EAAcC,EAAYnR,aAAaC,YACvCmnB,EAAejW,EAAYvQ,eAAeC,UAC1CuQ,EAAiB,KACjB6P,EAAkB,KAClBC,EAAoB,KAOpBoN,EAAc,IAGdjN,EAAc,KACd7P,EAAS,KACT8P,GAAoB,KAGpBiN,GAAY,YASZC,GAAsB7gB,gBADG,GAGrB8gB,IAHqB,IAezBrc,IAAa,EACbC,GAAOC,gBACPoc,GAAwBllB,GACxBmlB,IAAa,EAQbpZ,GAAO,KACPuL,GAAmB,IACnB9O,GAEU,GAFVA,GAGY,EAGZyP,GAAY,OACZ5O,GAAa,QACb+b,GAAW,OACX1W,GAAkB,CACd2W,QAAS,IAAIxR,MAAK,IAAIA,MAAOC,SAAQ,IAAID,MAAOE,UAAY,KAC5DuR,QAAS,IAAIzR,KACb0F,KAAM,EACND,KAAM,KAEViM,IAAkB,EAElBtb,GAAU,SAAC,GAAD,SAAGvf,MACbqpB,GAAU,SAAC,GAAD,SAAGc,MAEb9K,GAAaC,mBACT,kBACA,iBACA,kBACA,uBACA,mBASR,SAASvhB,GAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GA8X9B,IACUgb,EAIAC,EAyBS5a,EA+fX7W,EACA0xB,EA9jBEnM,GACAD,IA9VF1S,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,GA0ZJqF,EAC4B,KAFbA,EAzZML,GA2ZJtd,QA/BXs4B,EAAUxR,GACZtF,GAAgB2W,QAChB3W,GAAgB4W,SAEdG,EAAar4B,MAAM2X,MAAM,KAAM3X,MAAMo4B,IAE3CD,IAAkB,EAElB,cACOE,EAAW5zB,KAAI,SAACL,EAAIrH,GAAL,wBACb8tB,GAAYvE,GAAQhF,GAAgB2W,QAASl7B,IADhC,MAEbkf,GAAa,GAFA,MAGb+b,GAAW,KAHE,MADtB,IAMOK,EAAW5zB,KAAI,SAACL,EAAIrH,GAAL,wBACb8tB,GAAYvE,GAAQhF,GAAgB2W,QAASl7B,IADhC,MAEbkf,GAAa,GAFA,MAGb+b,GAAW,KAHE,QAiB6Bva,GAE/BC,QAAO,SAACC,EAAKtgB,GAI7B,OAHCA,EAAEoqB,KAAOgC,GAAgBpsB,EAAEwtB,IAAYN,GACnCltB,EAAEW,OAASX,EAAE4e,IAElB,cAAW0B,GAAX,CAAgBtgB,MACjB,IAjaCyrB,EA62BR,SAAuB1Q,GACnB,OAAOwT,kBACFttB,IAAIqoB,IACJhD,QAAQvL,EAAKmF,MAAK,SAACnc,EAAGC,GAAJ,OAAUD,EAAEqmB,KAAOpmB,EAAEomB,SACvChjB,KAAI,SAACpH,GACF,OAAOI,OAAO86B,OAAO,GAAIl7B,EAAG,CACxBoqB,KAAMgC,GAAgBpsB,EAAEiB,IAAKisB,QAn3BxBiO,CAAcpgB,GAuWnC,SAAkBC,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,2BAA2B,GAtMhD,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EACKF,UAAU,iBACVjQ,OAAO,KACPC,QAAQ,cAAc,GAC3BkQ,EAAUnQ,OAAO,KAAKC,QAAQ,qBAAqB,GACnDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,gBAAgB,GAC9CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAmL5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAjXhBuR,CAASld,MACLyZ,GA8rBRN,EAAI1S,OAAO,wBAAwBoF,KAAKwC,IAxRxC8K,EAAI1S,OAAO,4BAA4B8R,SAvO3C,WACIoe,EAAsBzO,EACjBrkB,KAAI,SAACpH,GAAD,OAAOI,OAAO86B,OAAO,GAAIl7B,EAAGA,EAAEka,WAClC9S,KAAI,SAACpH,GASF,OARAI,OAAOmJ,KAAKvJ,GAAGkG,SAAQ,SAACyU,GACpB,IAAMygB,EAAQp7B,EAAE2a,GAEZygB,GAASA,EAAMn7B,OACfD,EAAEo7B,EAAMn7B,MAAQm7B,EAAMz6B,UAIvBP,OAAO86B,OAAO,GAAIl7B,EAAG,CACxBoqB,KAAMgC,GAAgBpsB,EAAC,IAASktB,QAI5CiN,EAAmB1O,EACdrkB,KAAI,SAACpH,GAAD,OAAOI,OAAO86B,OAAO,GAAIl7B,EAAGA,EAAEka,WAClC9S,KAAI,SAACpH,GASF,OARAI,OAAOmJ,KAAKvJ,GAAGkG,SAAQ,SAACyU,GACpB,IAAMygB,EAAQp7B,EAAE2a,GAEZygB,GAASA,EAAMn7B,OACfD,EAAEo7B,EAAMn7B,MAAQ,MAIjBG,OAAO86B,OAAO,GAAIl7B,EAAG,CACxBoqB,KAAMgC,GAAgBpsB,EAAC,IAASktB,QAI5C,IAAImO,EAAsB5B,GAAK1e,EAAK3T,IAAIoY,KAAUa,QAC9C,SAAC8E,EAAMlkB,GAAP,OAAeb,OAAO86B,OAAO,GAAI/V,EAAlB,OAA2BlkB,EAAM,MAChD,IAGAq6B,EAASvgB,EAAKsF,QACd,SAAC8E,EAAMC,GAAP,OACIhlB,OAAO86B,OAAO,GAAI/V,EAAlB,OACKC,EAAKnlB,KAAQklB,EAAKC,EAAKnlB,OAASmlB,EAAKzkB,UAE9C06B,GAGJlgB,EAAQgZ,GA0CZ,SAAqBmH,GACjB,IAAIngB,EAAQ/a,OAAOmJ,KAAK+xB,GAAQpb,MAAK,SAACnc,EAAGC,GACrC,OAAIs3B,EAAOv3B,GAAKu3B,EAAOt3B,IAAY,EAC/Bs3B,EAAOv3B,KAAOu3B,EAAOt3B,GAAW,EAE7B,KAGPu3B,EAAapgB,EAAMzW,QAAQ,SAE/B,GAAI62B,GAAc,EAAG,CACjB,IAAIC,EAAQrgB,EAAMsgB,OAAOF,EAAY,GAErCpgB,EAAQA,EAAMugB,OAAOF,GAGzB,OAAOrgB,EA1DgBwgB,CAAYL,GAEnC,IAAIM,EAASC,mBACRtyB,KAAK4R,GACLA,MAAM2gB,mBACN1iB,OAAO2iB,oBAEZjC,EAAgB8B,EAAOzB,GACvBP,EASJ,SAA8BA,GAC1B,GAAsB,IAAlBQ,EACA,OAAOR,EAaX,OAVAA,EAASA,EAAOxyB,KAAI,SAAC40B,GAOjB,OANAA,EAAQ50B,KAAI,SAACg0B,GAGT,OAFAA,EAAM,GAAKhB,EAEJgB,KAGJY,KArBFC,CAAqBL,EAAO1B,IA/OjCgC,GAySJ7f,EAkBuB,WAAnB6Q,EACmB,gBAAfC,EACOwB,qBACFpU,OAAOse,iBAAOpN,GAAY,qBAAGrB,SAC7BrJ,WAAW,CAAC,EAAG5E,IAEbpD,wBACFwB,OAAOse,iBAAOpN,GAAY,qBAAGrB,SAC7BrJ,WAAW,CAAC,EAAG5E,IAGjByS,sBACFrU,OAAOse,iBAAOpN,GAAY,qBAAGrB,SAC7BrJ,WAAW,CAAC,EAAG5E,IASlB2S,GAAOqN,KACPtN,GAylBFiM,GACO7W,GAAgB4K,KAGpBzb,cAAI,EAjCP7J,EAAOkwB,GAAK1e,EAAK3T,KAAI,SAACjH,GAAD,OAAOA,EAAEF,SAC9Bg7B,EAAiB7nB,cAAI8mB,GAAqB,SAAUl6B,GACpD,IAAIo8B,EAAO7yB,EAAKnC,KAAI,SAACnG,GAAD,OAASjB,EAAEiB,MAE/B,OAAOo7B,cAAID,MAGRnB,GA0B0Bb,IAroBjC9d,EA0COvD,wBACFwB,OAAO,CAACuU,GAAMD,KACd9N,WAAW,CAAC3E,EAAa,IACzB6S,OA3CL9R,EACIA,GACAhC,EAAMkF,QACF,SAAC8E,EAAM6I,EAAO8D,GAAd,OACI1xB,OAAO86B,OAAO,GAAI/V,EAAlB,OAA2B6I,EAAQ/Q,EAAY6U,OACnD,IAzNZ,WACI,IAAI3G,EAAOC,EAEX,GAAuB,WAAnB8B,EACA/B,EAAQK,GAAoBC,EAAYvgB,GACxCkgB,EAAQ,KAGJ5O,EADe,gBAAf2Q,EACQjM,qBAAW7E,GACdvC,MAAMqR,EAAMI,KAAM,KAClB2D,YAAW,SAAUlvB,GAClB,IAAMmvB,EAAM9V,KAAK8V,IAAInvB,GAAKqZ,KAAK+V,KAE/B,OAAO/V,KAAKqQ,IAAIrQ,KAAKE,MAAM4V,GAAOA,GAAO,KACnC,MAAQ9V,KAAKE,MAAM4V,GACnB,MAGNjO,qBAAW7E,GACdvC,MAAMqR,EAAMI,MACZ2D,WAAWG,QAEjB,CACH,GACoB,WAAhBjC,GAC6B,iBAAtBC,GAEPlC,EAAQ,CACJI,KAAMhO,EACNrL,OAAQoY,sBAAW+C,KAEvBjC,EAAQ,SACL,OACiBP,GAChBY,EACAvgB,EACAkiB,EACAhZ,GAJD+W,EADA,EACAA,MAAOC,EADP,EACOA,MAOVoB,EAAWtL,qBAAW7E,GACjBvC,MAAMsR,EAAMG,MACZ+D,SAAS,EAAG,GACZJ,WAAW9D,EAAMlZ,QAG1BsK,EAAQ0E,qBAAW7E,GACdvC,MAAMqR,EAAMI,MACZ+D,SAAS,GAAI,GACbC,YAjPK,GAkPLL,WAAW/D,EAAMjZ,QAG1BuK,EAAQ6f,oBAAUhgB,GACbxC,MAAMwD,GACNgS,SAAS,CAAC,IACVC,YAxPS,GAyPTL,WAAWG,IA6XpB,WACI3S,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,SAElD,IAAI0T,EAAuB2M,KAAqB,EAEnC,eAAT7a,IAAkC,SAATA,KAiBhBtF,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBAUL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAM,GACXA,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GAxCRoT,GAiDe9S,EAClB1S,OAAO,eACP8Q,UAAU,cACAtQ,KAAK,SAAS,SAACxK,GAAD,OACnB,IAANA,EACM,8CACA,gBAlDG,aAATshB,IAAgC,SAATA,KA2DdrF,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBAUL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,IACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,IA3dhBmlB,CAAcxE,EAAMI,MAjJhBlK,GAsaR,WACI3E,EAAI1S,OAAO,yBACNQ,KAAK,YADV,wBACwC4R,EADxC,OAEKvc,KAAK2c,GAEU,WAAhB4Q,GAA+C,WAAnBF,GAC5BxQ,EAAI1S,OAAO,6BACNQ,KACG,YAFR,uBAGwB4R,EAniBT,GAgiBf,MAKKvc,KAAK2sB,GAGd9P,EAAI1S,OAAO,sBACNQ,KAAK,YADV,sBACsCuT,GADtC,SAEKle,KAAK4c,GACL5c,KAAKqwB,IAENhR,IACID,GACAvC,EAAI5B,UAAU,sBAAsBgB,SAGxCmD,EAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,GACV3U,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,IArcVmR,GA4rBR,WAEQwJ,IACAnd,EAAI5B,UAAU,oBAAoBgB,SAClCY,EAAI5B,UAAU,UAAUgB,SACxBY,EAAI5B,UAAU,iBAAiBgB,UAGnC,GAAIgf,GAGA,OAtDAyB,EAAgBnyB,kBACfuI,GAAE,SAAC3S,GAAD,OAAOqc,EAAOrc,EAAEoqB,SAClB7f,GAAE,kBAAM+R,EAAO,GAAK,MAErBkgB,EAAa9f,EAAI1S,OAAO,iBAGvBa,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,IAAK+xB,EAAcrC,IACxB/zB,MAAM,SAAU,uCAErBq2B,EACK3xB,OAAO,kBACPL,KAAK,KAAM,4BACXA,KAAK,gBAAiB,kBACtBA,KAAK,KAAM,GACXA,KAAK,KAAM6R,EAAOtB,EAAKA,EAAKtY,OAAS,GAAG2nB,OACxC5f,KAAK,KAAM,GACXA,KAAK,KAAM,GACXsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAOyU,EAAa,IACpC,CAAE/Z,OAAQ,OAAQsF,MAAOyU,EAAa,MAEzCjY,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,SA7B/B,IACQ6d,EAIAC,EAqDJzC,EAAYd,kBACP3I,MAAM9a,GAAS8kB,KACf3nB,GAAE,gBAAGoI,EAAH,EAAGA,KAAH,OAAcsB,EAAOtB,EAAKqP,SAC5B8O,IAAG,SAACl5B,GAAD,OAAOsc,EAAOtc,EAAE,OACnBsT,IAAG,SAACtT,GAAD,OAAOsc,EAAOtc,EAAE,OAExBg6B,EAAc5vB,kBACTkmB,MAAMyJ,EAAUzJ,SAChB3d,GAAE,gBAAGoI,EAAH,EAAGA,KAAH,OAAcsB,EAAOtB,EAAKqP,SAC5B7f,GAAE,SAACvK,GAAD,OAAOsc,EAAOtc,EAAE,OAEnBme,KACA0b,EAASnd,EACJ1S,OAAO,gBACP8Q,UAAU,UACVC,KAAK+e,EAAeta,IACpBtE,QACArQ,OAAO,KACPC,QAAQ,mBAAmB,IAG3BD,OAAO,QACPL,KAAK,QAAS,SACdA,KAAK,IAAKuvB,GACV5zB,MAAM,UAAWk0B,GACjB7vB,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAE9C44B,EACKhvB,OAAO,QACPL,KAAK,QAAS,gBACdA,KAAK,IAAKwvB,GACV7zB,MAAM,UAAU,gBAAGlF,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAC5CuJ,KAAK,OAAQ,QAGlBkS,EAAI1S,OAAO,gBACN8Q,UAAU,UACVC,KAAK6e,GACL/d,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAU66B,GAAoB76B,MACpCsiB,SAASyY,IACTrc,KAAKA,IACL5T,KAAK,IAAKuvB,GACV5zB,MAAM,UAAWk0B,GACjB7vB,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAE9Cyb,EAAI1S,OAAO,gBACN8Q,UAAU,iBACVC,KAAK6e,GACL/d,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAU66B,GAAoB76B,MACpCsiB,SAASyY,IACTrc,KAAKA,IACL5T,KAAK,IAAKwvB,GACVxvB,KAAK,OAAQ,WAElBqvB,EAASnd,EACJ1S,OAAO,gBACP8Q,UAAU,UACVC,KAAK6e,GACL1e,QACArQ,OAAO,KACPC,QAAQ,mBAAmB,IAG3BD,OAAO,QACPL,KAAK,QAAS,SACdA,KAAK,IAAKuvB,GACV5zB,MAAM,UAAWk0B,GACjB7vB,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAE9C44B,EACKhvB,OAAO,QACPL,KAAK,QAAS,gBACdA,KAAK,IAAKwvB,GACV7zB,MAAM,UAAU,gBAAGlF,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAGjDyb,EAAI1S,OAAO,gBACN8Q,UAAU,UACVtQ,KAAK,IAAKuvB,GACV5zB,MAAM,UAAWk0B,GACjB7vB,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MAE9Cyb,EAAI1S,OAAO,gBACN8Q,UAAU,iBACVtQ,KAAK,QAAS,gBACdA,KAAK,IAAKwvB,GACV7zB,MAAM,UAAU,gBAAGlF,EAAH,EAAGA,IAAH,OAAakc,EAAelc,OAGhDy5B,IACDhe,EAAI1S,OAAO,gBACN8Q,UAAU,iBACV3U,MAAM,UAAW,QAI1B0zB,EAAOxe,OAAOQ,aAAa1V,MAAM,UAAW,GAAG2V,SA3yB3C2gB,GA0DJ/f,EAAI+E,GAAG,aAAa,SAAUzhB,IAu+BlC,SAAyBqI,EAAGrI,GACxBsf,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAG0yB,gBAAMrqB,IAv+B3CsqB,CAAgBpvB,KAAMvD,MA0jCnBkL,EAAQ2hB,KAAqBiO,MA5fxC,WAEQpO,GACAhQ,EAAI5B,UAAU,YAAYgB,SAG9B4Q,EAAUhQ,EACL1S,OAAO,mBACPa,OAAO,QACPL,KAAK,QAAS,WACdA,KAAK,KAAM,GACXA,KAAK,KAAM4R,GACX5R,KAAK,SAAU4R,GACf5R,KAAK,QAAS2R,GACd3R,KAAK,OAhtBK,oBAitBVrE,MAAM,UAAW,QAnoBdu2B,GA6yBZ,WAEQ/P,GACAjQ,EAAI5B,UAAU,8BAA8BgB,SAGhD6Q,EAA0BjQ,EACrB1S,OAAO,mBACPa,OAAO,KACPL,KAAK,QAAS,6BACdA,KAAK,YAAa,sBAEvBoiB,EAAqBD,EAChB7R,UAAU,QACVC,KAAK,CACF,CACI1H,GAAI,EACJC,GAAI,EACJT,GAAI,EACJU,GAAI,KAGX2H,QACArQ,OAAO,QACPC,QAAQ,mBAAmB,GAC3BN,KAAK,KAAM,GACXA,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,GAx0BRmyB,GAmCRjgB,EAAI+E,GAAG,aAAa,SAAUzhB,IA4+BlC,SAAyBqI,EAAGrI,GACxB0sB,EAAQvmB,MAAM,UAAW,SACzBymB,EAAmB9hB,QAAQ,gBAAgB,GAE3CwU,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,IA/+B3CsZ,CAAgBpe,KAAMvD,MAErByhB,GAAG,YAAY,SAAUzhB,IA69BlC,SAAwBqI,EAAGrI,GACvB0sB,EAAQvmB,MAAM,UAAW,QACzBymB,EAAmB9hB,QAAQ,gBAAgB,GAC3C6hB,EAAwBniB,KAAK,YAAa,sBAE1C8U,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,IAj+BtCwZ,CAAete,KAAMvD,MAExByhB,GAAG,aAAa,SAAUzhB,IA47BnC,SAAyBqI,GACrB4xB,GAAW2C,KAEX,IAEIzL,EAFJ,EAA6B3O,gBAAMna,GAAnC,YAAK+oB,EAAL,KAAgBC,EAAhB,KACIE,EAAYsL,GAAoBzL,EAAY9f,EAAOC,MAGnDggB,IAGAuL,GAFA3L,EAAqB9U,EAAO,IAAI+M,KAAKmI,EAAUtwB,OAI/CqxB,GAAoBf,GAEpBjS,GAAWzf,KACP,kBACAwI,EACAkpB,EACApU,EACAgU,EACAE,IA/8BAzP,CAAgBre,cAoB5B,SAAS8rB,GAAkB1uB,GASvB,OANIiT,GAAUjT,GACDmT,GAEAD,IAGClT,GAoYlB,SAASuvB,GAAkBtV,GACvBA,EACKE,UAAU,cACVtQ,KACG,YAHR,qBA/jBmB,GA+jBnB,cApkBmB,EAokBnB,MAucJ,SAAS2xB,KACL,OAAIrB,GACO7W,GAAgB6K,KAGpB5b,cAAI,CA7CJA,cAAI6H,EAAK3T,KAAI,SAACpH,GAAD,OAAOA,EAAEW,WASzB4I,EAAOkwB,GAAK1e,EAAK3T,KAAI,SAACjH,GAAD,OAAOA,EAAEF,SACbiT,cAAIgnB,GAAqB,SAAUl6B,GACpD,IAAIo8B,EAAO7yB,EAAKnC,KAAI,SAACnG,GAAD,OAASjB,EAAEiB,MAE/B,OAAOo7B,cAAID,OAgCiChC,EAAe,IArCnE,IACQ7wB,EAyDR,SAASszB,GAAoBlM,GACzB,IAAIoM,EAAStR,EAAWhE,QACpB,gBAAG2C,EAAH,EAAGA,KAAH,OAAc/Q,KAAKqQ,IAAIrN,EAAO+N,GAAQuG,IAAWsJ,KAGrD,GAAI8C,EAAOt6B,OACP,OAAOs6B,EAAO,GAStB,SAASH,KACL,IAAIvO,EAAQ5C,EAAWrkB,KAAI,qBAAGgjB,QAE9B6P,GAAW5d,EAAOgS,EAAM,IAAMhS,EAAOgS,EAAM,KAAO,EA8GtD,SAASiE,GAAT,GAAyC,IAAVpY,EAAU,EAAVA,OACvB8iB,EAAc,EA7NlBrQ,EAAwB7R,UAAU,qBAAqBgB,SAkOvD,IAAImhB,EAAe9hB,EAAMkF,QAAO,SAACC,EAAK4c,GAClC,oBAAW5c,GAAX,CAAgBpG,EAAO4V,MAAK,qBAAG7vB,OAAoBi9B,SACpD,IAEHD,EAAa/2B,SAAQ,SAAClG,EAAG8xB,GACrB,IAAIC,EAASpF,EACR9hB,OAAO,KACPC,QAAQ,oBAAoB,GAC5BD,OAAO,UACPC,QAAQ,0BAA0B,GAClCN,KAAK,KAzqCQ,IA0qCbA,KAAK,KAAM,GACXA,KAAK,IA1qCU,GA2qCfrE,MAAM,eA1qCS,KA2qCfA,MAAM,SAAUgX,EAAend,EAAEC,OACjCkG,MAAM,SAAU,WAChBsb,GAAG,SAAS,YAxjCzB,SAAuB1a,GACdimB,IACDA,EAAkBnB,GACdnP,EAAI1S,OAAO,oBAEfijB,EAAoBlB,GAAqBiB,IAG7C,IAAIgF,EAAShoB,iBAAOjD,GAEpBirB,EACK7rB,MAAM,eA9HwB,GA+H9BA,MAAM,iBA9H0B,IA+HhCqE,KAAK,SAHV,eAG4ByiB,EAH5B,MAKAhB,GAAsB+F,EAAQ5T,GAnIA+e,GA6qClBlL,CAAc1uB,MAhC9B,SAA8B8E,EAAGrI,GAC7Bsf,GAAWzf,KAAK,uBAAwBwI,EAAGrI,EAAGwiB,gBAAMna,IAgCxC6pB,CAAqB3uB,KAAMvD,MAE9ByhB,GAAG,YAAY,WA6B5B,IAAsB0Q,IA5BO5uB,KA6BzByG,iBAAOmoB,GAAO3nB,KAAK,SAAU,WA1BzBwyB,GAA4BC,EAAanL,GAAOlT,IAEhDmT,EAAOvnB,KACH,YADJ,sBAzrCkB,GAyrClB,aAE2C8R,EAAO0gB,GAFlD,UAYR,SAASF,GAAmBtL,GACxB7E,EAAwBniB,KACpB,YADJ,oBAEiBgnB,EAFjB,QAkgBJ,OAneAxzB,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGfg4B,GAAwB/X,EAEjBnf,MAJIk3B,IAgBfz8B,GAAQs8B,UAAY,SAAU5X,GAC1B,OAAKla,UAAU/F,QAGf63B,GAAY5X,EAELnf,MAJI+2B,IAaft8B,GAAQq8B,YAAc,SAAU3X,GAC5B,OAAKla,UAAU/F,QAGf43B,EAAc3X,EAEPnf,MAJI82B,GAafr8B,GAAQ4W,qBAAuBA,GAS/B5W,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAcfjf,GAAQwvB,UAAY,SAAU9K,GAC1B,OAAKla,UAAU/F,QAGf+qB,GAAY9K,EACZjO,GAA0B,QAEnBlR,MALIiqB,IAcfxvB,GAAQimB,gBAAkB,SAAUvB,GAChC,OAAKla,UAAU/F,QAGfwhB,GAAkBvB,EAEXnf,MAJI0gB,IAafjmB,GAAQsjB,KAAO,SAAUoB,GACrB,OAAKla,UAAU/F,QAGf6e,GAAOoB,EAEAnf,MAJI+d,IAaftjB,GAAQ08B,WAAa,SAAUhY,GAC3B,OAAKla,UAAU/F,QAGfi4B,GAAahY,EAENnf,MAJIm3B,IAaf18B,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,GAAauE,EAENnf,MAJI4a,IAcfngB,GAAQ28B,SAAW,SAAUjY,GACzB,OAAKla,UAAU/F,QAGfk4B,GAAWjY,EACXjO,GAA0B,QAEnBlR,MALIo3B,IAcf38B,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,GAAQ6uB,iBAAmB,SAAUnK,GACjC,OAAKla,UAAU/F,QAGfoqB,GAAmBnK,EAEZnf,MAJIspB,IAaf7uB,GAAQm2B,YAAc,SAAUzR,GAC5B,OAAKla,UAAU/F,QAGf0xB,EAAczR,EAEPnf,MAJI4wB,GAafn2B,GAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAefhf,GAAQoW,OAAS,SAAUsO,GACvB,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAcfpW,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IAWpD5N,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAU5C3C,GAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,GAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,IAcf5gB,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAiBflN,GAAQqvB,kBAAoB,SAAU3K,GAClC,OAAKla,UAAU/F,QAGf4qB,GAAoB3K,EAEbnf,MAJI8pB,IAgBfrvB,GAAQovB,YAAc,SAAU1K,GAC5B,OAAKla,UAAU/F,QAGf2qB,EAAc1K,EAEPnf,MAJI6pB,GAgBfpvB,GAAQkvB,eAAiB,SAAUxK,GAC/B,OAAKla,UAAU/F,QAGfyqB,EAAiBxK,EAEVnf,MAJI2pB,GAgBflvB,GAAQmvB,WAAa,SAAUzK,GAC3B,OAAKla,UAAU/F,QAGf0qB,EAAazK,EAENnf,MAJI4pB,GAefnvB,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAcfvf,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,EAAawD,EAENnf,MAJI2b,GAeflhB,GAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,EAAmBuD,EAEZnf,MAJI4b,GAafnhB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAeftf,GAAQo8B,cAAgB,SAAU1X,GAC9B,OAAKla,UAAU/F,QAGf23B,EAAgB1X,EAETnf,MAJI62B,GAORp8B,G,2lBCtuDI,SAASC,KACpB,IASIyU,EAWA0qB,EACA5gB,EAGAH,EACAghB,EACA5gB,EAEAH,EACAghB,EACAC,EACAla,EACAnE,EACAD,EAEAF,EACAD,EAIA0e,EAKAC,EACAzQ,EACAC,EAEAyQ,EACAC,EA2BAjhB,EACAP,EACAC,EA/EA9K,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACTiO,EAAiB,KAKjBI,EAAS,EACTD,EAAS,KAGTgE,EAAO,KAKPsc,EAAkB,SAClBxQ,EAAc,GAIdyQ,EAAc,GAOd1e,GAAoB,GAGpBH,GAAoB,GAIpB8e,EAAiBloB,cAUjBmoB,GAA6B,GAC7BhgB,EAEU,EAFVA,EAGY,EAGZigB,EAAgB,IAChBC,EAAsB,EACtBC,EAAoB,EACpBC,EAAkB,KAClBC,EAAyBJ,EACzBK,GAAgB,GAGhBphB,GAAcC,EAAYnR,aAAaC,YACvCmS,IAAa,EACbmgB,IAAgB,EAChBC,IAAe,EACfC,IAAa,EACbpgB,GAAOqgB,eAEPzc,GAAWzM,GACXmpB,IAAmB,EACnBtqB,GAAS,KACTiL,GAAkB/K,EAIlBgL,GAAaC,mBACT,cACA,kBACA,kBACA,kBAEJC,GAAU,SAAC,GAAD,SAAGvf,MACb0+B,GAAe,SAAC,GAAD,SAAG5jB,MAQtB,SAAS/c,GAAQ8hB,GACT1L,KACAiL,GAAkBlL,GAAiBC,KAGvC0L,EAAWzU,MAAK,SAAU0U,GACtBrN,EAAuBqN,EA6LPM,QAAO,SAACC,EAAKtgB,GAK7B,OAJAA,EAAEC,KAAO6D,OAAO9D,EAAC,MACjBA,EAAE2S,EAAI3S,EAAC,EACPA,EAAEuK,EAAIvK,EAAC,EAEP,cAAWsgB,GAAX,CAAgBtgB,MACjB,IAjMCmc,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OA0GnD,WACI,MAAqB,CACjB7J,cAAIR,GAAY,qBAAGC,KACnBO,cAAIR,GAAY,qBAAGnI,MAFhB0I,EAAP,KAAa6b,EAAb,KAIA,EAAqB,CACjB1b,cAAIV,GAAY,qBAAGC,KACnBS,cAAIV,GAAY,qBAAGnI,MAFhB4I,EAAP,KAAa0b,EAAb,KAIME,EAAoB1V,KAAKqQ,IAAIoF,GAAQ,EAAIzV,KAAKqQ,IAAIoF,GAAQ,EAEhEuO,EAAiBhhB,EAAStD,wBACrBwB,OAAO,CAACtH,EAAME,IACd4N,WAAW,CAAC,EAAG5E,IACf8S,OAELqO,EAAiBhhB,EAASvD,wBACrBwB,OAAO,CAACwU,EAAmBF,IAC3B9N,WAAW,CAAC3E,EAAa,IACzB6S,OAEL5L,EAAa6B,yBACR3K,OAAO7H,EAAWtL,IAAIoY,KACtB9F,MAAMuD,IAEXsgB,EAAYqB,sBACPrkB,OAAO,CAACwU,EAAmBF,IAC3BnV,MAAM,CAAC,EAAG2kB,KAEf,IAAMQ,EAAaxb,EAAW3J,QAY9ByD,EACIA,GACAkG,EAAW9I,SAAS8F,QAAO,SAAC+N,EAAOhJ,EAAM1lB,GAGrC,OAFA0uB,EAAMhJ,GAAQyZ,EAAWn/B,GAElB0uB,IACR,IAvJHnN,GAiKR,SAAkBjG,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,2BAA2B,GAvGhD,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,aAGoCD,EAAOuL,IAH3C,MAKhB7B,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EAAUnQ,OAAO,KAAKC,QAAQ,qBAAqB,GACnDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAsF5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GA5KhBuR,CAASld,MA2CjB,SAAmB8b,GACf7C,EAAQ0E,qBAAW7E,GACdvC,MAAMyD,GACNgS,YA1IS,GA2ITL,WAAW4P,MAEhBriB,EAAQ2E,mBAAS9E,GACZxC,MAAMwD,GACNiS,YA/IS,GAgJTL,WAAW7P,EAAgBnN,OAAO2rB,IAnDnCxc,CAAUhC,IAwFd+d,EAAc2B,qBACTpsB,GAAE,SAAC3S,GAAD,OAAOqc,EAAOrc,EAAE2S,MAClBpI,GAAE,SAACvK,GAAD,OAAOsc,EAAOtc,EAAEuK,MAClBsuB,OAAO,CACJ,CAAC,EAAG,GACJ,CAAC1c,EAAYC,IALP2iB,CAMPrsB,GAwGPgK,EAAI1S,OAAO,yBACNQ,KAAK,YADV,uBACuC4R,EADvC,MAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,yBAAyBnK,KAAK4c,GAarCyC,IACID,GACAvC,EAAI5B,UAAU,sBAAsBgB,SAGxCmD,EAAevC,EACV1S,OAAO,sBACPa,OAAO,KACPL,KAAK,QAAS,gBACdK,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,EAAmBpB,GAC7BvT,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,IAIVH,IACID,GACApC,EAAI5B,UAAU,sBAAsBgB,SAGxCgD,EAAepC,EACV5B,UAAU,sBACVjQ,OAAO,KACPL,KAAK,QAAS,gBACdK,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,IAAK2R,EAAa,GACvB3R,KAAK,IAAK4R,EAAc4C,GACxBxU,KAAK,cAAe,UACpBT,KAAKgV,IAqRlB,WACIrC,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,UAErC,eAATwF,GAAkC,SAATA,KAmChBtF,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBAzBL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,IArBH,aAATkF,GAAgC,SAATA,IAnJdrF,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBAUL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,IAvZZmlB,GA0sBR,WACIwO,EAAkBzhB,EACb1S,OAAO,mBACP8Q,UAAU,2BACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,UACPL,KAAK,QAAS,oBACdA,KAAK,SAAU,WAEhB8zB,KAEAZ,EAA8BhhB,EACzB1S,OAAO,gBACPa,OAAO,KACPL,KAAK,QAAS,6BAGnBmzB,EAAoCjhB,EAC/B1S,OAAO,mBACPa,OAAO,KACPL,KAAK,QAAS,8BAEnBkzB,EACK5iB,UAAU,yBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,oBAEnBkzB,EACK5iB,UAAU,yBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,oBAEnBmzB,EACK7iB,UAAU,2BACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,sBAEnBmzB,EACK7iB,UAAU,2BACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,sBAEnBmzB,EACK7iB,UAAU,2BACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,uBAGvB2zB,EAAgB9iB,OAAOS,SApwBnBkjB,GA8ZR,WACI,IAAIC,EAAUviB,EACT1S,OAAO,gBACPQ,KAAK,YAFI,eA9cO,oBA8cP,MAGTsQ,UAAU,UACVC,KAAKrI,GACLwI,QAEDiD,GACA8gB,EACKp0B,OAAO,UACPL,KAAK,QAAS,cACdqR,aACAoG,MAndD,KAodCD,SAASA,IACT5D,KAAKA,IACL5T,KAAK,iBAAkByzB,GACvBzzB,KAAK,eAAgB0zB,GACrB/3B,MAAM,UAAU,SAACnG,GAAD,OAAOmd,EAAend,EAAEC,SACxCuK,KAAK,QAAQ,SAACxK,GAAD,OACV0+B,GAlhBE,OAkhB+BvhB,EAAend,EAAEC,SAErDuK,KAAK,eAAgBwzB,GACrBxzB,KAAK,KAAK,SAACxK,GAAD,OAAOu9B,EAAUv9B,EAAEuK,MAC7BC,KAAK,MAAM,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE2S,MAC3BnI,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,EAAEuK,MAC3BpE,MAAM,SAAU,WAErB84B,EACKp0B,OAAO,UACPL,KAAK,QAAS,cACdA,KAAK,iBAAkByzB,GACvBzzB,KAAK,eAAgB0zB,GACrB/3B,MAAM,UAAU,SAACnG,GAAD,OAAOmd,EAAend,EAAEC,SACxCuK,KAAK,QAAQ,SAACxK,GAAD,OACV0+B,GAjiBE,OAiiB+BvhB,EAAend,EAAEC,SAErDuK,KAAK,eAAgBwzB,GACrBxzB,KAAK,KAAK,SAACxK,GAAD,OAAOu9B,EAAUv9B,EAAEuK,MAC7BC,KAAK,MAAM,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE2S,MAC3BnI,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,EAAEuK,MAC3BpE,MAAM,SAAU,WAIzB84B,EAAQ5jB,OAAOS,SA1cXojB,GA+PexiB,EACd5B,UAAU,gBACVjQ,OAAO,YACPL,KAAK,KAlTW,qBAmThBK,OAAO,QACPL,KAAK,QAAS2R,GACd3R,KAAK,SAAU4R,GACf5R,KAAK,IAAK,GACVA,KAAK,KAAM,EAAI6zB,IAQxB,WACI,IAAKG,GACD,OAGJ,IAAMW,EAAOC,kBACbD,EAAKE,YAAY,CAhWP,GACA,KAgWLxG,OAAO,CACJ,CAAC,EAAG,GACJ,CAAC3tB,EAAOgE,KAEXuS,GAAG,OAAQ6d,IAGhB5iB,EAAI7R,OAAO,QACNL,KAAK,QAAS,QACdA,KAAK,QAAS2R,GACd3R,KAAK,SAAU4R,GACfjW,MAAM,OAAQ,QACdA,MAAM,iBAAkB,OACxBqE,KAAK,YANV,oBAMoC8G,EAAOC,KAN3C,aAMoDD,EAAOuL,IAN3D,MAOKhd,KAAKs/B,GAlSNI,GAEIhB,IAuUZ,SAAuBiB,GACfhC,GACAA,EAAc1hB,SAGlB,IAAM2jB,EAAS,CACX,CACI9sB,EAAG6sB,EAAWnsB,GACd9I,EAAGi1B,EAAWlsB,IAElB,CACIX,EAAG6sB,EAAW3sB,GACdtI,EAAGi1B,EAAWjsB,KAIlBmsB,EAAYt1B,kBACXkmB,MAAMwN,GACNnrB,GAAE,gBAAGA,EAAH,EAAGA,EAAH,OAAW0J,EAAO1J,MACpBpI,GAAE,gBAAGA,EAAH,EAAGA,EAAH,OAAW+R,EAAO/R,MAWnBimB,GATNgN,EAAgB9gB,EACX5B,UAAU,gBACVjQ,OAAO,QACPL,KAAK,QAAS,qBACdA,KAAK,IAAKk1B,EAAUD,IACpBj1B,KAAK,SAAUyS,GAAY,IAC3BzS,KAAK,eA7aY,KA8ajBA,KAAK,OAAQ,SAEgBX,OAAOgpB,WAEzC2K,EACKhzB,KAAK,mBADV,UACiCgmB,EADjC,YACgDA,IAC3ChmB,KAAK,oBAAqBgmB,GAC1B3U,aACAoG,MArbY,MAsbZD,SArbe,KAsbf5D,KAAKA,IACL5T,KAAK,oBAAqB,GA7WvBm1B,CAAcltB,GAAqBC,IAa3CgK,EAAI+E,GAAG,aAAa,SAAUzhB,GAwkBlC,IAAyBqI,EAtIc0S,EAuI7B6kB,EACAC,EADAD,EAAeE,GADAz3B,EAvkBD9E,MAykBds8B,EAAYlB,GAAaiB,GAE3BtB,KA1I+BvjB,EA2ID8kB,EA1IlCE,IAAkC,GAGlCrC,EACK5iB,UAAU,yBACVtQ,KAAK,SAAU2S,EAAepC,EAAK9a,OACnCuK,KAAK,QAAS,oBACdA,KAAK,KAAM6R,EAAOtB,EAAKpI,GAAK4qB,EAAUxiB,EAAKxQ,IAC3CC,KAAK,KAAM,GACXA,KAAK,KAAM8R,EAAOvB,EAAKxQ,IACvBC,KAAK,KAAM8R,EAAOvB,EAAKxQ,IAG5BmzB,EACK5iB,UAAU,yBACVtQ,KAAK,SAAU2S,EAAepC,EAAK9a,OACnCuK,KAAK,QAAS,oBACdA,KAAK,KAAM6R,EAAOtB,EAAKpI,IACvBnI,KAAK,KAAM6R,EAAOtB,EAAKpI,IACvBnI,KAAK,KAAM8R,EAAOvB,EAAKxQ,GAAKgzB,EAAUxiB,EAAKxQ,IAC3CC,KAAK,KAAM4R,GAGhBuhB,EACK7iB,UAAU,2BACVtQ,KAAK,cAAe,UACpBA,KAAK,OAAQ2S,EAAepC,EAAK9a,OACjCuK,KAAK,QAAS,sBACdA,KAAK,IAAK8R,EAAOvB,EAAKxQ,GAAKgzB,EAAUxiB,EAAKxQ,GAAK,GAC/CC,KAAK,IAAKuzB,GACVh0B,KAPL,UAOasV,GAAgBnN,OAAO2rB,EAAvBxe,CAAoCtE,EAAKxQ,KAGtDozB,EACK7iB,UAAU,2BACVtQ,KAAK,cAAe,UACpBA,KAAK,OAAQ2S,EAAepC,EAAK9a,OACjCuK,KAAK,QAAS,sBACdA,KACG,YANR,uBAOwB4R,EAAc2hB,EAPtC,MASKvzB,KAAK,IAAK6R,EAAOtB,EAAKpI,GAAK4qB,EAAUxiB,EAAKxQ,GAAK,GAC/CR,KAVL,UAUa+0B,KAAiB/jB,EAAKpI,MAsKvC,SAA4BoI,GACxB0iB,EAAqB1iB,EAErBilB,KAEKhT,IACDA,EAAkBnB,GACdnP,EAAI1S,OAAO,oBAEfijB,EAAoBlB,GAAqBiB,IAG7CmR,EACK3zB,KAAK,UAAW,GAChBA,KAAK,UAAU,kBAAM2S,EAAepC,EAAK9a,SACzCuK,KAAK,QAAQ,kBAAM2S,EAAepC,EAAK9a,SACvCuK,KAAK,eAAgBwzB,GACrBxzB,KAAK,MAAM,kBAAM6R,EAAOtB,EAAKpI,MAC7BnI,KAAK,MAAM,kBAAM8R,EAAOvB,EAAKxQ,MAC7BC,KAAK,KAAK,kBAAM+yB,EAAUxiB,EAAKxQ,MAC/BpE,MAAM,eA3vBY,IA4vBlBA,MAAM,iBAAkBi4B,GAG7BD,EAAgB3zB,KAAK,SAArB,eAAuCyiB,EAAvC,MA5FAgT,CAAmBJ,GAEnBvgB,GAAWzf,KAAK,kBAAmBwI,EAAGw3B,EAAWrd,gBAAMna,GAAI,CACvD8T,EACAC,OAjlBCqF,GAAG,aAAa,SAAUzhB,IA0lBnC,SAAyBqI,EAAGrI,GACxBsf,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,IA1lBvCsZ,CAAgBpe,KAAMvD,MAEzByhB,GAAG,YAAY,SAAUzhB,IAgmBlC,SAAwBqI,EAAGrI,GACvBggC,KAEI1B,IACAyB,IAAkC,GAEtCzgB,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,IArmBtCwZ,CAAete,KAAMvD,MAExByhB,GAAG,SAAS,WA2mBrB,IAAqBpZ,EACXu3B,EACA5/B,EAgBoBuxB,EAjBpBqO,EAAeE,GADJz3B,EA1mBG9E,MA4mBdvD,EAAI2+B,GAAaiB,GAiBvB3T,GACIkS,EACA/f,GACAmf,GAJsBhM,EAdLvxB,GAkBGuK,GACpBgzB,EAAwB,EAAdhM,EAAUhnB,IAjBxB+U,GAAWzf,KAAK,cAAewI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC3C8T,EACAC,UAlWR,SAASkjB,GAAqBvkB,EAAM+W,EAAOtrB,GAEvC,IAAM05B,EAAYC,yBAAc35B,EAAS,IACzC6V,EAAS6jB,EAAUE,SAAS/C,GAC5B/gB,EAAS4jB,EAAUG,SAAS/C,GAE5B9gB,EAAMtD,MAAMmD,GACZI,EAAMvD,MAAMoD,GACZI,EAAI1S,OAAO,yBAAyBnK,KAAK2c,GACzCE,EAAI1S,OAAO,yBAAyBnK,KAAK4c,GAGzCC,EAAI1S,OAAO,gBACN8Q,UAAU,UACVtQ,KAAK,MAAM,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE2S,MAC3BnI,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,EAAEuK,MAGhC4zB,EACK3zB,KAAK,MAAM,kBAAM6R,EAAOohB,EAAmB9qB,MAC3CnI,KAAK,MAAM,kBAAM8R,EAAOmhB,EAAmBlzB,MA6PpD,SAASu1B,GAAgBpjB,GACrB,IAAI4jB,EAAW9d,gBAAM9F,GAKrB,OAHA4jB,EAAS,IAAMhvB,EAAOC,KACtB+uB,EAAS,IAAMhvB,EAAOuL,IAEfugB,EAAYtN,KAAKwQ,EAAS,GAAIA,EAAS,IAUlD,SAASxB,KACL,MAAwB,WAApBlB,EACOtpB,SAAgB8Y,GAEhB9C,sBAAW8C,GA0L1B,SAAS4S,KACLtjB,EAAI5B,UAAU,2BAA2BtQ,KAAK,UAAW,GAW7D,SAASu1B,KAAkD,IAAhBQ,EAAgB,wDACjDC,EAAeD,EAAS,EAAI,EAElC7C,EAA4BlzB,KAAK,UAAWg2B,GAC5C7C,EAAkCnzB,KAAK,UAAWg2B,GAydtD,OA/cAxiC,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGfuf,GAAWU,EAEJnf,MAJIye,IAgBfhkB,GAAQigC,oBAAsB,SAAUvb,GACpC,OAAKla,UAAU/F,QAGfw7B,EAAsBvb,EAEfnf,MAJI06B,GAgBfjgC,GAAQkgC,kBAAoB,SAAUxb,GAClC,OAAKla,UAAU/F,QAGfy7B,EAAoBxb,EAEbnf,MAJI26B,GAiBflgC,GAAQggC,cAAgB,SAAUtb,GAC9B,OAAKla,UAAU/F,QAGfu7B,EAAgBtb,EAETnf,MAJIy6B,GAcfhgC,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAefnf,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,GAAcyF,EAEPnf,MAJI0Z,IAcfjf,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IASpD5N,GAAQsjB,KAAO,SAAUoB,GACrB,OAAKla,UAAU/F,QAGf6e,EAAOoB,EAEAnf,MAJI+d,GAiBftjB,GAAQsgC,cAAgB,SAAU5b,GAC9B,OAAKla,UAAU/F,QAGf67B,GAAgB5b,EAETnf,MAJI+6B,IAaftgC,GAAQ0gC,iBAAmB,SAAUhc,GACjC,OAAKla,UAAU/F,QAGfi8B,GAAmBhc,EAEZnf,MAJIm7B,IAef1gC,GAAQugC,aAAe,SAAU7b,GAC7B,OAAKla,UAAU/F,QAGf87B,GAAe7b,EAERnf,MAJIg7B,IAcfvgC,GAAQwgC,WAAa,SAAU9b,GAC3B,OAAKla,UAAU/F,QAGf+7B,GAAa9b,EAENnf,MAJIi7B,IAafxgC,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAiBflR,GAAQ+/B,0BAA4B,SAAUrb,GAC1C,OAAKla,UAAU/F,QAGfs7B,EAA4Brb,EAErBnf,MAJIw6B,GAcf//B,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,GAAauE,EAENnf,MAJI4a,IAafngB,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAgBftT,GAAQqgC,cAAgB,SAAU3b,GAC9B,OAAKla,UAAU/F,QAGf47B,GAAgB3b,EAETnf,MAJI86B,IAcfrgC,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAa5C3C,GAAQ+kB,YAAc,SAAUL,GAC5B,OAAKla,UAAU/F,QAGf2R,GAASsO,EAEFnf,MAJI6Q,IAafpW,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAcflN,GAAQ+gB,WAAa,SAAU2D,GAC3B,OAAKla,UAAU/F,QAGfsc,EAAa2D,EAENnf,MAJIwb,GAef/gB,GAAQghB,iBAAmB,SAAU0D,GACjC,OAAKla,UAAU/F,QAGfuc,EAAmB0D,EAEZnf,MAJIyb,GAafhhB,GAAQovB,YAAc,SAAU1K,GAC5B,OAAKla,UAAU/F,QAGf2qB,EAAc1K,EAEPnf,MAJI6pB,GAefpvB,GAAQ4/B,gBAAkB,SAAUlb,GAChC,OAAKla,UAAU/F,QAGfm7B,EAAkBlb,EAEXnf,MAJIq6B,GAaf5/B,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAafvf,GAAQ6/B,YAAc,SAAUnb,GAC5B,OAAKla,UAAU/F,QAGfo7B,EAAcnb,EAEPnf,MAJIs6B,GAcf7/B,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,EAAawD,EAENnf,MAJI2b,GAeflhB,GAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,EAAmBuD,EAEZnf,MAJI4b,GAafnhB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAORtf,G,qkBC/2CI,SAASC,KACpB,IASIoe,EACAokB,EACAjkB,EACAF,EACAokB,EACAjkB,EAUA4G,EACAuW,EAKAld,EACAP,EACAC,EACArB,EACA4lB,EACAC,EACAC,EAQA3hB,EACAD,EAIA6hB,EAjDAxvB,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EAOZ+jB,EAAkB,CACdx2B,GAAI,EACJoI,GAAI,IAER2K,EAAS,EACTC,EAAS,EAETN,EAAcC,EAAYnR,aAAaC,YACvCmR,EAAiB,KAGjB/I,EAAS,KACTiL,EAAkB/K,EAClB8J,EAAOC,gBACPJ,GAAe,EAQf4O,EAAmB,IACnB9O,EAEU,EAFVA,EAGY,EAKZoB,GAAoB,GAIpBb,EAAoB/I,GACpB+L,EAAO,KACPzC,EAAY,OACZD,EAAa,QACboiB,EAAa,QACbvjB,EAvGc,KAwGdK,EAAqB,GACrBmjB,GAAuB,GAEvBzhB,GAAU,SAAC,GAAD,SAAGvf,MACbwf,GAAW,SAAC,GAAD,SAAG9e,OACdugC,GAAW,SAAC,GAAD,SAAGC,OACdhjB,IAAa,EAEbmB,GAAaC,mBACT,kBACA,iBACA,kBACA,eASR,SAASvhB,GAAQ8hB,GACT1L,IACAiL,EAAkBlL,GAAiBC,IAGvC0L,EAAWzU,MAAK,SAAU0U,GACtB5D,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EAAiBgF,EAiNDM,QAAO,SAACC,EAAKtgB,GAQ7B,OAPAA,EAAEW,OAASX,EAAE4e,GACb5e,EAAEmhC,MAAQnhC,EAAEghC,GAGZhhC,EAAEsuB,UAAYtuB,EAAEghC,GAChBhhC,EAAEC,KAAOD,EAAE6e,GAEX,cAAWyB,GAAX,CAAgBtgB,MACjB,IAhCP,SAAkBgb,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,0BAA0B,GAvG/C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EAAUnQ,OAAO,KAAKC,QAAQ,qBAAqB,GACnDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,gBAAgB,GAC9CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAwF5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GApMhBuR,CAASld,MACLyZ,EAmSRN,EAAI1S,OAAO,wBAAwBoF,KAAKqC,IAoY5C,SAAqBsJ,GA9yBX2e,EA+yBQ3e,EAAK3T,IAAI85B,IAAvBP,EA9yBJjH,EAAOjS,QAAO,SAAClhB,EAAMozB,EAAK13B,GAAZ,OAAoBA,EAAIyC,QAAQ6B,IAASozB,KAgzBnDkH,EAAkBtS,kBACbttB,IAAIue,IACJ4hB,QAAO,SAAUlnB,GACd,IAAImnB,EAAM,GAUV,OARAnnB,EAAOhU,SAAQ,SAACk1B,GACRA,GAASA,EAAM4F,KACfK,EAAIjG,EAAM4F,IAAevhB,GAAS2b,OAI1CiG,EAAInnB,OAASA,EAENmnB,KAEV/a,QAAQvL,GACR3T,KAAI,SAAU2T,GACX,OAAO3a,OAAO86B,OACV,GACA,CACIznB,MAAO4oB,cAAIiF,kBAAQvmB,EAAKpa,MAAOggC,IAC/B1/B,IAAK8Z,EAAK9Z,KAEd8Z,EAAKpa,UAx0BZ,IAAC+4B,EA4IF6H,CAAYxmB,GAwHpB,WACI,IAAIymB,GA8gBE7gB,EAAmB,IAAIC,IAAI7F,EAAK3T,IAAIqY,KAEZ,IAA1BkB,EAAiBnO,MAAcmO,EAAiBE,IAAI,GAG7C,EAEAzN,cAAI2H,EAAK3T,IAAIqY,MAR5B,IACUkB,EA5gBF1C,GACA5B,EAAStD,wBACJwB,OAAO,CAAC,EAAGinB,IACXzgB,WAAW,CAAC,EAAG5E,EAAa,IAGjCG,EAAS0E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,KAChBuB,WAAW,CAAC3E,EAAa,IACzBlY,QAAQ+8B,IAEbP,EAAU1f,sBACLzG,OAAOQ,EAAK3T,IAAI85B,KAChBngB,WAAW,CAACzE,EAAOhD,YAAa,IAChCpV,QAAQ4Z,KAEbzB,EAAS2E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,KAChBuB,WAAW,CAAC,EAAG5E,IACfjY,QAAQ+8B,IACbR,EAAUzf,sBACLzG,OAAOQ,EAAK3T,IAAI85B,KAChBngB,WAAW,CAAC,EAAG1E,EAAO/C,cACtBpV,QAAQ+8B,IAEb3kB,EAASvD,wBACJwB,OAAO,CAAC,EAAGinB,IACXzgB,WAAW,CAAC3E,EAAa,IACzB6S,QAGT5L,EAAa6B,yBACRxL,MAAMuD,GACN1C,OAAOQ,EAAK3T,IAAI85B,KAErB/jB,EACIA,GACAkG,EACK9I,OAAOQ,EAAK3T,IAAIoY,KAChBjF,SACA8F,QAAO,SAAC8E,EAAMC,GAOX,OANArK,EAAK7U,SAAQ,YAAqB,IAAlBjG,EAAkB,EAAlBA,KAAMkhC,EAAY,EAAZA,MACdlhC,GAAQmlB,IACRD,EAAKgc,GAAS9d,EAAW8d,OAI1Bhc,IACR,IA1KPlE,GAwGJ2Y,EAASiH,EAAgBz5B,KAAI,SAACge,GAC1B,IAAIic,EAAM,GAMV,OAJAV,EAAOz6B,SAAQ,SAACjF,GACZogC,EAAIpgC,GAAOmkB,EAAKnkB,MAGbb,OAAO86B,OAAO,GAAI9V,EAAMic,MA0GnC3kB,EAAI1S,OAAO,4BAA4B8R,SA6F3C,WACIY,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,UAErC,eAATwF,GAAkC,SAATA,IACzBmO,KAGS,aAATnO,GAAgC,SAATA,GACvBoO,KAGAzR,EACAyR,KAEAD,KAjUAE,GAwDR,SAAmBvb,GACX6J,GACAzB,EAAQ0E,qBAAW7E,GAAQvC,MACvByD,EACAnJ,EAAOlC,OAAOuL,IAElBhB,EAAQ2E,mBAAS9E,KAEjBE,EAAQ0E,qBAAW7E,GACnBI,EAAQ2E,mBAAS9E,GAAQxC,MAAMwD,EAAQlJ,EAAOlC,OAAOuL,KAhErD4D,CAAUhC,GA6NlB,WACQpB,GACAvB,EAAI1S,OAAO,yBACNQ,KAAK,YADV,wBACwC4R,EADxC,OAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,sBACNQ,KAAK,YADV,sBACsCuT,EADtC,SAEKle,KAAK4c,KAEVC,EAAI1S,OAAO,yBACNQ,KAAK,YADV,wBACwC4R,EADxC,OAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,sBACNQ,KAAK,YADV,sBACsCuT,EADtC,SAEKle,KAAK4c,GACL5c,KAAKqwB,KAGVhR,IACID,GACAvC,EAAI5B,UAAU,sBAAsBgB,SAGxCmD,EAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,GACV3U,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,IA7PVmR,GAobR,WAEQuQ,GACAlkB,EAAI5B,UAAU,UAAUgB,SAE5B,IAAM+d,EAASnd,EAAI1S,OAAO,gBAAgB8Q,UAAU,UAEpDgmB,EAAkBpnB,gBA9eG,OAgfhBinB,EAAOl+B,OAAS,GAhfA,IAmfjBwb,GAvHAwjB,EAwHmB5H,EAxHS9e,KAAK6e,GAajC5Z,GAXJ4gB,EAAgBa,EACXvmB,QACArQ,OAAO,KACPL,KAAK,aAAa,gBAAGvJ,EAAH,EAAGA,IAAH,4BAA4Bqb,EAAOrb,GAAnC,QAClB6J,QAAQ,SAAS,IAGjBgQ,UAAU,QACVC,MAAK,qBAAGb,UAIRgB,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,IAAK,GACVA,KAAK,KAAK,SAACxK,GAAD,OAAO0gC,EAAQQ,GAASlhC,OAClCwK,KAAK,SAAUk2B,EAAQpnB,aACvB9O,KAAK,QAAQ,gBAAG22B,EAAH,EAAGA,MAAH,OAAehkB,EAAegkB,MAE5ChjB,GACA6B,EAAK7Z,MAAM,UApZF,KAqZJ0V,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAUohC,EAAgBphC,MAChCsiB,SAAS1D,GACTF,KAAKA,GACLsjB,MAAM,aAAcC,IAEzB3hB,EAAKxV,KAAK,SAAS,SAACxK,GAAD,OAAOqc,EAAOoD,GAASzf,QAwBlD,SAA0B4hC,GACtB,IAAIH,EAAYG,EAAgB7mB,KAAK6e,GAYjC5Z,GAVJ4gB,EAAgBa,EACXvmB,QACArQ,OAAO,KACPL,KAAK,aAAa,gBAAGvJ,EAAH,EAAGA,IAAH,0BAA0Bob,EAAOpb,GAAjC,UAClB6J,QAAQ,SAAS,IAGjBgQ,UAAU,QACVC,MAAK,qBAAGb,UAGRgB,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,KAAK,SAACxK,GAAD,OAAOygC,EAAQS,GAASlhC,OAClCwK,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,QAASi2B,EAAQnnB,WACtB9O,KAAK,QAAQ,gBAAG22B,EAAH,EAAGA,MAAH,OAAehkB,EAAegkB,MAE5ChjB,GACA6B,EAAK7Z,MAAM,UA1cF,KA2cJ0V,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAUohC,EAAgBphC,MAChCsiB,SAAS1D,GACTF,KAAKA,GACLsjB,MAAM,cAAeG,IAE1B7hB,EAAKxV,KAAK,UAAU,SAACxK,GAAD,OAAOoc,EAAcE,EAAOmD,GAASzf,OAsCzDwhB,CAAiBqY,GA3HzB,IACQ4H,EAaAzhB,EAiHJ6Z,EAAOxe,OAAOQ,aAAa1V,MAAM,UAAW,GAAG2V,SAtc3CgmB,GASR,WAwrBW52B,EAAQ2hB,GAtrBXnQ,EAAI1S,OAAO,gBACNyX,GAAG,aAAa,SAAUzhB,IA2lBvC,SAAyBqI,EAAGrI,GACxBsf,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,IA3lBnCsZ,CAAgBpe,KAAMvD,MAEzByhB,GAAG,YAAY,SAAUzhB,IA+kBtC,SAAwBqI,EAAGrI,GACvB0c,EAAI1S,OAAO,mBAAmBQ,KAAK,YAAa,sBAChD8U,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,IAhlBlCwZ,CAAete,KAAMvD,MAExByhB,GAAG,aAAa,SAAUzhB,GA2hBvC,IAAyBqI,EAKjBsK,EACApI,EALJ,IAAKomB,EAAQoG,EACTxF,EAiGqBwQ,EAAiBC,EAlG1C,EAAuBC,GADF55B,EA1hBO9E,MA2hB5B,YAAKotB,EAAL,KAAaoG,EAAb,MACIxF,EAAYtT,EACNikB,GAAqBnL,GACrB8F,GAAoBlM,MAMtB1S,GACAtL,EAAIge,EAASrf,EAAOC,KACpBhH,EAAI+R,EAAOiV,EAAUtwB,KAAOqb,EAAOhD,YAAc,IAEjD3G,EAAI0J,EAAOkV,EAAUtwB,KAAOw/B,EAAQlP,EAAUyP,IAC9Cz2B,EAAIwsB,EAASzlB,EAAOyL,QAoFHglB,EAlFDpvB,EAkFkBqvB,EAlFfz3B,EAmF3BmS,EAAI1S,OAAO,mBAAmBQ,KAC1B,YADJ,oBAEiBu3B,EAFjB,YAEoCC,EAFpC,MAhFI1iB,GAAWzf,KACP,kBACAwI,EACAkpB,EACApU,EACAxK,EACApI,OAljBCkX,GAAG,SAAS,SAAUzhB,GA2jBnC,IAA2BqI,EACvB,IAAKsoB,EAAQoG,EACTxF,EADJ,EAAuB0Q,GADA55B,EA1jBO9E,MA2jB9B,YAAKotB,EAAL,KAAaoG,EAAb,KACIxF,EAAYtT,EACVikB,GAAqBnL,GACrB8F,GAAoBlM,GAE1BrR,GAAWzf,KAAK,cAAewI,EAAGkpB,EAAW/O,gBAAMna,OA5jBnDqU,EAAI5B,UAAU,QACT2G,GAAG,aAAa,SAAUzhB,IA8fnC,SAA6BqI,EAAGrI,GAC5BgK,iBAAO3B,GAAGmC,KAAK,QAAQ,kBAAMkU,gBAAMvB,EAAend,EAAEmhC,QAAQxiB,YA9fpDwjB,CAAoB5+B,KAAMvD,MAE7ByhB,GAAG,YAAY,SAAUzhB,IAqgBlC,SAA4BqI,EAAGrI,GAC3BgK,iBAAO3B,GAAGmC,KAAK,QAAQ,kBAAM2S,EAAend,EAAEmhC,UArgBtCiB,CAAmB7+B,KAAMvD,MA9B7BqiC,OAuCR,SAASnS,GAAkBtV,GACvBA,EACKE,UAAU,cACVtQ,KACG,YAHR,oBAIqBu2B,EAAe,EAJpC,aAI8CA,EAAe,EAJ7D,MAqUJ,SAAStR,KACQzT,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBA/GL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GAqJpB,SAASsT,KACQzT,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBA3IL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,GAsKpB,SAASy3B,GAAiBK,GACtB,OAAO9f,gBAAM8f,GAQjB,SAASzF,GAAoBlM,GACzB,IAAI4R,EAAiB5R,EAASrf,EAAOC,KACjC0oB,EAAUwG,EAAQnnB,YAClBkpB,EAAU,GAwBd,OAtBA5I,EAAO1zB,SAAQ,SAAU6U,GACrB,IAAI0nB,EAAQ1nB,EAAKb,OAAO4V,MACpB,SAAC4S,GAAD,OACIrpB,KAAKqQ,IACD6Y,GACIlmB,EAAOqmB,EAAG7jB,IAAc4hB,EAAQiC,EAAG1B,MAE3C3nB,KAAKqQ,IACD6Y,EACI9B,EAAQiC,EAAG1B,IACX3kB,EAAOqmB,EAAG7jB,KACVob,MAIZwI,IACAA,EAAMvoB,OAASa,EAAKb,OACpBuoB,EAAMxhC,IAAMwhC,EAAMxiC,KAClBuiC,EAAQp5B,KAAKq5B,OAIdD,EAAQ//B,OAAS+/B,EAAQ,QAAK3d,EAQzC,SAASqd,GAAqBnL,GAC1B,IAAI4L,EAAiB5L,EAASzlB,EAAOyL,OACjCkd,EAAU3d,EAAOhD,YACjBkpB,EAAU,GAkBd,OAhBA5I,EAAOxyB,KAAI,SAAU2T,GACjB,IAAI0nB,EAAQ1nB,EAAKb,OAAO4V,MACpB,SAAC4S,GAAD,OACIrpB,KAAKqQ,IAAIiZ,GAAkBrmB,EAAOomB,EAAG7jB,MACrCxF,KAAKqQ,IACDiZ,EAAiBrmB,EAAOomB,EAAG7jB,KAAyB,EAAVob,MAIlDwI,IACAA,EAAMvoB,OAASa,EAAKb,OACpBuoB,EAAMxhC,IAAMwhC,EAAMxiC,KAClBuiC,EAAQp5B,KAAKq5B,OAIdD,EAAQ//B,OAAS+/B,EAAQ,QAAK3d,EAgGzC,SAAS8c,GAAoB3hC,GACzB,IAAM6J,EAAOG,iBAAOzG,MACd7D,EAAIkjC,4BAAiB,EAAGvmB,EAAOoD,GAASzf,KACxC6iC,EAAIC,6BAAkB,EAAG,GAE/B,OAAO,SAAUliC,GACbiJ,EAAKW,KAAK,QAAS9K,EAAEkB,IAAIuF,MAAM,UAAW08B,EAAEjiC,KAmFpD,SAASihC,GAAkB7hC,GACvB,IAAI6J,EAAOG,iBAAOzG,MACd7D,EAAIkjC,4BAAiB,EAAGxmB,EAAcE,EAAOmD,GAASzf,KACtDuK,EAAIq4B,4BAAiBxmB,EAAaE,EAAOmD,GAASzf,KAClD6iC,EAAIC,6BAAkB,EAAG,GAE7B,OAAO,SAAUliC,GACbiJ,EAAKW,KAAK,IAAKD,EAAE3J,IAAI4J,KAAK,SAAU9K,EAAEkB,IAAIuF,MAAM,UAAW08B,EAAEjiC,KA4YrE,OAjYA5C,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAaftgB,GAAQ8f,mBAAqB,SAAU4E,GACnC,OAAKla,UAAU/F,QAGfqb,EAAqB4E,EAEdnf,MAJIua,GAaf9f,GAAQijC,qBAAuB,SAAUve,GACrC,OAAKla,UAAU/F,QAGfw+B,GAAuBve,EAEhBnf,MAJI09B,IAcfjjC,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAcfjf,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IAUpD5N,GAAQgjC,WAAa,SAAUte,GAC3B,OAAKla,UAAU/F,QAGfu+B,EAAate,EACbjO,GAA0B,SAEnBlR,MALIy9B,GAcfhjC,GAAQsjB,KAAO,SAAUoB,GACrB,OAAKla,UAAU/F,QAGf6e,EAAOoB,EAEAnf,MAJI+d,GAaftjB,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,GAAQigB,aAAe,SAAUyE,GAC7B,OAAKla,UAAU/F,QAGfwb,EAAeyE,EAERnf,MAJI0a,GAefjgB,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,GAAauE,EAENnf,MAJI4a,IAYfngB,GAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,GAAQ6gB,UAAY,SAAU6D,GAC1B,OAAKla,UAAU/F,QAGfoc,EAAY6D,EACZjO,GAA0B,QAEnBlR,MALIsb,GAcf7gB,GAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAefzf,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAW5C3C,GAAQ6uB,iBAAmB,SAAUnK,GACjC,OAAKla,UAAU/F,QAGfoqB,EAAmBnK,EAEZnf,MAJIspB,GAcf7uB,GAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAmBf5gB,GAAQ+kB,YAAc,SAAUL,GAC5B,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAafpW,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAaflN,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAcfvf,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,EAAawD,EAENnf,MAJI2b,GAeflhB,GAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,EAAmBuD,EAEZnf,MAJI4b,GAafnhB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAaftf,GAAQ+iC,gBAAkB,SAAUre,GAChC,OAAKla,UAAU/F,QAGfs+B,EAAkBre,EAEXnf,MAJIw9B,GAOR/iC,G,qkBChsCI,SAASC,KACpB,IASIoe,EACAG,EACAF,EACAG,EAWA4G,EACAuW,EAGAld,EACAP,EACAC,EACArB,EACA8lB,EACAkC,EACAnC,EAGA1hB,EACAD,EAYA6hB,EAjDAxvB,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EAKZc,EAAqB,GAGrB1J,EAAS,KACTiL,EAAkB/K,EAClBgJ,EAAS,EACTC,EAAS,EACTC,EAA2B,EAC3BP,EAAcC,EAAYnR,aAAaC,YACvCmR,EAAiB,KAGjBiB,EAAOC,gBACPJ,GAAe,EAQf+kB,GAAoB,EACpBnW,EAAmB,IAGnB1N,GAAoB,GAEpBpB,EAEU,EAFVA,EAGY,EAKZO,EAAoB/I,GAEpB+L,EAAO,KACPzC,EAAY,OACZD,EAAa,QACbqkB,EAAa,QACbxlB,EArGc,KAuGd+B,EAAU,SAACzE,GAAD,OAAUA,EAAK8D,IAEzBqkB,GAAW,SAACnoB,GAAD,OAAUA,EAAKkoB,IAC1BE,GAAwB,SAACC,GAAD,OAAUC,MAAMD,IAAQA,EAAM,EAAI,EAAIA,GAC9DjlB,IAAa,EAEbmB,GAAaC,mBACT,kBACA,iBACA,kBACA,eASR,SAASvhB,GAAQ8hB,GACT1L,IACAiL,EAAkBlL,GAAiBC,IAGvC0L,EAAWzU,MAAK,SAAU0U,GAqM9B,IArFQ6b,EACA0H,GAhHAnnB,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAmpBnD,SAAqBhC,GACjBgoB,EApxBK,SAACrJ,GAAD,OACTA,EAAOjS,QAAO,SAAClhB,EAAMozB,EAAK13B,GAAZ,OAAoBA,EAAIyC,QAAQ6B,IAASozB,KAmxB1CF,CAAK1e,EAAK3T,KAAI,qBAAGy0B,UAEtBmH,IACAD,EAASA,EAAO54B,WAGpB02B,EAAkBtS,kBACbttB,IAAIue,GACJ4hB,QAAO,SAAUlnB,GACd,IAAImnB,EAAM,GAUV,OARAnnB,EAAOhU,SAAQ,SAACk1B,GACRA,GAASA,EAAM6H,KACf5B,EAAIjG,EAAM6H,IA1rBf,SAACloB,GAAD,OAAUA,EAAK6D,GA0rBea,CAAS2b,OAI1CiG,EAAInnB,OAASA,EAENmnB,KAEV/a,QAAQvL,GACR3T,KAAI,SAAU2T,GACX,OAAO3a,OAAO86B,OACV,GACA,CACIznB,MAAO4oB,cAAIiF,kBAAQvmB,EAAKpa,MAAOoiC,IAC/B9hC,IAAK8Z,EAAK9Z,KAEd8Z,EAAKpa,UA9qBb4gC,CAFAxmB,EAAiBgF,EAmMDM,QAAO,SAACC,EAAKtgB,GAQ7B,OAPAA,EAAEW,OAASX,EAAE4e,GACb5e,EAAE67B,MAAQ77B,EAAEijC,GAGZjjC,EAAEsuB,UAAYtuB,EAAEijC,GAChBjjC,EAAEC,KAAOD,EAAE6e,GAEX,cAAWyB,GAAX,CAAgBtgB,MACjB,KAhCP,SAAkBgb,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,0BAA0B,GA7F/C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,YAGmCD,EAAOuL,IAH1C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EAAUnQ,OAAO,KAAKC,QAAQ,qBAAqB,GACnDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,gBAAgB,GAC9CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GA8E5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GArLhBuR,CAASld,MACLyZ,GAkQRN,EAAI1S,OAAO,wBAAwBoF,KAAKqC,IAlDxCiL,EAAI1S,OAAO,4BAA4B8R,SArF3C,WACI,IAAI0lB,GAgZE7gB,EAAmB,IAAIC,IACzBigB,EAAgBz5B,KAAI,qBAAGqM,UAGG,IAA1BkN,EAAiBnO,MAAcmO,EAAiBE,IAAI,GAG7C,EAEAzN,cAAIytB,EAAgBz5B,KAAI,qBAAGqM,WAV1C,IACUkN,EA9YF1C,GACA5B,EAAStD,wBACJwB,OAAO,CAAC,EAAGinB,IACXzgB,WAAW,CAAC,EAAG5E,EAAa,IAGjCG,EAAS0E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,IAChBuB,WAAW,CAAC3E,EAAa,IACzBlY,QAAQ4Z,KAEbzB,EAAS2E,sBACJzG,OAAOQ,EAAK3T,IAAIoY,IAChBuB,WAAW,CAAC,EAAG5E,IACfjY,QAAQ4Z,GAEbxB,EAASvD,wBACJwB,OAAO,CAAC,EAAGinB,IACXzgB,WAAW,CAAC3E,EAAa,IACzB6S,QAGT5L,EAAa6B,yBACRxL,MAAMuD,GACN1C,OAAOQ,EAAK3T,IAAI87B,KAErB/lB,EACIA,GACAkG,EACK9I,OAAOQ,EAAK3T,IAAI87B,KAChB3oB,SACA8F,QAAO,SAAC8E,EAAMC,GAGX,OAFAD,EAAKC,GAAQ/B,EAAW+B,GAEjBD,IACR,IA3JPlE,GAmGA2a,EAASC,mBAAQtyB,KAAKw5B,GACtBO,EAAczC,EAAgBz5B,KAAI,SAACge,GAC/B,IAAIic,EAAM,GAMV,OAJA0B,EAAO78B,SAAQ,SAACjF,GACZogC,EAAIpgC,GAAOmkB,EAAKnkB,MAGbb,OAAO86B,OAAO,GAAI9V,EAAMic,MAGvCzH,EAASgC,EAAO0H,GAqJpB,WACI5mB,EAAI1S,OAAO,qBAAqB8Q,UAAU,QAAQgB,UAErC,eAATwF,GAAkC,SAATA,IACzBmO,KAGS,aAATnO,GAAgC,SAATA,GACvBoO,KAGAzR,EACAyR,KAEAD,KA/QAE,GAoDR,SAAmBvb,GACX6J,GACAzB,EAAQ0E,qBAAW7E,GAAQvC,MACvByD,EACAnJ,EAAOlC,OAAOuL,IAElBhB,EAAQ2E,mBAAS9E,KAEjBE,EAAQ0E,qBAAW7E,GACnBI,EAAQ2E,mBAAS9E,GAAQxC,MAAMwD,EAAQlJ,EAAOlC,OAAOuL,KA5DrD4D,CAAUhC,GA+MlB,WACQpB,GACAvB,EAAI1S,OAAO,yBACNQ,KAAK,YADV,wBACwC4R,EADxC,OAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,sBACNQ,KAAK,YADV,sBACsCuT,EADtC,SAEKle,KAAK4c,KAEVC,EAAI1S,OAAO,yBACNQ,KAAK,YADV,wBACwC4R,EADxC,OAEKvc,KAAK2c,GAEVE,EAAI1S,OAAO,sBACNQ,KAAK,YADV,sBACsCuT,EADtC,SAEKle,KAAK4c,GACL5c,KAAKqwB,KAGVhR,IACID,GACAvC,EAAI5B,UAAU,sBAAsBgB,SAGxCmD,EAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,GACV3U,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,IA/OVmR,GAqaR,WAEQuQ,GACAlkB,EAAI5B,UAAU,UAAUgB,SAG5B,IAAI+d,EAASnd,EAAI1S,OAAO,gBAAgB8Q,UAAU,UAElDgmB,EAAkBpnB,gBA/dG,OAiehBkgB,EAAO,GAAGn3B,OAAS,GAjeH,IAqejBwb,GA5JAwjB,EA6JmB5H,EA7JS9e,KAAK6e,GAajC5Z,GAXJ4gB,EAAgBa,EACXvmB,QACArQ,OAAO,KACPL,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MACzC6J,QAAQ,SAAS,IAGjBgQ,UAAU,QACVC,MAAK,SAAC/a,GAAD,OAAOujC,GAAsBvjC,MAIlCkb,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,KAAK,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE,OAC1BwK,KAAK,KAAK,SAACxK,GAAD,OAAOsc,EAAOtc,EAAE+a,KAAK9Z,QAC/BuJ,KAAK,SAAU8R,EAAOhD,aAEvB6E,GACA6B,EAAK7Z,MAAM,UAhWF,KAiWJ0V,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAUohC,EAAgBphC,MAChCsiB,SAAS1D,GACTF,KAAKA,GACLsjB,MAAM,aAAcC,IAEzB3hB,EAAKxV,KAAK,SAAS,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE,GAAKA,EAAE,QA0ClD,SAA0B4hC,GACtB,IAAIH,EAAYG,EAAgB7mB,KAAK6e,GAajC5Z,GAXJ4gB,EAAgBa,EACXvmB,QACArQ,OAAO,KACPL,KAAK,QAAQ,gBAAGvJ,EAAH,EAAGA,IAAH,OAAakc,EAAelc,MACzC6J,QAAQ,SAAS,IAGjBgQ,UAAU,QACVC,MAAK,SAAC/a,GAAD,OAAOujC,GAAsBvjC,MAIlCkb,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,KAAK,SAACxK,GAAD,OAAOqc,EAAOrc,EAAE+a,KAAK9Z,QAC/BuJ,KAAK,KAAK,SAACxK,GAAD,OAAOsc,EAAOtc,EAAE,OAC1BwK,KAAK,QAAS6R,EAAO/C,WAEtB6E,GACA6B,EAAK7Z,MAAM,UAxaF,KAyaJ0V,aACAoG,OAAM,SAAClG,EAAGrc,GAAJ,OAAUohC,EAAgBphC,MAChCsiB,SAAS1D,GACTF,KAAKA,GACLsjB,MAAM,cAAeG,IAE1B7hB,EAAKxV,KAAK,UAAU,SAACxK,GAAD,OAAOsc,EAAOtc,EAAE,IAAMsc,EAAOtc,EAAE,OA0DnDwhB,CAAiBqY,GAhKzB,IACQ4H,EAaAzhB,EAqJJ6Z,EAAOxe,OAAOQ,aAAa1V,MAAM,UAAW,GAAG2V,SAxb3C0nB,GASR,WAoqBWt4B,EAAQ2hB,GAlqBXnQ,EAAI1S,OAAO,gBACNyX,GAAG,aAAa,SAAUzhB,IAolBvC,SAAyBqI,EAAGrI,GACxBsf,GAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,IAplBnCsZ,CAAgBpe,KAAMvD,MAEzByhB,GAAG,YAAY,SAAUzhB,IAwkBtC,SAAwBqI,EAAGrI,GACvB0c,EAAI1S,OAAO,mBAAmBQ,KAAK,YAAa,sBAChD8U,GAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,IAzkBlCwZ,CAAete,KAAMvD,MAExByhB,GAAG,aAAa,SAAUzhB,GAmhBvC,IAAyBqI,EAKjBsK,EACApI,EALJ,IAAKomB,EAAQoG,EACTxF,EAiFqBwQ,EAAiBC,EAlF1C,EAAuBC,GADF55B,EAlhBO9E,MAmhB5B,YAAKotB,EAAL,KAAaoG,EAAb,MACIxF,EAAYtT,EACNikB,GAAqBnL,GACrB8F,GAAoBlM,MAMtB1S,GACAtL,EAAIge,EAASrf,EAAOC,KACpBhH,EAAI+R,EAAOiV,EAAUtwB,KAAOqb,EAAOhD,YAAc,IAEjD3G,EAAI0J,EAAOkV,EAAUtwB,KAAOqQ,EAAOC,KACnChH,EAAIwsB,EAASzlB,EAAOyL,QAoEHglB,EAlEDpvB,EAkEkBqvB,EAlEfz3B,EAmE3BmS,EAAI1S,OAAO,mBAAmBQ,KAC1B,YADJ,oBAEiBu3B,EAFjB,YAEoCC,EAFpC,MAhEI1iB,GAAWzf,KACP,kBACAwI,EACAkpB,EACApU,EACAxK,EACApI,OA1iBCkX,GAAG,SAAS,SAAUzhB,GAojBnC,IAAqBqI,EACjB,IAAKsoB,EAAQoG,EACTxF,EADJ,EAAuB0Q,GADN55B,EAnjBO9E,MAojBxB,YAAKotB,EAAL,KAAaoG,EAAb,KACIxF,EAAYtT,EACVikB,GAAqBnL,GACrB8F,GAAoBlM,GAE1BrR,GAAWzf,KAAK,cAAewI,EAAGkpB,EAAW/O,gBAAMna,OArjBnDqU,EAAI5B,UAAU,QACT2G,GAAG,YAAa0gB,IAChB1gB,GAAG,WAAY2gB,IA3BhBC,OAmCR,SAASnS,GAAkBtV,GACvBA,EACKE,UAAU,cACVtQ,KACG,YAHR,qBAxHmB,GAwHnB,cAzHmB,EAyHnB,MAsRJ,SAASilB,KACQzT,GAAeM,GACvB5C,MAAM,CAAC,EAAGyC,IACVtC,UAAU,SACVC,MAAMwD,EAEXgE,CAAK5E,EAAI1S,OAAO,sBAUL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GA8CpB,SAASsT,KACQzT,GAAaI,GACrB3C,MAAM,CAAC,EAAG0C,IACVvC,UAAU,SACVC,MAAMyD,EAEX+D,CAAK5E,EAAI1S,OAAO,sBAUL0S,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM4R,GACX5R,KAAK,KAAM,GACXA,KAAK,KAAM,GAoCpB,SAAS+4B,GAAsBvjC,GAC3B,OAAOA,EAAEoH,KAAI,SAACq8B,GACV,IAAK,IAAI/jC,EAAI,EAAGA,EAAI+jC,EAAShhC,OAAQ/C,IACjC+jC,EAAS/jC,GAAKyjC,GAAsBM,EAAS/jC,IAGjD,OAAO+jC,KAUf,SAASxB,GAAiBK,GACtB,OAAO9f,gBAAM8f,GAQjB,SAASzF,GAAoBlM,GACzB,IAAM4R,EAAiB5R,EAASrf,EAAOC,KAUvC,OARgBsvB,EAAgB/Q,MAAK,YAAa,IAAV7uB,EAAU,EAAVA,IAC9ByiC,EAAWrnB,EAAOpb,GAClB0iC,EAASD,EAAWrnB,EAAO/C,YAGjC,OAAOipB,GAAkBmB,GAAYnB,EAAiBoB,KAW9D,SAASzB,GAAqBnL,GAC1B,IAAM4L,EAAiB5L,EAASzlB,EAAOuL,IAUvC,OARgBgkB,EAAgB/Q,MAAK,YAAa,IAAV7uB,EAAU,EAAVA,IAC9ByiC,EAAWpnB,EAAOrb,GAClB0iC,EAASD,EAAWpnB,EAAOhD,YAGjC,OAAOqpB,GAAkBe,GAAYf,EAAiBgB,KA6B9D,SAASxB,KAAsB,WAC3Bn4B,iBAAOzG,MAAMiH,KAAK,QAAQ,kBACtBkU,gBAAM1U,iBAAO,EAAK2R,YAAYnR,KAAK,SAASmU,YAQpD,SAASyjB,KAAqB,WAC1Bp4B,iBAAOzG,MAAMiH,KAAK,QAAQ,kBAAMR,iBAAO,EAAK2R,YAAYnR,KAAK,WA4EjE,SAASm3B,GAAoB3hC,GACzB,IAAI6J,EAAOG,iBAAOzG,MACd7D,EAAIkjC,4BAAiB,EAAGvmB,EAAOrc,EAAE,GAAKA,EAAE,KACxC6iC,EAAIC,6BAAkB,EAAG,GAE7B,OAAO,SAAUliC,GACbiJ,EAAKW,KAAK,QAAS9K,EAAEkB,IAAIuF,MAAM,UAAW08B,EAAEjiC,KAsEpD,SAASihC,GAAkB7hC,GACvB,IAAM4jC,EAAWtnB,EAAOtc,EAAE,IAAMsc,EAAOtc,EAAE,IAErC6J,EAAOG,iBAAOzG,MACd7D,EAAIkjC,4BAAiB,EAAGO,GAAsBS,IAC9Cf,EAAIC,6BAAkB,EAAG,GAE7B,OAAO,SAAUliC,GACbiJ,EAAKW,KAAK,SAAU9K,EAAEkB,IAAIuF,MAAM,UAAW08B,EAAEjiC,KA+ZrD,OApZA5C,GAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAaftgB,GAAQ8f,mBAAqB,SAAU4E,GACnC,OAAKla,UAAU/F,QAGfqb,EAAqB4E,EAEdnf,MAJIua,GAcf9f,GAAQ4kB,SAAW,SAAUF,GACzB,OAAKla,UAAU/F,QAGf0a,EAAiBuF,EAEVnf,MAJI4Z,GAafnf,GAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAcfjf,GAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,GAAS0e,EAAKhO,EAAU9C,IASpD5N,GAAQsjB,KAAO,SAAUoB,GACrB,OAAKla,UAAU/F,QAGf6e,EAAOoB,EAEAnf,MAJI+d,GAaftjB,GAAQ6kB,cAAgB,SAAUH,GAC9B,OAAKla,UAAU/F,QAIXgb,EADAiF,EAr7Bc,IACJ,KA07BPnf,MA37BW,MAm7BPka,GAiBfzf,GAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,GAAQglC,kBAAoB,SAAUtgB,GAClC,OAAKla,UAAU/F,QAGfugC,EAAoBtgB,EAEbnf,MAJIy/B,GAefhlC,GAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,GAAauE,EAENnf,MAJI4a,IAafngB,GAAQigB,aAAe,SAAUyE,GAC7B,OAAKla,UAAU/F,QAGfwb,EAAeyE,EAERnf,MAJI0a,GAafjgB,GAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,GAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,GAAQ6gB,UAAY,SAAU6D,GAC1B,OAAKla,UAAU/F,QAGfoc,EAAY6D,EACZjO,GAA0B,QAEnBlR,MALIsb,GAcf7gB,GAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAefzf,GAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,GAAWmC,GAAGnH,MAAMgF,GAAY9W,WAE5C,OAAO7H,IAAU2e,GAAathB,GAAU2C,GAU5C3C,GAAQwf,yBAA2B,SAAUkF,GACzC,OAAKla,UAAU/F,QAGf+a,EAA2BkF,EAEpBnf,MAJIia,GAcfxf,GAAQilC,WAAa,SAAUvgB,GAC3B,OAAKla,UAAU/F,QAGfwgC,EAAavgB,EACbjO,GAA0B,SAEnBlR,MALI0/B,GAefjlC,GAAQ6uB,iBAAmB,SAAUnK,GACjC,OAAKla,UAAU/F,QAGfoqB,EAAmBnK,EAEZnf,MAJIspB,GAcf7uB,GAAQ4gB,WAAa,SAAU8D,GAC3B,OAAKla,UAAU/F,QAGfmc,EAAa8D,EACbjO,GAA0B,SAEnBlR,MALIqb,GAkBf5gB,GAAQ+kB,YAAc,SAAUL,GAC5B,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAafpW,GAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAaflN,GAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAcfvf,GAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,EAAawD,EAENnf,MAJI2b,GAeflhB,GAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,EAAmBuD,EAEZnf,MAJI4b,GAafnhB,GAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAORtf,G,qkBC/sCI,SAASC,KACpB,IAQIye,EACA3B,EACAoB,EACAC,EAQAiH,EAIAwgB,EAvBAvyB,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IAMT40B,EAAU,GAOV7mB,EAAcC,EAAYnR,aAAaU,IACvC6R,EAAoB/I,GACpB4I,GAAa,EAGb4lB,EAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAMjDzkB,EAAaC,mBACT,kBACA,iBACA,kBACA,eAEJE,EAAW,SAAC,GAAD,SAAG9e,OAQlB,SAAS3C,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GA6D9B,IA2EUikB,EACAC,EA2BFC,EAnKAnpB,EAAiBgF,EA6DDM,QAChB,SAACC,EAAD,OAAQuI,EAAR,EAAQA,IAAKD,EAAb,EAAaA,KAAMjoB,EAAnB,EAAmBA,MAAnB,oBACO2f,GADP,CAEI,CACIuI,KAAMA,EACND,MAAOA,EACPjoB,OAAQA,OAGhB,IApEAwb,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OA4E/CsG,EAAatK,wBACRW,MAAM,CAACuD,EAAY,GAAIA,EAAYA,EAAYxa,OAAS,KACxD8X,OAAOse,iBAAO9d,EAAM0E,IACpBwG,YAAYke,mBA/DrB,SAAkBnpB,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,sBAAsB,GAiB3C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,aAGoCD,EAAOuL,IAH3C,MAKhB7B,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,qBAAqB,GACnDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAxB5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAzBhBuR,CAASld,MAiIPygC,EAAiBtnB,EAAI1S,OAAO,qBAC5Bi6B,EAAsBJ,GAAeE,EAE/BrnB,EACP1S,OAAO,qBACP8Q,UAAU,cACVC,KAAKkpB,GAGL/oB,QACArQ,OAAO,QACPd,MAAK,SAACq6B,GAAD,OAAWA,KAChB55B,KAAK,IAAK,GACVA,KAAK,KAAK,SAACxK,EAAGN,GAAJ,OAAUA,EAAIokC,KACxB39B,MAAM,cAAe,SACrBA,MAAM,oBAAqB,WAC3BqE,KAAK,QAAS,0BAEnBw5B,EAAex5B,KACX,YADJ,qBA9KgB,GA8KhB,aAEoCs5B,EAAU,EAF9C,MAUII,EAAkBxnB,EAAI1S,OAAO,sBAEpB0S,EACR1S,OAAO,sBACP8Q,UAAU,eACVC,KAAKzF,IAGL4F,QACArQ,OAAO,QACPd,MAAK,SAACq6B,GAAD,OAAWA,KAChB55B,KAAK,IAAK,GACVA,KAAK,KAAK,SAACxK,EAAGN,GAAJ,OAAUA,EAAIokC,KACxB39B,MAAM,cAAe,UACrBA,MAAM,oBAAqB,WAC3BqE,KAAK,QAAS,cAEnB05B,EAAgB15B,KACZ,YADJ,oBAEiBs5B,EAAU,EAF3B,cAvMkB,GAuMlB,MA5FJ,WAGI,IAAMO,EAFE3nB,EAAI1S,OAAO,gBAAgB8Q,UAAU,QAAQC,KAAKA,GAGrDG,QACArQ,OAAO,QACPC,QAAQ,OAAO,GACfN,KAAK,QAASs5B,GACdt5B,KAAK,SAAUs5B,GACft5B,KAAK,KAAK,qBAAGoe,KAAkBkb,KAC/Bt5B,KAAK,KAAK,qBAAGqe,IAAgBib,KAC7B39B,MAAM,UAnIS,IAoIfA,MAAM,OAlIO,WAmIbA,MAAM,SAlIM,WAmIZA,MAAM,eAvIK,GAwIXsb,GAAG,aAAa,SAAUzhB,EAAG8xB,EAAOwS,IAmF7C,SAAyBj8B,EAAGrI,EAAGskC,EAASnoB,EAAYC,GAChDkD,EAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IArFIuF,CAAgBpe,KAAMvD,EAAGskC,EAASnoB,EAAYC,MAEjDqF,GAAG,aAAa,SAAUzhB,IAuFnC,SAAyBqI,EAAGrI,EAAGmc,EAAYC,GACvCkD,EAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IAzFIwF,CAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,EAAG8xB,EAAOwS,IA2F5C,SAAwBj8B,EAAGrI,EAAGskC,EAASnoB,EAAYC,GAC/CkD,EAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC9C8T,EACAC,IA7FIyF,CAAete,KAAMvD,EAAGskC,EAASnoB,EAAYC,MAEhDqF,GAAG,SAAS,SAAUzhB,IA+F/B,SAAqBqI,EAAGrI,EAAGmc,EAAYC,GACnCkD,EAAWzf,KAAK,cAAewI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC3C8T,EACAC,IAjGI0F,CAAYve,KAAMvD,EAAGmc,EAAYC,MAGrC+B,EACAkmB,EACKxoB,aACAmG,SAAS1D,GACTnY,MAAM,QAAQ,gBAAGxF,EAAH,EAAGA,MAAH,OAAe0iB,EAAW1iB,MACxCwF,MAAM,UAxJG,GA0Jdk+B,EACKl+B,MAAM,QAAQ,gBAAGxF,EAAH,EAAGA,MAAH,OAAe0iB,EAAW1iB,MACxCwF,MAAM,UA5JG,GA+JlBk+B,EAAYhpB,OAAOS,SAvHfyoB,MAiWR,OA7IAvmC,EAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAaftgB,EAAQ8lC,QAAU,SAAUphB,GACxB,OAAKla,UAAU/F,QAGfqhC,EAAUphB,EAEHnf,MAJIugC,GAaf9lC,EAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAafjf,EAAQwQ,YAAc,SAAUE,EAAU9C,GACtC4C,EAAY3O,KAAK7B,EAAS0e,EAAKhO,EAAU9C,IAS7C5N,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,EAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAafngB,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAkBftT,EAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,EAAWmC,GAAGnH,MAAMgF,EAAY9W,WAE5C,OAAO7H,IAAU2e,EAAathB,EAAU2C,GAS5C3C,EAAQ6lC,YAAc,SAAUnhB,GAC5B,OAAKla,UAAU/F,QAGfohC,EAAcnhB,EAEPnf,MAJIsgC,GAaf7lC,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAORlN,E,qkBCxZI,SAASC,KACpB,IAUI8c,EACAoB,EACAC,EACAC,EACAC,EAEAE,EACAuC,EACAD,EACArC,EACAyC,EACAD,EAUAvC,EAGA8nB,EACAC,EAnCAnzB,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EACZoB,EAAOC,gBAMPf,EAAS,EAOT0B,EAAmB,GACnBG,GAAoB,GACpBpB,EAEU,EAYVuB,EAAaC,mBACT,kBACA,iBACA,mBAGJmlB,EAAkBxyB,iBAAO,MAEzByyB,EAAS,SAAC,GAAD,SAAG1jC,KACZwe,EAAW,SAAC,GAAD,SAAG9e,OASlB,SAAS3C,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GA6G9B,IA4EQ6kB,GAvLAzoB,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EAAiBgF,EA0GDM,QAAO,SAACC,EAAKtgB,GAI7B,OAHAA,EAAEW,OAASX,EAAC,MACZA,EAAEiB,IAAM6C,OAAO9D,EAAC,KAEhB,cAAWsgB,GAAX,CAAgBtgB,MACjB,IA5GC2O,QAAQgG,KACJ,6GAgFZ,SAAkBqG,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,yBAAyB,GA/C9C,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,aAGoCD,EAAOuL,IAH3C,MAKhBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,oBAAoB,GAClDkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EACKnQ,OAAO,KACPC,QAAQ,qBAAqB,GAC7BD,OAAO,KACPC,QAAQ,gBAAgB,GAC7BkQ,EACKnQ,OAAO,KACPC,QAAQ,qBAAqB,GAC7BD,OAAO,KACPC,QAAQ,gBAAgB,GAC7BkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GA6B5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAzFhBuR,CAASld,MACLyZ,GAqKRN,EAAI1S,OAAO,wBAAwBoF,KAAKqC,IAtDxCiL,EAAI1S,OAAO,4BAA4B8R,SAlDvCO,EAAS2E,sBACJzG,OAAOQ,EAAK3T,IAAIu9B,IAChB5jB,WAAW,CAAC,EAAG5E,IACf0oB,aAAa,GAElBvoB,EAASvD,wBACJwB,OAAO,CAAC,EAAGnH,cAAI2H,EAAM0E,KACrBsB,WAAW,CAAC3E,EAAa,IAhD9BI,EAAQ0E,qBAAW7E,GAEnBI,EAAQ2E,mBAAS9E,GACZxC,MAAMwD,GACNiS,YA/DU,GAgEVL,WAAWwV,GA4LpB,WACQF,GACA9nB,EAAI5B,UAAU,yBAAyBgB,SAEvC2oB,GACA/nB,EAAI5B,UAAU,oBAAoBgB,SAGtC0oB,EAAgB9nB,EACX1S,OAAO,qBACP8Q,UAAU,6BACVC,KAAKuB,EAAOxC,MAAMwD,IAClBpC,QACArQ,OAAO,QACPL,KAAK,QAAS,wBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,MACzBwK,KAAK,MAAM,SAACxK,GAAD,OAAOsc,EAAOtc,MAE1BykC,GACA/nB,EAAI5B,UAAU,oBAAoBgB,SAItC2oB,EAAW/nB,EACN1S,OAAO,qBACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAMuT,GACXvT,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GA/OZuT,IAoKAiV,EAAQloB,EAAI1S,OAAO,gBAAgB8Q,UAAU,SAASC,KAAKA,IAI1DG,QACArQ,OAAO,QACPC,QAAQ,QAAQ,GAChBN,KAAK,IAAK2R,GACV3R,KAAK,KAAK,gBAAG7J,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MAChC6J,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,UAAU,SAACxK,GAAD,OAAOoc,EAAcE,EAAOtc,EAAEW,UAC7C8gB,GAAG,aAAa,SAAUzhB,IA0EnC,SAAyBqI,EAAGrI,EAAGmc,EAAYC,GACvCkD,EAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IA5EIuF,CAAgBpe,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,aAAa,SAAUzhB,IAmFnC,SAAyBqI,EAAGrI,EAAGmc,EAAYC,GACvCkD,EAAWzf,KAAK,kBAAmBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC/C8T,EACAC,IArFIwF,CAAgBre,KAAMvD,EAAGmc,EAAYC,MAExCqF,GAAG,YAAY,SAAUzhB,IA4FlC,SAAwBqI,EAAGrI,EAAGmc,EAAYC,GACtCkD,EAAWzf,KAAK,iBAAkBwI,EAAGrI,EAAGwiB,gBAAMna,GAAI,CAC9C8T,EACAC,IA9FIyF,CAAete,KAAMvD,EAAGmc,EAAYC,MAEvCnB,MAAM2pB,GACN/oB,aACAuC,KAAKA,GACL5T,KAAK,KAAK,gBAAGvJ,EAAH,EAAGA,IAAH,OAAaob,EAAOpb,MAC9BuJ,KAAK,KAAK,SAAUxK,GACjB,OAAOsc,EAAOtc,EAAEW,UAEnB6J,KAAK,QAAS6R,EAAO/C,aACrB9O,KAAK,UAAU,SAAUxK,GACtB,OAAOoc,EAAcE,EAAOtc,EAAEW,UAItCikC,EAAMvpB,OAAOQ,aAAa1V,MAAM,UAAW,GAAG2V,SAvFlD,WACIY,EAAI1S,OAAO,sBACNQ,KAAK,YADV,uBACuC4R,EADvC,MAEKvc,KAAK2c,GAEVE,EAAI5B,UAAU,4BACT3U,MAAM,cAAe,SACrBqE,KAAK,YAAa,oBAEnBuU,IACID,GACApC,EAAI5B,UAAU,sBAAsBgB,SAExCgD,EAAepC,EACV1S,OAAO,iBACPa,OAAO,QACPL,KAAK,IAAKwU,GACVxU,KAAK,cAAe,UACpBM,QAAQ,qBAAqB,GAC7BN,KAAK,IAAK2R,EAAa,GACvBpS,KAAKgV,IAGdrC,EAAI1S,OAAO,sBAAsBnK,KAAK4c,GAElCyC,IACID,GACAvC,EAAI5B,UAAU,sBAAsBgB,SAExCmD,EAAevC,EACV1S,OAAO,iBACPa,OAAO,QACPC,QAAQ,qBAAqB,GAC7BN,KAAK,KAAM4R,EAAc,GACzB5R,KAAK,IAAK2U,GACV3U,KAAK,cAAe,UACpBA,KAAK,YAAa,mBAClBT,KAAKmV,IAjJVmR,OA0bR,OA7JAryB,EAAQwQ,YAAc,SAAUE,GAC5B,OAAOF,EAAY3O,KAAK7B,EAAS0e,EAAKhO,IAS1C1Q,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAiBftT,EAAQsf,OAAS,SAAUoF,GACvB,OAAKla,UAAU/F,QAGf6a,EAASoF,EAEFnf,MAJI+Z,GAaftf,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,EAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAefhf,EAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,EAAWmC,GAAX,MAAAnC,EAAU,WAEtB,OAAO3e,IAAU2e,EAAathB,EAAU2C,GAS5C3C,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAaflN,EAAQ+gB,WAAa,SAAU2D,GAC3B,OAAKla,UAAU/F,QAGfsc,EAAa2D,EAENnf,MAJIwb,GAaf/gB,EAAQghB,iBAAmB,SAAU0D,GACjC,OAAKla,UAAU/F,QAGfuc,EAAmB0D,EAEZnf,MAJIyb,GAafhhB,EAAQkhB,WAAa,SAAUwD,GAC3B,OAAKla,UAAU/F,QAGfyc,EAAawD,EAENnf,MAJI2b,GAaflhB,EAAQmhB,iBAAmB,SAAUuD,GACjC,OAAKla,UAAU/F,QAGf0c,EAAmBuD,EAEZnf,MAJI4b,GAORnhB,E,klBC3fI,SAASC,KACpB,IASI8c,EACAmB,EACAQ,EAOAP,EACAC,EACAC,EACAC,EACAE,EACAgQ,EAKApY,EACA0wB,EACAC,EACAC,EAIAzoB,EAnCAjL,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IACT8N,GAAY,EAIZmB,GAAa,EACbG,EAAoB/I,GAGpB0vB,EAAY,CAAC,KAAM,MACnBC,GAAW,EAOX9X,EAAc,KACd7P,EAAS,KAET8P,EAAoB,KAKpBiN,EAAY,YAIZ6K,EAAWjoB,EAAYvQ,eAAeC,UACtCw4B,EAAarxB,GAAS,uBACtBsxB,EAAuB,UAGvB/lB,EAAaC,mBAAS,mBAAoB,kBAE1CE,EAAW,SAAC,GAAD,SAAG9e,OACd2oB,EAAU,SAAC,GAAD,SAAGc,MAUjB,SAASpsB,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GAmM9B,IAAmBulB,EAgIXC,GAlUAppB,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAC3ChC,EAoKR,SAAmBqF,GACf,IAAMG,EAAYH,EAAaC,QAAO,SAACC,EAAKtgB,GAjLxB,IAACW,EAqLjB,OAHAX,EAAEoqB,KAAO,IAAIhB,KAAKppB,EAAC,MACnBA,EAAEW,MAnLoC,QAArBA,EAmLSX,EAAC,OAnLkB,MAAQW,EAqLrD,cAAW2f,GAAX,CAAgBtgB,MACjB,IAMH,OAJAkc,EAAaqE,EAAUnZ,KAAI,SAACpH,GACxB,gBAAYA,GAAZ,IAAeW,MAAmB,OAAZX,EAAEW,MAAiB,KAAO,OAG7C4f,EAhLIA,EAgMI+kB,EAhMgBvlB,EAiMxBylB,KAAKC,MAAMD,KAAKE,UAAUJ,MAnDrC,SAAkBtqB,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,0BAA0B,GAxE/C,WACI,IAAMkQ,EAAY0B,EACb7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHQ,oBAGkB8G,EAAOC,KAHzB,aAGkCD,EAAOuL,IAHzC,MAKlBH,EAAI7R,OAAO,KAAKC,QAAQ,uBAAuB,GAE/CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EACKnQ,OAAO,KACPC,QAAQ,gBAAgB,GACxBD,OAAO,KACPC,QAAQ,UAAU,GACvBkQ,EACKF,UAAU,iBACVjQ,OAAO,KACPC,QAAQ,cAAc,GAC3BkQ,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAuD5C0V,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAxJhBuR,CAASld,MACLyZ,GA4VRN,EAAI1S,OAAO,wBAAwBoF,KAAK0C,IA/NxCuK,EAASuS,sBACJrU,OAAOse,iBAAO9d,EAAMuO,IACpB5P,MAAM,CAAC,EAAGyC,IAEfG,EAASvD,wBACJwB,OAAO,CAAC,EAAGnH,cAAI2H,EAAM0E,KACrB/F,MAAM,CAAC0C,EAAa,IA9G7B,WACI,IAAI+O,EAAOC,EAEX,GAAoB,WAAhBgC,GAAyD,iBAAtBC,EACnClC,EAAQ,CACJI,KAAMhO,EACNrL,OAAQoY,sBAAW+C,IAEvBjC,EAAQ,SACL,OACiBua,GAChB5qB,EACA7P,EACAkiB,GAHDjC,EADA,EACAA,MAAOC,EADP,EACOA,MAMVoB,EAAWtL,qBAAW7E,GACjBvC,MAAMsR,EAAMG,MACZ+D,SAAS,EAAG,GACZJ,WAAW9D,EAAMlZ,QAG1BsK,EAAQ0E,qBAAW7E,GACdvC,MAAMqR,EAAMI,MACZ+D,SAAS,GAAI,GACbC,YAAY,CAzEH,IA0ETL,WAAW/D,EAAMjZ,QA4RtBwK,EAAI1S,OAAO,iBACN8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAM,GACXA,KAAK,KAAM2R,GACX3R,KAAK,KAAM4R,GACX5R,KAAK,KAAM4R,GA9UZiF,GA+KJ3E,EAAI1S,OAAO,4BAA4B8R,SAnFlCS,IACDA,EAAkBG,EACb1S,OAAO,mBACPa,OAAO,kBACPL,KAAK,KAAM46B,GACX56B,KAAK,gBAAiB,kBACtBA,KAAK,KAAM,GACXA,KAAK,KAAM6R,EAAOtB,EAAKA,EAAKtY,OAAS,GAAG2nB,OACxC5f,KAAK,KAAM,GACXA,KAAK,KAAM,GACXsQ,UAAU,QACVC,KAAK,CACF,CAAE3B,OAAQ,KAAMsF,MAAOymB,EAAS,IAChC,CAAE/rB,OAAQ,OAAQsF,MAAOymB,EAAS,MAErCjqB,QACArQ,OAAO,QACPL,KAAK,UAAU,qBAAG4O,UAClB5O,KAAK,cAAc,qBAAGkU,UA3D/BomB,EAAQc,oBACH/M,OAAO,CACJ,CAAC,EAAG,GACJ,CAAC1c,EAAYC,KAEhBqF,GAAG,QAASokB,GACZpkB,GAAG,MAAOqkB,GA2JnB,WACQd,IACAtoB,EAAI5B,UAAU,eAAegB,SAC7BY,EAAI5B,UAAU,uBAAuBgB,UAIzCkpB,EAAY/L,kBACP1I,SAAQ,gBAAG5vB,EAAH,EAAGA,MAAH,OAAgB0iC,MAAMxzB,SAASlP,EAAO,QAC9CgS,GAAE,gBAAGyX,EAAH,EAAGA,KAAH,OAAc/N,EAAO+N,MACvB8O,GAAG9c,GACH9I,IAAG,gBAAG3S,EAAH,EAAGA,MAAH,OAAe2b,EAAO3b,MACzB2vB,MAAM9a,GAAS8kB,IAEhBnc,GAGIjC,EAAWuL,OAAOud,EAAUzU,WAAW9tB,SACvCyZ,EAAWzZ,SAEXia,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMld,EAAWuL,OAAOud,EAAUzU,YAClC/lB,KAAK,QAAS,sBACdA,KAAK,IAAKw6B,GAEftoB,EAAI1S,OAAO,gBACN8Q,UAAU,uBACVse,MAAMre,EAAK0M,OAAOud,EAAUzU,YAC5B1U,aACAmG,SAAS1D,GACT9T,KAAK,IAAKw6B,IAInBtoB,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMld,GACN1R,KAAK,QAAS,cACdA,KAAK,IAAKw6B,GAGftoB,EAAI1S,OAAO,gBACN8Q,UAAU,eACVse,MAAMre,GACNc,aACAmG,SAAS1D,GACT9T,KAAK,IAAKw6B,KAGXjqB,EAAK0M,OAAOud,EAAUzU,WAAW9tB,SAAWsY,EAAKtY,QACjDia,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMre,EAAK0M,OAAOud,EAAUzU,YAC5B/lB,KAAK,QAAS,sBACdA,KAAK,IAAKw6B,GAInBtoB,EAAI1S,OAAO,gBACNa,OAAO,QACPuuB,MAAMre,GACNvQ,KAAK,QAAS,cACdA,KAAK,IAAKw6B,IA/Qf3L,GA6LJ3c,EAAI1S,OAAO,yBACNQ,KAAK,YADV,uBACuC4R,EADvC,MAEKvc,KAAK2c,GAEU,WAAhB4Q,GACA1Q,EAAI1S,OAAO,6BACNQ,KACG,YAFR,uBAGwB4R,EAlPT,GA+Of,MAKKvc,KAAK2sB,GAgFlB,WACIuY,EAAaroB,EAAI1S,OAAO,gBAAgBnK,KAAKilC,GAEzC3mB,IACA4mB,EAAW5+B,MAAM,UAAW,GAE5B4/B,YAAW,WACPhB,EACKlpB,aACAmG,SAAS1D,GACTnY,MAAM,UAAW,KACvB,IAIP4+B,EACKjqB,UAAU,QACVhQ,QAAQ,cAAc,GACtBN,KAAK,SAAU4R,GAEpB2oB,EAAWjqB,UAAU,cAActQ,KAAK,OAAxC,eAAwD46B,EAAxD,MAzSIY,GAiTAT,EAAkBroB,EAAYxQ,kBAAkBT,KAAK,GAGhD84B,EACJjqB,UAAU,sBACV3U,MAAM,OAAQo/B,OAmCvB,SAASM,IACL,IACII,EADErrB,EAAY0nB,QAAM1nB,UAGxB,GAAKA,EAAL,CAIA,GAAIsqB,EAAU,CACV,IAAMgB,EAAsB7sB,KAAK8sB,MAC7B9pB,EAAO,IAAI+M,KAAK6b,EAAU,KAAO5oB,EAAO,IAAI+M,KAAK6b,EAAU,MAEzDmB,EAAgB/sB,KAAK8sB,MAAMvrB,EAAU,GAAKA,EAAU,IAGtDwrB,EAAgBF,GAChBE,EAAgBF,GAGhBD,EAAe,CACX5sB,KAAK8sB,MAAMvrB,EAAU,IACrBvB,KAAK8sB,MAAMvrB,EAAU,IAAMsrB,GAE/BpB,EAAMuB,KAAKtB,EAAYkB,IAEvBA,EAAerrB,OAGnBqrB,EAAerrB,EAEnB0E,EAAWzf,KACP,mBACA0D,KACA0iC,EAAa7+B,IAAIiV,EAAOoV,UAUhC,SAASqU,IACL,GAAKxD,QAAMgE,YAAX,CAIA,IAAIC,EAAoB,CAAC,KAAM,MACzB3rB,EAAY0nB,QAAM1nB,UAExB,GAAIA,EAAW,CACX,IAAI4rB,EAAa5rB,EAAUxT,IAAIiV,EAAOoV,SAEtC8U,EAAoBC,EAAWp/B,IAC3B4P,GAAcquB,GAAsB9rB,QAIlB,IAAMgtB,EAAkB,KAC1CA,EAAkB,GAAKvvB,GACnBquB,GACFc,MAAMK,EAAW,IACnBD,EAAkB,GAAKvvB,GACnBquB,GACFjsB,OAAOmtB,EAAkB,KAG/Bv8B,iBAAOzG,MACFsY,aACAhc,KAAKyiC,QAAM96B,OAAO6+B,KAAME,EAAkBn/B,IAAIiV,SAG/C6oB,GACAuB,EAAe,WAAf,MAAmBxB,IAI3B3lB,EAAWzf,KAAK,iBAAkB0D,KAAMgjC,IAQ5C,SAASE,EAAgBC,EAAOC,GAC5B,IAAI/rB,EAAY,KAEF,OAAV8rB,IACI,IAAItd,KAAKsd,GAAS,IAAItd,KAAKud,GAC3B/rB,EAAY,CAACyB,EAAO,IAAI+M,KAAKsd,IAASrqB,EAAO,IAAI+M,KAAKud,KAGtDh4B,QAAQlL,MACJ,gEAKZqhC,EAAMuB,KAAKtB,EAAYnqB,GAkT3B,OAxSA5c,EAAQsgB,kBAAoB,SAAUoE,GAClC,OAAKla,UAAU/F,QAGf6b,EAAoBoE,EAEbnf,MAJI+a,GAgBftgB,EAAQs8B,UAAY,SAAU5X,GAC1B,OAAKla,UAAU/F,QAGf63B,EAAY5X,EAELnf,MAJI+2B,GAaft8B,EAAQ4W,qBAAuBA,GAQ/B5W,EAAQinC,UAAY,SAAUviB,GAC1B,OAAKla,UAAU/F,QAGfwiC,EAAYviB,EAER/f,MAAMiF,QAAQq9B,IACdwB,EAAe,WAAf,MAAmBxB,IAGhB1hC,MARI0hC,GAiBfjnC,EAAQmnC,SAAW,SAAUziB,GACzB,OAAKla,UAAU/F,QAGf0iC,EAAWziB,EAEJnf,MAJI4hC,GAafnnC,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAaflR,EAAQmgB,WAAa,SAAUuE,GAC3B,OAAKla,UAAU/F,QAGf0b,EAAauE,EAENnf,MAJI4a,GAafngB,EAAQgf,UAAY,SAAU8F,GAC1B,OAAKta,UAAU/F,QAGfua,EAAY8F,EAELvf,MAJIyZ,GAafhf,EAAQknC,SAAW,SAAUxiB,GACzB,OAAKla,UAAU/F,QAGfyiC,EAAWxiB,EAEJnf,MAJI2hC,GAcflnC,EAAQoW,OAAS,SAAUsO,GACvB,OAAKla,UAAU/F,QAGf2R,EAASsO,EAEFnf,MAJI6Q,GAafpW,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAgDftT,EAAQyjB,GAAK,WACT,IAAI9gB,EAAQ2e,EAAWmC,GAAGnH,MAAMgF,EAAY9W,WAE5C,OAAO7H,IAAU2e,EAAathB,EAAU2C,GAS5C3C,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAcflN,EAAQqvB,kBAAoB,SAAU3K,GAClC,OAAKla,UAAU/F,QAGf4qB,EAAoB3K,EAEbnf,MAJI8pB,GAgBfrvB,EAAQovB,YAAc,SAAU1K,GAC5B,OAAKla,UAAU/F,QAGf2qB,EAAc1K,EAEPnf,MAJI6pB,GAgBfpvB,EAAQuf,OAAS,SAAUmF,GACvB,OAAKla,UAAU/F,QAGf8a,EAASmF,EAEFnf,MAJIga,GAoBfvf,EAAQqnC,qBAAuB,SAAU3iB,GACrC,OAAKla,UAAU/F,QAGf4iC,EAAuB3iB,EAEhBnf,MAJI8hC,GAORrnC,E,qkBC/0BI,SAASC,KACpB,IAQIke,EACAC,EACAC,EACAuqB,EAEAC,EAGAC,EACAC,EACAC,EAEAvC,EAGAwC,EAIAC,EAEAC,EACA7O,EACA8O,EACAC,EACAC,EACAC,EAEA37B,EACA47B,EACAC,EACAC,EAKAhrB,EA5CApL,EAAS,CACLuL,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRxL,KAAM,IAEVrG,EAAQ,IACRgE,EAAS,IAQT+N,EAAcC,EAAYnR,aAAaC,YAIvCyR,EAAe,GAEf3D,EAAQ,EAGR6tB,EAA6B,EAC7BC,EAAuB,GAGvBC,GAAY,EAaZC,EAAS,GACTC,EAAU,GACVC,EAAW,GAEXC,EAAW,kBAAMr8B,GAAS47B,GAC1BU,EAAsB,kBAAM9rB,EAAc,GAQ9C,SAASpe,EAAQ8hB,GACbA,EAAWzU,MAAK,SAAU0U,GACtB5D,EAAajR,EAAQoG,EAAOC,KAAOD,EAAOwL,MAC1CV,EAAclN,EAASoC,EAAOuL,IAAMvL,EAAOyL,OAFd,IA0HlBqD,EAhET+nB,EACA5tB,EA+CW5H,EACXie,EAoCFwX,EA/I6B,GA0HlBhoB,EAvHiDL,EAwHhD,CACZ+nB,OAAQ,IAAI1nB,EAAa0nB,QAAQ5nB,OAAO/V,UACxC69B,SAAU,IAAI5nB,EAAa4nB,UAAU9nB,OAAO/V,UAC5C49B,QAAS3nB,EAAa2nB,QAAQtlC,OACxB,IAAI2d,EAAa2nB,SAAS7nB,OAAO/V,UACjC,GACNs9B,SAAUrnB,EAAaqnB,SACvB77B,MAAOwU,EAAaxU,QA/HjBA,EAH0B,EAG1BA,MAAO67B,EAHmB,EAGnBA,SAAUK,EAHS,EAGTA,OAAQE,EAHC,EAGDA,SAAUD,EAHT,EAGSA,QAElCE,MACA9rB,GA1BQ,KA8EVgsB,EAAeN,EAAY,CAAC1rB,EAAY,GAAK,CAAC,EAAGA,GACjD5B,EAAS,CAAC,EAAGlB,KAAKjG,IAAL,MAAAiG,KAAI,IAAQyuB,GAAR,WAAmBC,GAAnB,IAA+BC,MAEtD3rB,EAAStD,wBAAcwB,OAAOA,GAAQwG,WAAWonB,GAAclZ,OA8CzD2B,GADWje,EA1CM0J,GA2CV,GA3Cb6qB,EA6CO,SAAUlnC,GACb,OAAOqZ,KAAKqQ,IAAI/W,EAAE3S,GAAK4wB,IA3C3BgW,EAAoBkB,EACf1gC,KAAI,SAACpH,EAAGN,GAAJ,OAAUkoC,EA/GA,GA+GuBloC,KACrCyK,UACL08B,EAAsBiB,EACjB1gC,KAAI,SAACpH,EAAGN,GAAJ,MAAU,GAhHE,GAgHIA,KACpByK,UAGL28B,EAAa7pB,EAAY,GACzB8pB,EAAe9pB,EAAY,GAC3B+pB,EAAc/pB,EAAY,GAS9B,SAAkBjC,GACT0B,IACDA,EAAM1S,iBAAOgR,GACRnQ,OAAO,OACPC,QAAQ,2BAA2B,GAvDhD,WACI,IAAIkQ,EAAY0B,EACX7R,OAAO,KACPC,QAAQ,mBAAmB,GAC3BN,KAAK,YAHM,oBAGoB8G,EAAOC,KAH3B,aAGoCD,EAAOuL,IAH3C,MAKhB7B,EAAUnQ,OAAO,KAAKC,QAAQ,eAAe,GAC7CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,cAAc,GAC5CkQ,EAAUnQ,OAAO,KAAKC,QAAQ,kBAAkB,GAE5Cm9B,KACAjtB,EACKF,UAAU,gBACVtQ,KAAK,YAFV,oBAlEY,IAkEZ,SA8CAgW,IAGJ9D,EAAIlS,KAAK,UAAW,CAAC,EAAG,EAAGU,EAAOgE,IAC7B1E,KAAK,QAAS,qDACdA,KAAK,QAASU,GACdV,KAAK,SAAU0E,GAxFhBuR,CAASld,MAab0jC,EAAO/lB,qBAAW7E,GACbvC,MAAMA,GACNyV,YA1DS,GA2DTL,WAAWhd,iBAAOuL,IAwI3B,WACQ4pB,GACAA,EAASvrB,SAETwrB,GACAA,EAAWxrB,SAEXyrB,GACAA,EAAUzrB,SAGdurB,EAAW3qB,EACN1S,OAAO,gBACP8Q,UAAU,cACVC,KAAK+sB,GACL5sB,QACArQ,OAAO,QACPL,KAAK,OAAQs8B,GACbt8B,KAAK,WAAW,SAACxK,EAAGN,GAAJ,OAAUknC,EAAkBlnC,MAC5C8K,KAAK,SAAS,SAACxK,EAAGN,GAAJ,uBAAoBA,MAClC8K,KAAK,QAAS08B,GACd18B,KAAK,SAAU4R,GACf5R,KAAK,IAAKq9B,EAAYxrB,EAAS,GAEpCirB,EAAa5qB,EACR1S,OAAO,gBACP8Q,UAAU,gBACVC,KAAKitB,GACL9sB,QACArQ,OAAO,QACPL,KAAK,OAAQu8B,GACbv8B,KAAK,gBAAgB,SAACxK,EAAGN,GAAJ,OAAUmnC,EAAoBnnC,MACnD8K,KAAK,SAAS,SAACxK,EAAGN,GAAJ,yBAAsBA,MACpC8K,KAAK,QAAS08B,GACd18B,KAAK,SAAU09B,GACf19B,KAAK,IAAKq9B,EAAYxrB,EAAS,GAC/B7R,KAAK,IAAK09B,GAEXH,EAAQtlC,SACR8kC,EAAY7qB,EACP1S,OAAO,gBACP8Q,UAAU,oBACVC,KAAKgtB,GACL7sB,QACArQ,OAAO,QACPL,KAAK,QAAS,eACdA,KAAK,SAAUw8B,GACfx8B,KAAK,eA9OM,GA+OXA,KAAK,UAAWq8B,EAAoB,IACpCr8B,KAAK,KAAM6R,GACX7R,KAAK,KAAM6R,GACX7R,KAAK,KAAM,GACXA,KAAK,KAAM4R,IA1MhBisB,GAyOAJ,MAGId,GACAA,EAAYrrB,SAGhBqrB,EAAczqB,EACT1S,OAAO,mBACPa,OAAO,KACPC,QAAQ,gBAAgB,GACxBN,KAAK,YAJI,uBAIyB4R,EAAc,EAJvC,MAOVorB,IACA57B,EAAQ47B,GAGRlP,GACAA,EAAQxc,SAGZwc,EAAU6O,EACLrsB,UAAU,qBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,6BACdT,KAAK6B,IAIN67B,GAAYC,KAERA,IACAD,EAAWC,GAGXN,GACAA,EAAWtrB,SAGfsrB,EAAaD,EACRrsB,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,gCACdA,KAAK,IApTA,IAqTLT,KAAK09B,KAvJdW,EAAaH,IAnKD,IAmK8B,EAE9CvrB,EAAI1S,OAAO,eACNQ,KACG,YAFR,oBAGqB49B,EAHrB,aAIYhsB,EAAcurB,EAJ1B,MAOK9nC,KAAKonC,GAwENxC,GACAA,EAAS3oB,SAGb2oB,EAAW/nB,EACN1S,OAAO,eACP8Q,UAAU,wBACVC,KAAK,CAAC,IACNG,QACArQ,OAAO,QACPL,KAAK,QAAS,mBACdA,KAAK,KAAM,GACXA,KAAK,KAAM2R,MA2PpB,OAlLAne,EAAQif,YAAc,SAAUyF,GAC5B,OAAKla,UAAU/F,QAGfwa,EAAcyF,EAEPnf,MAJI0Z,GAefjf,EAAQwpC,YAAc,SAAU9kB,GAC5B,OAAKla,UAAU/F,QAGf+kC,EAAc9kB,EAEPnf,MAJIikC,GAcfxpC,EAAQ0pC,eAAiB,SAAUhlB,GAC/B,OAAKla,UAAU/F,QAGfilC,EAAiBhlB,EAEVnf,MAJImkC,GAcf1pC,EAAQwQ,YAAc,SAAUE,EAAU9C,GACtC,OAAO4C,EAAY3O,KAAK7B,EAAS0e,EAAKhO,EAAU9C,IASpD5N,EAAQkR,OAAS,SAAUwT,GACvB,OAAKla,UAAU/F,QAGfyM,EAASwT,EAEFnf,MAJI2L,GAcflR,EAAQ6pC,UAAY,SAAUnlB,GAC1B,OAAKla,UAAU/F,QAGfolC,EAAYnlB,EAELnf,MAJIskC,GAaf7pC,EAAQsT,OAAS,SAAUoR,GACvB,OAAKla,UAAU/F,QAGf6O,EAAS,SACFA,GACAoR,GAGAnf,MAPI+N,GAgBftT,EAAQyf,aAAe,SAAUiF,GAC7B,OAAKla,UAAU/F,QAGfgb,EAAeiF,EAERnf,MAJIka,GAafzf,EAAQ2pC,2BAA6B,SAAUjlB,GAC3C,OAAKla,UAAU/F,QAGfklC,EAA6BjlB,EAEtBnf,MAJIokC,GAcf3pC,EAAQ4pC,qBAAuB,SAAUllB,GACrC,OAAKla,UAAU/F,QAGfmlC,EAAuBllB,EAEhBnf,MAJIqkC,GAaf5pC,EAAQ8b,MAAQ,SAAU4I,GACtB,OAAKla,UAAU/F,QAGfqX,EAAQ4I,EAEDnf,MAJIuW,GAaf9b,EAAQkN,MAAQ,SAAUwX,GACtB,OAAKla,UAAU/F,QAGfyI,EAAQwX,EAEDnf,MAJI2H,GAORlN,ECziBX,IAAMgO,GAAc,CAChBs8B,OACAC,SACAC,UACAp+B,QACAq+B,iBACAC,WACAC,eACAC,aACAC,eACAC,eACAC,cACAC,cACAC,WACA1yB,QACAuuB,SACAoE,UACAC,UAGWn9B,gB","file":"core.bundled.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3-selection\"), require(\"d3-array\"), require(\"d3-scale\"), require(\"d3-axis\"), require(\"d3-time\"), require(\"d3-shape\"), require(\"d3-format\"), require(\"d3-ease\"), require(\"d3-dispatch\"), require(\"d3-time-format\"), require(\"d3-interpolate\"), require(\"d3-transition\"), require(\"d3-collection\"), require(\"d3-color\"), require(\"d3-zoom\"), require(\"d3-voronoi\"), require(\"d3-brush\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3-selection\", \"d3-array\", \"d3-scale\", \"d3-axis\", \"d3-time\", \"d3-shape\", \"d3-format\", \"d3-ease\", \"d3-dispatch\", \"d3-time-format\", \"d3-interpolate\", \"d3-transition\", \"d3-collection\", \"d3-color\", \"d3-zoom\", \"d3-voronoi\", \"d3-brush\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"core\"] = factory(require(\"d3-selection\"), require(\"d3-array\"), require(\"d3-scale\"), require(\"d3-axis\"), require(\"d3-time\"), require(\"d3-shape\"), require(\"d3-format\"), require(\"d3-ease\"), require(\"d3-dispatch\"), require(\"d3-time-format\"), require(\"d3-interpolate\"), require(\"d3-transition\"), require(\"d3-collection\"), require(\"d3-color\"), require(\"d3-zoom\"), require(\"d3-voronoi\"), require(\"d3-brush\"));\n\telse\n\t\troot[\"core\"] = factory(root[\"d3-selection\"], root[\"d3-array\"], root[\"d3-scale\"], root[\"d3-axis\"], root[\"d3-time\"], root[\"d3-shape\"], root[\"d3-format\"], root[\"d3-ease\"], root[\"d3-dispatch\"], root[\"d3-time-format\"], root[\"d3-interpolate\"], root[\"d3-transition\"], root[\"d3-collection\"], root[\"d3-color\"], root[\"d3-zoom\"], root[\"d3-voronoi\"], root[\"d3-brush\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__5__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__7__, __WEBPACK_EXTERNAL_MODULE__8__, __WEBPACK_EXTERNAL_MODULE__9__, __WEBPACK_EXTERNAL_MODULE__10__, __WEBPACK_EXTERNAL_MODULE__12__, __WEBPACK_EXTERNAL_MODULE__13__, __WEBPACK_EXTERNAL_MODULE__14__, __WEBPACK_EXTERNAL_MODULE__15__, __WEBPACK_EXTERNAL_MODULE__17__, __WEBPACK_EXTERNAL_MODULE__18__, __WEBPACK_EXTERNAL_MODULE__24__, __WEBPACK_EXTERNAL_MODULE__25__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 36);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__8__;","module.exports = __WEBPACK_EXTERNAL_MODULE__9__;","module.exports = __WEBPACK_EXTERNAL_MODULE__10__;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__12__;","module.exports = __WEBPACK_EXTERNAL_MODULE__13__;","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","module.exports = __WEBPACK_EXTERNAL_MODULE__15__;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","module.exports = __WEBPACK_EXTERNAL_MODULE__18__;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*! http://mths.be/base64 v0.1.0 by @mathias | MIT license */\n;(function(root) {\n\n\t// Detect free variables `exports`.\n\tvar freeExports = typeof exports == 'object' && exports;\n\n\t// Detect free variable `module`.\n\tvar freeModule = typeof module == 'object' && module &&\n\t\tmodule.exports == freeExports && module;\n\n\t// Detect free variable `global`, from Node.js or Browserified code, and use\n\t// it as `root`.\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n\t\troot = freeGlobal;\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\tvar InvalidCharacterError = function(message) {\n\t\tthis.message = message;\n\t};\n\tInvalidCharacterError.prototype = new Error;\n\tInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n\tvar error = function(message) {\n\t\t// Note: the error messages used throughout this file match those used by\n\t\t// the native `atob`/`btoa` implementation in Chromium.\n\t\tthrow new InvalidCharacterError(message);\n\t};\n\n\tvar TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t// http://whatwg.org/html/common-microsyntaxes.html#space-character\n\tvar REGEX_SPACE_CHARACTERS = /[\\t\\n\\f\\r ]/g;\n\n\t// `decode` is designed to be fully compatible with `atob` as described in the\n\t// HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n\t// The optimized base64-decoding algorithm used is based on @atk’s excellent\n\t// implementation. https://gist.github.com/atk/1020396\n\tvar decode = function(input) {\n\t\tinput = String(input)\n\t\t\t.replace(REGEX_SPACE_CHARACTERS, '');\n\t\tvar length = input.length;\n\t\tif (length % 4 == 0) {\n\t\t\tinput = input.replace(/==?$/, '');\n\t\t\tlength = input.length;\n\t\t}\n\t\tif (\n\t\t\tlength % 4 == 1 ||\n\t\t\t// http://whatwg.org/C#alphanumeric-ascii-characters\n\t\t\t/[^+a-zA-Z0-9/]/.test(input)\n\t\t) {\n\t\t\terror(\n\t\t\t\t'Invalid character: the string to be decoded is not correctly encoded.'\n\t\t\t);\n\t\t}\n\t\tvar bitCounter = 0;\n\t\tvar bitStorage;\n\t\tvar buffer;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\twhile (++position < length) {\n\t\t\tbuffer = TABLE.indexOf(input.charAt(position));\n\t\t\tbitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n\t\t\t// Unless this is the first of a group of 4 characters…\n\t\t\tif (bitCounter++ % 4) {\n\t\t\t\t// …convert the first 8 bits to a single ASCII character.\n\t\t\t\toutput += String.fromCharCode(\n\t\t\t\t\t0xFF & bitStorage >> (-2 * bitCounter & 6)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t};\n\n\t// `encode` is designed to be fully compatible with `btoa` as described in the\n\t// HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n\tvar encode = function(input) {\n\t\tinput = String(input);\n\t\tif (/[^\\0-\\xFF]/.test(input)) {\n\t\t\t// Note: no need to special-case astral symbols here, as surrogates are\n\t\t\t// matched, and the input is supposed to only contain ASCII anyway.\n\t\t\terror(\n\t\t\t\t'The string to be encoded contains characters outside of the ' +\n\t\t\t\t'Latin1 range.'\n\t\t\t);\n\t\t}\n\t\tvar padding = input.length % 3;\n\t\tvar output = '';\n\t\tvar position = -1;\n\t\tvar a;\n\t\tvar b;\n\t\tvar c;\n\t\tvar d;\n\t\tvar buffer;\n\t\t// Make sure any padding is handled outside of the loop.\n\t\tvar length = input.length - padding;\n\n\t\twhile (++position < length) {\n\t\t\t// Read three bytes, i.e. 24 bits.\n\t\t\ta = input.charCodeAt(position) << 16;\n\t\t\tb = input.charCodeAt(++position) << 8;\n\t\t\tc = input.charCodeAt(++position);\n\t\t\tbuffer = a + b + c;\n\t\t\t// Turn the 24 bits into four chunks of 6 bits each, and append the\n\t\t\t// matching character for each of them to the output.\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 18 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 12 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer >> 6 & 0x3F) +\n\t\t\t\tTABLE.charAt(buffer & 0x3F)\n\t\t\t);\n\t\t}\n\n\t\tif (padding == 2) {\n\t\t\ta = input.charCodeAt(position) << 8;\n\t\t\tb = input.charCodeAt(++position);\n\t\t\tbuffer = a + b;\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 10) +\n\t\t\t\tTABLE.charAt((buffer >> 4) & 0x3F) +\n\t\t\t\tTABLE.charAt((buffer << 2) & 0x3F) +\n\t\t\t\t'='\n\t\t\t);\n\t\t} else if (padding == 1) {\n\t\t\tbuffer = input.charCodeAt(position);\n\t\t\toutput += (\n\t\t\t\tTABLE.charAt(buffer >> 2) +\n\t\t\t\tTABLE.charAt((buffer << 4) & 0x3F) +\n\t\t\t\t'=='\n\t\t\t);\n\t\t}\n\n\t\treturn output;\n\t};\n\n\tvar base64 = {\n\t\t'encode': encode,\n\t\t'decode': decode,\n\t\t'version': '0.1.0'\n\t};\n\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine(function() {\n\t\t\treturn base64;\n\t\t});\n\t}\telse if (freeExports && !freeExports.nodeType) {\n\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = base64;\n\t\t} else { // in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (var key in base64) {\n\t\t\t\tbase64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n\t\t\t}\n\t\t}\n\t} else { // in Rhino or a web browser\n\t\troot.base64 = base64;\n\t}\n\n}(this));\n","module.exports = (function () {\n    'use strict';\n\n    // Styles inherited from style sheets will not be rendered for elements with these tag names\n    const noStyleTags = {\n        BASE: true,\n        HEAD: true,\n        HTML: true,\n        META: true,\n        NOFRAME: true,\n        NOSCRIPT: true,\n        PARAM: true,\n        SCRIPT: true,\n        STYLE: true,\n        TITLE: true,\n    };\n\n    // This list determines which css default values lookup tables are precomputed at load time\n    // Lookup tables for other tag names will be automatically built at runtime if needed\n    const tagNames = [\n        'A',\n        'ABBR',\n        'ADDRESS',\n        'AREA',\n        'ARTICLE',\n        'ASIDE',\n        'AUDIO',\n        'B',\n        'BASE',\n        'BDI',\n        'BDO',\n        'BLOCKQUOTE',\n        'BODY',\n        'BR',\n        'BUTTON',\n        'CANVAS',\n        'CAPTION',\n        'CENTER',\n        'CITE',\n        'CODE',\n        'COL',\n        'COLGROUP',\n        'COMMAND',\n        'DATALIST',\n        'DD',\n        'DEL',\n        'DETAILS',\n        'DFN',\n        'DIV',\n        'DL',\n        'DT',\n        'EM',\n        'EMBED',\n        'FIELDSET',\n        'FIGCAPTION',\n        'FIGURE',\n        'FONT',\n        'FOOTER',\n        'FORM',\n        'H1',\n        'H2',\n        'H3',\n        'H4',\n        'H5',\n        'H6',\n        'HEAD',\n        'HEADER',\n        'HGROUP',\n        'HR',\n        'HTML',\n        'I',\n        'IFRAME',\n        'IMG',\n        'INPUT',\n        'INS',\n        'KBD',\n        'LABEL',\n        'LEGEND',\n        'LI',\n        'LINK',\n        'MAP',\n        'MARK',\n        'MATH',\n        'MENU',\n        'META',\n        'METER',\n        'NAV',\n        'NOBR',\n        'NOSCRIPT',\n        'OBJECT',\n        'OL',\n        'OPTION',\n        'OPTGROUP',\n        'OUTPUT',\n        'P',\n        'PARAM',\n        'PRE',\n        'PROGRESS',\n        'Q',\n        'RP',\n        'RT',\n        'RUBY',\n        'S',\n        'SAMP',\n        'SCRIPT',\n        'SECTION',\n        'SELECT',\n        'SMALL',\n        'SOURCE',\n        'SPAN',\n        'STRONG',\n        'STYLE',\n        'SUB',\n        'SUMMARY',\n        'SUP',\n        'SVG',\n        'TABLE',\n        'TBODY',\n        'TD',\n        'TEXTAREA',\n        'TFOOT',\n        'TH',\n        'THEAD',\n        'TIME',\n        'TITLE',\n        'TR',\n        'TRACK',\n        'U',\n        'UL',\n        'VAR',\n        'VIDEO',\n        'WBR',\n    ];\n\n    /**\n     * Extracts the styles of elements of the given tag name\n     * @param {String} tagName  Tag name that we will check for styles\n     * @return {Object}         Values of the styles applied to the given element\n     * @private\n     */\n    const computeDefaultStyleByTagName = (tagName) => {\n        let defaultStyle = {},\n            element = document.body.appendChild(\n                document.createElement(tagName)\n            ),\n            computedStyle = window.getComputedStyle(element);\n\n        [].forEach.call(computedStyle, (style) => {\n            defaultStyle[style] = computedStyle[style];\n        });\n        document.body.removeChild(element);\n\n        return defaultStyle;\n    };\n\n    /**\n     * Returns a serializer function, only run it when you know you want to serialize your chart\n     * @return {func} serializer to add styles in line to dom string\n     * @private\n     */\n    const initializeSerializer = () => {\n        // Mapping between tag names and css default values lookup tables. This allows to exclude default values in the result.\n        const defaultStylesByTagName = {};\n\n        // Precompute the lookup tables.\n        [].forEach.call(tagNames, (name) => {\n            if (!noStyleTags[name]) {\n                defaultStylesByTagName[name] =\n                    computeDefaultStyleByTagName(name);\n            }\n        });\n\n        function getDefaultStyleByTagName(tagName) {\n            tagName = tagName.toUpperCase();\n\n            if (!defaultStylesByTagName[tagName]) {\n                defaultStylesByTagName[tagName] =\n                    computeDefaultStyleByTagName(tagName);\n            }\n\n            return defaultStylesByTagName[tagName];\n        }\n\n        function serializeWithStyles(elem) {\n            let cssTexts = [],\n                elements,\n                computedStyle,\n                defaultStyle,\n                result;\n\n            if (!elem || elem.nodeType !== Node.ELEMENT_NODE) {\n                // 'Error: Object passed in to serializeWithSyles not of nodeType Node.ELEMENT_NODE'\n\n                return;\n            }\n\n            cssTexts = [];\n            elements = elem.querySelectorAll('*');\n\n            [].forEach.call(elements, (el, i) => {\n                if (!noStyleTags[el.tagName]) {\n                    computedStyle = window.getComputedStyle(el);\n                    defaultStyle = getDefaultStyleByTagName(el.tagName);\n                    cssTexts[i] = el.style.cssText;\n                    [].forEach.call(computedStyle, (cssPropName) => {\n                        if (\n                            computedStyle[cssPropName] !==\n                            defaultStyle[cssPropName]\n                        ) {\n                            el.style[cssPropName] = computedStyle[cssPropName];\n                        }\n                    });\n                }\n            });\n\n            result = elem.outerHTML;\n            elements = [].map.call(elements, (el, i) => {\n                el.style.cssText = cssTexts[i];\n\n                return el;\n            });\n\n            return result;\n        }\n\n        return serializeWithStyles;\n    };\n\n    return {\n        initializeSerializer,\n    };\n})();\n","var objectWithoutPropertiesLoose = require(\"./objectWithoutPropertiesLoose.js\");\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutProperties, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__24__;","module.exports = __WEBPACK_EXTERNAL_MODULE__25__;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Helps process a class array or set of classes\n * @param {*} classArr      Class array or set of classes\n * @returns                 Methods to get the class array as a list of classes or CSS selectors\n * @private\n */\nexport function classArray(classArr) {\n    classArr = Array.isArray(classArr) ? classArr : [...arguments];\n\n    return {\n        asList: () => classArr.join(' '),\n        asSelector: () => '.' + classArr.join('.'),\n    };\n}\n\nexport default {\n    classArray,\n};\n","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { select } from 'd3-selection';\n\nconst wrapConfig = {\n    lineHeight: 1.2,\n    smallTextOffset: 10,\n    smallTextLineHeightRatio: 0.9,\n    smallTextRatio: 0.6,\n    valueClassName: 'value',\n    labelClassName: 'label',\n};\n\nconst defaultTextSize = 12;\nconst defaultFontFace = 'Arial';\n\n/**\n * Wraps a selection of text within the available width\n * @param  {Number} xOffset        X axis offset for the text\n * @param  {Number} fontSize       Size of the base font\n * @param  {Number} availableWidth Width of the container where the text needs to wrap on\n * @param  {D3Selection} node      SVG text element that contains the text to wrap\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapText = function (xOffset, fontSize, availableWidth, node) {\n    let text = select(node),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        smallLineHeight =\n            wrapConfig.lineHeight * wrapConfig.smallTextLineHeightRatio,\n        y = text.attr('y'),\n        dy = parseFloat(text.attr('dy')),\n        smallFontSize = fontSize * wrapConfig.smallTextRatio,\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xOffset)\n            .attr('y', y - 5)\n            .attr('dy', dy + 'em')\n            .classed(wrapConfig.valueClassName, true)\n            .style('font-size', fontSize + 'px');\n\n    tspan.text(words.pop());\n    tspan = text\n        .append('tspan')\n        .classed(wrapConfig.labelClassName, true)\n        .attr('x', xOffset)\n        .attr('y', y + wrapConfig.smallTextOffset)\n        .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n        .style('font-size', smallFontSize + 'px');\n\n    while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(' '));\n        if (\n            tspan.node() &&\n            tspan.node().getComputedTextLength() > availableWidth - 50\n        ) {\n            line.pop();\n            tspan.text(line.join(' '));\n            line = [word];\n            tspan = text\n                .append('tspan')\n                .classed(wrapConfig.labelClassName, true)\n                .attr('x', xOffset)\n                .attr('y', y + wrapConfig.smallTextOffset)\n                .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n                .text(word)\n                .style('font-size', smallFontSize + 'px');\n        }\n    }\n};\n\n/**\n * Wraps a selection of text within the available width, also adds class .adjust-upwards\n * to configure a y offset for entries with multiple rows\n * @param  {D3Selection} text       D3 text element\n * @param  {Number} width           Width of the container where the text needs to wrap on\n * @param  {Number} [xpos=0]        Number passed to determine the x offset\n * @param  {Number} [limit=2]       Number of lines before an ellipses is added and the rest of the text is cut off\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapTextWithEllipses = function (\n    text,\n    width,\n    xpos = 0,\n    limit = 2\n) {\n    text.each(function () {\n        let words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\n        text = select(this);\n\n        words = text.text().split(/\\s+/).reverse();\n        line = [];\n        lineNumber = 0;\n        lineHeight = 1.2;\n        y = text.attr('y');\n        dy = parseFloat(text.attr('dy'));\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xpos)\n            .attr('y', y)\n            .attr('dy', dy + 'em');\n\n        while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(' '));\n\n            if (tspan.node() && tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n\n                if (lineNumber < limit - 1) {\n                    line = [word];\n                    tspan = text\n                        .append('tspan')\n                        .attr('x', xpos)\n                        .attr('y', y)\n                        .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                        .text(word);\n                    // if we need two lines for the text, move them both up to center them\n                    text.classed('adjust-upwards', true);\n                } else {\n                    line.push('...');\n                    tspan.text(line.join(' '));\n                    break;\n                }\n            }\n        }\n    });\n};\n\n/**\n * Figures out an approximate of the text width by using a canvas element\n * This avoids having to actually render the text to measure it from the DOM itself\n * @param  {String} text                Text to measure\n * @param  {Number} [fontSize=12]       Font size (or default)\n * @param  {String} [fontFace='Arial']  Font family to use in the calculation (or default)\n * @return {String}                     Approximated width of the text\n * @private\n */\nexport const getTextWidth = function (\n    text,\n    fontSize = defaultTextSize,\n    fontFace = defaultFontFace\n) {\n    const a = document.createElement('canvas');\n    const b = a.getContext('2d');\n\n    b.font = fontSize + 'px ' + fontFace;\n\n    return b.measureText(text).width;\n};\n\n/**\n * Gets the font size of the passed node using getComputedStyle\n * or falls back to the default font size\n * @param {HTMLElement} node The node to get the computed font size for\n * @return {number}\n * @private\n */\nexport const getFontSize = function (node) {\n    if (typeof window.getComputedStyle === 'function') {\n        return parseFloat(window.getComputedStyle(node).fontSize);\n    }\n\n    return defaultTextSize;\n};\n\n/**\n * Heuristic which gets the number of lines needed to display the title of the tooltip\n * If shouldShowDateInTitle is set to true, it takes the formatted Date.now() as additional influencer\n * for the approximation of the needed number of lines.\n * @param  {String}  text  Text which shall be tested for the necessary number of lines\n * @param  {Number}  fontSize  Fontsize to use for the heuristic\n * @param  {Number}  maxLength  Maximal length per line\n * @return  {Number}  approximateLineNumber  Approximative number of lines needed to display the title\n * @private\n */\nexport const getApproximateNumberOfLines = function (\n    title,\n    fontSize,\n    maxLength\n) {\n    const words = title.split(/\\s+/).reverse();\n    let line = [],\n        approximateLineNumber = 1;\n\n    for (let word of words) {\n        line.push(word);\n\n        const textWidth = getTextWidth(\n            line.join(' '),\n            fontSize,\n            'Karla, sans-serif'\n        );\n\n        if (textWidth > maxLength) {\n            line.pop();\n            line = [word];\n            ++approximateLineNumber;\n        }\n    }\n\n    return approximateLineNumber;\n};\n\nexport default {\n    getApproximateNumberOfLines,\n    getFontSize,\n    getTextWidth,\n    wrapText,\n    wrapTextWithEllipses,\n};\n","// Color Gradients\nexport const colorGradients = {\n    greenBlue: ['#39C7EA', '#4CDCBA'],\n    orangePink: ['#FBC670', '#F766B8'],\n    bluePurple: ['#3DC3C9', '#824a9e'],\n};\nexport const colorGradientsHuman = {\n    greenBlue: 'Green to Blue',\n    orangePink: 'Orange to Pink',\n    bluePurple: 'Blue to Purple',\n};\n\n// Color Schemas\n// Standard Color Schema for Britecharts\nexport const britecharts = [\n    '#6aedc7', //green\n    '#39c2c9', //blue\n    '#ffce00', //yellow\n    '#ffa71a', //orange\n    '#f866b9', //pink\n    '#998ce3', //purple\n];\n// Grey Palette\nexport const grey = [\n    '#F8F8FA',\n    '#EFF2F5',\n    '#D2D6DF',\n    '#C3C6CF',\n    '#ADB0B6',\n    '#666A73',\n    '#45494E',\n    '#363A43',\n    '#282C35',\n];\n// Orange Palette\nexport const orange = [\n    '#fcc870',\n    '#ffa71a',\n    '#fb8825',\n    '#f6682f',\n    '#db5a2c',\n    '#bf4c28',\n    '#a43b1c',\n    '#892a10',\n    '#f9e9c5',\n];\n// Blue Palette\nexport const blueGreen = [\n    '#ccf7f6',\n    '#70e4e0',\n    '#00d8d2',\n    '#00acaf',\n    '#007f8c',\n    '#005e66',\n    '#003c3f',\n    '#002d2f',\n    '#0d2223',\n];\n// LightBlue Palette\nexport const teal = [\n    '#ccfffe',\n    '#94f7f4',\n    '#00fff8',\n    '#1de1e1',\n    '#39c2c9',\n    '#2e9a9d',\n    '#227270',\n    '#1a5957',\n    '#133f3e',\n];\n// Green Palette\nexport const green = [\n    '#edfff7',\n    '#d7ffef',\n    '#c0ffe7',\n    '#95f5d7',\n    '#6aedc7',\n    '#59c3a3',\n    '#479980',\n    '#34816a',\n    '#206953',\n];\n// Yellow Palette\nexport const yellow = [\n    '#f9f2b3',\n    '#fbe986',\n    '#fce05a',\n    '#fed72d',\n    '#ffce00',\n    '#fcc11c',\n    '#f9b438',\n    '#eda629',\n    '#e09819',\n];\n// Pink Palette\nexport const pink = [\n    '#fdd1ea',\n    '#fb9cd2',\n    '#f866b9',\n    '#fc40b6',\n    '#ff1ab3',\n    '#e3239d',\n    '#c62c86',\n    '#a62073',\n    '#85135f',\n];\n// Purple Palette\nexport const purple = [\n    '#ddd6fc',\n    '#bbb1f0',\n    '#998ce3',\n    '#8e6bc1',\n    '#824a9e',\n    '#77337f',\n    '#6b1c60',\n    '#591650',\n    '#470f3f',\n];\n// Red Palette\nexport const red = [\n    '#ffd8d4',\n    '#ffb5b0',\n    '#ff938c',\n    '#ff766c',\n    '#ff584c',\n    '#f04b42',\n    '#e03d38',\n    '#be2e29',\n    '#9c1e19',\n];\n\nexport const colorSchemas = {\n    britecharts,\n    grey,\n    orange,\n    blueGreen,\n    teal,\n    green,\n    yellow,\n    pink,\n    purple,\n    red,\n};\nexport const colorSchemasHuman = {\n    britecharts: 'Britecharts Default',\n    grey: 'Britecharts Grey',\n    orange: 'Orange',\n    blueGreen: 'Blue',\n    teal: 'Light Blue',\n    green: 'Green',\n    yellow: 'Yellow',\n    pink: 'Pink',\n    purple: 'Purple',\n    red: 'Red',\n};\n\n// Single Colors\nexport const aloeGreen = ['#7bdcc0']; // To Deprecate\nexport const greenColor = ['#6aedc7'];\nexport const blueColor = ['#39c2c9'];\nexport const yellowColor = ['#ffce00'];\nexport const orangeColor = ['#ffa71a'];\nconst pinkColor = ['#f866b9'];\nconst purpleColor = ['#998ce3'];\n\nconst singleColors = {\n    aloeGreen,\n    greenColor,\n    blueColor,\n    yellowColor,\n    orangeColor,\n    pinkColor,\n    purpleColor,\n};\nconst singleColorsHuman = {\n    aloeGreen: 'Aloe Green',\n    greenColor: 'Green',\n    blueColor: 'Blue',\n    yellowColor: 'Yellow',\n    orangeColor: 'Orange',\n    pinkColor: 'Pink',\n    purpleColor: 'Purple',\n};\n\nexport default {\n    colorSchemas,\n    colorSchemasHuman,\n    colorGradients,\n    colorGradientsHuman,\n    singleColors,\n    singleColorsHuman,\n};\n","import base64 from 'base-64';\n\nimport { colorSchemas } from './color';\nimport serializeWithStyles from './style';\n\nconst isBrowser = typeof window !== 'undefined';\nconst isIE = navigator.msSaveOrOpenBlob;\nconst IE_ERROR_MSG =\n    'Sorry, this feature is not available for IE. If you require this to work, check this issue https://github.com/eventbrite/britecharts/pull/652';\nconst DEFAULT_FONT_STACK = '‘Helvetica Neue’, Helvetica, Arial, sans-serif';\n\nlet encoder = isBrowser && window.btoa;\n\nif (!encoder) {\n    encoder = base64.encode;\n}\n\n// Base64 doesn't work really well with Unicode strings, so we need to use this function\n// Ref: https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\nconst b64EncodeUnicode = (str) => {\n    return encoder(\n        encodeURIComponent(str).replace(\n            /%([0-9A-F]{2})/g,\n            function (match, p1) {\n                return String.fromCharCode('0x' + p1);\n            }\n        )\n    );\n};\n\nconst config = {\n    styleClass: 'britechartStyle',\n    defaultFilename: 'britechart.png',\n    chartBackground: 'white',\n    imageSourceBase: 'data:image/svg+xml;base64,',\n    titleFontSize: '15px',\n    // eslint-disable-next-line quotes\n    titleFontFamily: DEFAULT_FONT_STACK,\n    titleTopOffset: 15,\n    get styleBackgroundString() {\n        return `<style>svg{background:${this.chartBackground};}</style>`;\n    },\n};\n\n/**\n * Main function to be used as a method by chart instances to export charts to png\n * @param  {array} svgs         (or an svg element) pass in both chart & legend as array or just chart as svg or in array\n * @param  {string} filename    [download to be called <filename>.png]\n * @param  {string} title       Title for the image\n * @private\n */\nexport function exportChart(d3svg, filename, title) {\n    if (isIE) {\n        // eslint-disable-next-line no-console\n        console.error(IE_ERROR_MSG);\n\n        return false;\n    }\n\n    return loadImage(convertSvgToHtml.call(this, d3svg, title))\n        .then((img) => {\n            return {\n                canvas: createCanvas(this.width(), this.height()),\n                img,\n            };\n        })\n        .then(({ canvas, img }) => handleImageLoad.call(img, canvas, filename));\n}\n\n/**\n * adds background styles to raw html\n * @param {string} html raw html\n * @private\n */\nfunction addBackground(html) {\n    return html.replace('>', `>${config.styleBackgroundString}`);\n}\n\n/**\n * Takes the D3 SVG element, adds proper SVG tags, adds inline styles\n * from stylesheets, adds white background and returns string\n * @param  {SVGElement} d3svg   TYPE d3 svg element\n * @return {String}             String of passed d3\n * @private\n */\nexport function convertSvgToHtml(d3svg, title) {\n    if (!d3svg) {\n        return;\n    }\n\n    d3svg.attr('version', 1.1).attr('xmlns', 'http://www.w3.org/2000/svg');\n    let serializer = serializeWithStyles.initializeSerializer();\n    let html = serializer(d3svg.node());\n\n    html = formatHtmlByBrowser(html);\n    html = prependTitle.call(\n        this,\n        html,\n        title,\n        parseInt(d3svg.attr('width'), 10)\n    );\n    html = addBackground(html);\n\n    return html;\n}\n\n/**\n * Create Canvas\n * @param  {number} width\n * @param  {number} height\n * @return {object} TYPE canvas element\n * @private\n */\nfunction createCanvas(width, height) {\n    let canvas = document.createElement('canvas');\n\n    canvas.height = height;\n    canvas.width = width;\n\n    return canvas;\n}\n\n/**\n * Create Image\n * @param  {string} svgHtml string representation of svg el\n * @param  {Function} callback function to prepare image for loading\n * @return {object}  TYPE element <img>, src points at svg\n * @private\n */\nfunction createImage(svgHtml, callback) {\n    let img = new Image();\n\n    if (callback) {\n        if (typeof callback !== 'function') {\n            throw new Error(\n                `The callback provided should be a function, we got a ${typeof callback} instead.`\n            );\n        }\n        callback(img);\n    }\n    img.src = `${config.imageSourceBase}${b64EncodeUnicode(svgHtml)}`;\n\n    return img;\n}\n\n/**\n * Draws image on canvas\n * @param  {object} image TYPE:el <img>, to be drawn\n * @param  {object} canvas TYPE: el <canvas>, to draw on\n * @private\n */\nexport function drawImageOnCanvas(image, canvas) {\n    canvas.getContext('2d').drawImage(image, 0, 0);\n\n    return canvas;\n}\n\n/**\n * Triggers browser to download image, convert canvas to url,\n * we need to append the link el to the dom before clicking it for Firefox to register\n * point <a> at it and trigger click\n * @param  {object} canvas TYPE: el <canvas>\n * @param  {string} filename\n * @param  {string} extensionType\n * @private\n */\nfunction downloadCanvas(\n    canvas,\n    filename = config.defaultFilename,\n    extensionType = 'image/png'\n) {\n    let url = canvas.toDataURL(extensionType);\n    let link = document.createElement('a');\n\n    link.href = url;\n    link.download = filename;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\n/**\n * Some browsers need special formatting, we handle that here\n * @param  {string} html string of svg html\n * @return {string} string of svg html\n * @private\n */\nfunction formatHtmlByBrowser(html) {\n    if (navigator.userAgent.search('FireFox') > -1) {\n        return html.replace(\n            /url.*&quot;\\)/,\n            'url(&quot;linearGradient[id*=\"-gradient-\"]&quot;);'\n        );\n    }\n\n    return html;\n}\n\n/**\n * Handles on load event fired by img.onload, this=img\n * @param  {object} canvas TYPE: el <canvas>\n * @param  {string} filename\n * @private\n */\nfunction handleImageLoad(canvas, filename) {\n    downloadCanvas(drawImageOnCanvas(this, canvas), filename);\n}\n\n/**\n * Create Image instance and attach event listeners for future promise\n * @param  {string} svgHtml string representation of svg el\n * @returns {Promise} promise that exposes loaded image instance\n * @private\n */\nfunction loadImage(svgHtml) {\n    return new Promise((res, rej) => {\n        createImage(svgHtml, (img) => {\n            img.addEventListener('load', () => res(img));\n            img.addEventListener('error', (err) => rej(err));\n        });\n    });\n}\n\n/**\n * if passed, append title to the raw html to appear on graph\n * @param  {string} html     raw html string\n * @param  {string} title    title of the graph\n * @param  {number} svgWidth width of graph container\n * @return {string}         raw html with title prepended\n * @private\n */\nfunction prependTitle(html, title, svgWidth) {\n    if (!title || !svgWidth) {\n        return html;\n    }\n    let { grey } = colorSchemas;\n\n    html = html.replace(\n        /<g/,\n        `<text x=\"${this.margin().left}\" y=\"${\n            config.titleTopOffset\n        }\" font-family=\"${config.titleFontFamily}\" font-size=\"${\n            config.titleFontSize\n        }\" fill=\"${grey[6]}\"> ${title} </text><g `\n    );\n\n    return html;\n}\n\nexport default {\n    exportChart,\n    convertSvgToHtml,\n    createImage,\n    drawImageOnCanvas,\n    loadImage,\n};\n","export const linearGradient = `\n        <defs>\n            <linearGradient id=\"lgrad\" x1=\"0%\" y1=\"50%\" x2=\"100%\" y2=\"50%\" >\n                <stop offset=\"0\" stop-color=\"#ffffff\" stop-opacity=\"0.8\" />\n                <stop offset=\"33.33%\" stop-color=\"#ffffff\" stop-opacity=\"0.8\" />\n                <stop offset=\"50%\" stop-color=\"#ffffff\" stop-opacity=\"0\" />\n                <stop offset=\"66.66%\" stop-color=\"#ffffff\" stop-opacity=\"0.8\" />\n                <stop offset=\"100%\" stop-color=\"#ffffff\" stop-opacity=\"0.8\" />\n            </linearGradient>\n        </defs>\n    `;\n\nexport const barLoadingMarkup = `\n        <svg class=\"load-state bar-load-state\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 711 325\">\n            ${linearGradient}\n            <g fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(-15 29)\">\n                    <g stroke=\"#EFF2F5\" stroke-dasharray=\"4 4\">\n                        <path d=\"M.400592911 200.302477L710.674315 200.302477M.400592884 131.172748L710.674315 131.172748M.324410282 64.2071321L710.621499 64.2071321M.291004517.563888874L709.82431.563888889\"/>\n                    </g>\n                    <g fill=\"#D2D6DF\" transform=\"translate(63.08 11)\">\n                        <polygon points=\"-.08 176 23.92 176 23.92 255 -.08 255\"/>\n                        <polygon points=\"50.829 147 74.829 147 74.829 255 50.829 255\"/>\n                        <polygon points=\"254.465 0 278.465 0 278.465 255 254.465 255\"/>\n                        <polygon points=\"458.102 169 482.102 169 482.102 255 458.102 255\"/>\n                        <polygon points=\"152.647 82 176.647 82 176.647 255 152.647 255\"/>\n                        <polygon points=\"356.283 66 380.283 66 380.283 255 356.283 255\"/>\n                        <polygon points=\"559.92 229 583.92 229 583.92 255 559.92 255\"/>\n                        <polygon points=\"101.738 115 125.738 115 125.738 255 101.738 255\"/>\n                        <polygon points=\"305.374 42 329.374 42 329.374 255 305.374 255\"/>\n                        <polygon points=\"509.011 201 533.011 201 533.011 255 509.011 255\"/>\n                        <polygon points=\"203.556 19 227.556 19 227.556 255 203.556 255\"/>\n                        <polygon points=\"407.192 115 431.192 115 431.192 255 407.192 255\"/>\n                    </g>\n                </g>\n                <polygon fill=\"#D2D6DF\" fill-rule=\"nonzero\" points=\"0 295 711 295 711 294 0 294\"/>\n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport const donutLoadingMarkup = `\n        <svg class=\"load-state donut-load-state\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 376 331\">\n            ${linearGradient}\n            <g fill=\"none\" fill-rule=\"evenodd\">\n                <g transform=\"translate(116 107)\">\n                    <circle cx=\"72\" cy=\"72\" r=\"72\" stroke=\"#EFF2F5\" stroke-linecap=\"round\" stroke-width=\"9.6\"/>\n                    <path stroke=\"#D2D6DF\" stroke-width=\"19.2\" d=\"M126.153559,119.524055 C137.264629,106.845712 144,90.2321371 144,72.0444604 C144,32.2554036 111.764502,0 72,0\"/>\n                    <circle cx=\"72\" cy=\"72\" r=\"67.2\" fill=\"#FFF\"/>\n                </g>\n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport const lineLoadingMarkup = `\n        <svg\n            class=\"load-state line-load-state\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 711 325\"\n        >\n            ${linearGradient}\n            <g transform=\"translate(-10 -10)\">\n                <path\n                    id=\"chart-bg\"\n                    class=\"chart-bg\"\n                    style=\"stroke:#C3C6CF;\"\n                    d=\"M3.4,216.5h707.3 M3.4,160.5h707.3 M3.3,103.5h707.3 M3.3,48.5h707.6 M0.4,276.6H710H0.4z\"\n                />\n                <polyline\n                    id=\"chart-line\"\n                    class=\"chart-line\"\n                    style=\"stroke:#C3C6CF;stroke-width:4;fill:none;\"\n                    points=\"8.8,175.8 62.4,237.7 116.1,184.7 169.7,175.8 223.3,57 277,176.8 330.6,176.8 384.3,122.5 437.9,176.8 491.6,176.8 545.2,218.4 598.8,122.5 652.5,184.7 706.1,135.1 \"\n                />\n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport const stackedAreaLoadingMarkup = `\n        <svg\n            class=\"load-state stacked-area-load-state\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 711 325\"\n        >\n            ${linearGradient}\n            <path\n                id=\"chart-bg\"\n                class=\"chart-bg\"\n                style=\"stroke:#C3C6CF;\"\n                d=\"M3.4,216.5h707.3 M3.4,160.5h707.3 M3.3,103.5h707.3 M3.3,48.5h707.6 M0.4,276.6H710H0.4z\"\n            />\n            <g transform=\"translate(20 53)\">\n                <path\n                    id=\"chart-area\"\n                    strokeLinecap=\"square\"\n                    d=\"M0.34233103,0.593688165 L709.977885,0.593688189\"\n                    transform=\"translate(.01 227.976)\"\n                />\n                <path fill=\"#C3C6CF\" d=\"M0.528124801,224.014648 L0.528124801,177.734375 L53.3834796,177.734375 C71.5390789,177.734375 86.8277373,168.972754 101.240241,151.662202 C112.578335,138.044258 121.139826,123.110227 136.974507,91.596773 C137.343842,90.8617404 139.300293,86.9654028 139.856735,85.8583549 C155.041692,55.6476711 163.354313,41.0906306 174.319873,27.7179171 C188.951312,9.87459412 204.885845,0.5 223.830634,0.5 C242.123071,0.5 257.291724,8.27027858 270.907992,23.1359289 C281.228683,34.4036118 289.135925,47.1272372 302.542017,72.085092 C303.275893,73.4513345 306.289669,79.0766612 307.063369,80.5168656 C321.41025,107.222876 330.088083,120.97663 341.470704,132.92446 C355.88994,148.05969 371.908861,155.792969 391.654853,155.792969 C412.142049,155.792969 428.763593,152.325614 442.880698,145.765582 C454.197328,140.506893 463.373931,133.679865 473.786035,123.626931 C476.528659,120.978915 486.44777,110.911455 488.791866,108.6483 C502.907223,95.0203436 514.194325,88.9355469 530.135322,88.9355469 C546.532652,88.9355469 559.505909,97.338499 575.973261,115.41103 C579.723508,119.526837 593.103621,135.086814 592.915496,134.871799 C605.09738,148.794859 614.368835,157.635549 625.072091,164.58539 C638.386599,173.230769 652.701021,177.734375 669.279853,177.734375 L673.779853,177.734375 L673.779853,224.014648 L0.528124801,224.014648 Z\" />\n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport const sparkLineLoadingMarkup = `\n        <svg\n            class=\"load-state sparkline-load-state\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 711 325\"\n        >\n            ${linearGradient}\n            <g transform=\"translate(0 50)\">\n                <path fill=\"#C3C6CF\" d=\"M0.528124801,224.014648 L0.528124801,177.734375 L53.3834796,177.734375 C71.5390789,177.734375 86.8277373,168.972754 101.240241,151.662202 C112.578335,138.044258 121.139826,123.110227 136.974507,91.596773 C137.343842,90.8617404 139.300293,86.9654028 139.856735,85.8583549 C155.041692,55.6476711 163.354313,41.0906306 174.319873,27.7179171 C188.951312,9.87459412 204.885845,0.5 223.830634,0.5 C242.123071,0.5 257.291724,8.27027858 270.907992,23.1359289 C281.228683,34.4036118 289.135925,47.1272372 302.542017,72.085092 C303.275893,73.4513345 306.289669,79.0766612 307.063369,80.5168656 C321.41025,107.222876 330.088083,120.97663 341.470704,132.92446 C355.88994,148.05969 371.908861,155.792969 391.654853,155.792969 C412.142049,155.792969 428.763593,152.325614 442.880698,145.765582 C454.197328,140.506893 463.373931,133.679865 473.786035,123.626931 C476.528659,120.978915 486.44777,110.911455 488.791866,108.6483 C502.907223,95.0203436 514.194325,88.9355469 530.135322,88.9355469 C546.532652,88.9355469 559.505909,97.338499 575.973261,115.41103 C579.723508,119.526837 593.103621,135.086814 592.915496,134.871799 C605.09738,148.794859 614.368835,157.635549 625.072091,164.58539 C638.386599,173.230769 652.701021,177.734375 669.279853,177.734375 L773.779853,177.734375 L773.77853,204.014648 L0.528124801,204.014648 Z\"/>    \n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport const brushLoadingMarkup = `\n        <svg\n            class=\"load-state brush-load-state\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 711 325\"\n        >\n            ${linearGradient}\n            <g transform=\"translate(0 50)\">\n                <path\n                    id=\"chart-area\"\n                    strokeLinecap=\"square\"\n                    d=\"M0.34233103,0.593688165 L709.977885,0.593688189\"\n                    transform=\"translate(.01 227.976)\"\n                />\n                <path fill=\"#C3C6CF\" d=\"M0.528124801,224.014648 L0.528124801,177.734375 L53.3834796,177.734375 C71.5390789,177.734375 86.8277373,168.972754 101.240241,151.662202 C112.578335,138.044258 121.139826,123.110227 136.974507,91.596773 C137.343842,90.8617404 139.300293,86.9654028 139.856735,85.8583549 C155.041692,55.6476711 163.354313,41.0906306 174.319873,27.7179171 C188.951312,9.87459412 204.885845,0.5 223.830634,0.5 C242.123071,0.5 257.291724,8.27027858 270.907992,23.1359289 C281.228683,34.4036118 289.135925,47.1272372 302.542017,72.085092 C303.275893,73.4513345 306.289669,79.0766612 307.063369,80.5168656 C321.41025,107.222876 330.088083,120.97663 341.470704,132.92446 C355.88994,148.05969 371.908861,155.792969 391.654853,155.792969 C412.142049,155.792969 428.763593,152.325614 442.880698,145.765582 C454.197328,140.506893 463.373931,133.679865 473.786035,123.626931 C476.528659,120.978915 486.44777,110.911455 488.791866,108.6483 C502.907223,95.0203436 514.194325,88.9355469 530.135322,88.9355469 C546.532652,88.9355469 559.505909,97.338499 575.973261,115.41103 C579.723508,119.526837 593.103621,135.086814 592.915496,134.871799 C605.09738,148.794859 614.368835,157.635549 625.072091,164.58539 C638.386599,173.230769 652.701021,177.734375 669.279853,177.734375 L673.779853,177.734375 L673.779853,224.014648 L0.528124801,224.014648 Z\" />\n            </g>\n            <rect class=\"chart-filter\" fill=\"url(#lgrad)\" x=\"-100%\" y=\"0\" width=\"300%\" height=\"100%\"></rect>\n        </svg>\n    `;\n\nexport default {\n    linearGradient,\n    barLoadingMarkup,\n    donutLoadingMarkup,\n    lineLoadingMarkup,\n    brushLoadingMarkup,\n    sparkLineLoadingMarkup,\n    stackedAreaLoadingMarkup,\n};\n","import { format } from 'd3-format';\nimport { max, min } from 'd3-array';\n\nlet idCounter = 0;\n\nconst integerValueFormats = {\n    small: {\n        limit: 10,\n        format: format(''),\n    },\n    medium: {\n        limit: 1000,\n        format: format(''),\n    },\n    large: {\n        limit: null,\n        format: format('.2s'),\n    },\n};\n\nconst decimalValueFormats = {\n    small: {\n        limit: 10,\n        format: format('.3f'),\n    },\n    medium: {\n        limit: 100,\n        format: format('.1f'),\n    },\n    large: {\n        limit: null,\n        format: format('.2s'),\n    },\n};\n\n/**\n * Return a relative size for the value given, based in our decimal or integer tables\n * @param {Number} value    Value to assess its relative size\n * @param {Object} limits   Object stablishing the limits and formats\n * to consider the value of a given size\n * @private\n */\nconst getValueSize = (value, limits) => {\n    let size = 'large';\n\n    if (value < limits.small.limit) {\n        size = 'small';\n    } else if (value < limits.medium.limit) {\n        size = 'medium';\n    }\n\n    return size;\n};\n\n/**\n * Returns an object that contains necessary coordinates for drawing the trendline. The\n * calculation of slope and y-intercept uses basic accumulative linear regression formula.\n * @param  {Object[]} dataPoints    Array of circle data points\n * @return {Object}\n * @private\n */\nexport const calcLinearRegression = (dataPoints) => {\n    let n = dataPoints.length,\n        x = 0,\n        y = 0,\n        xy = 0,\n        x2 = 0;\n\n    dataPoints.forEach((d) => {\n        x += d.x;\n        y += d.y;\n        xy += d.x * d.y;\n        x2 += d.x * d.x;\n    });\n\n    const denominator = n * x2 - x * x;\n    const intercept = (y * x2 - x * xy) / denominator;\n    const slope = (n * xy - x * y) / denominator;\n    const minX = min(dataPoints, ({ x }) => x);\n    const maxX = max(dataPoints, ({ x }) => x);\n\n    return {\n        x1: minX,\n        y1: slope * n + intercept,\n        x2: maxX,\n        y2: slope * maxX + intercept,\n    };\n};\n\n/**\n * Calculates percentage of value from total\n * @param  {Number}  value    Value to check\n * @param  {Number}  total    Sum of values\n * @param  {String}  decimals Specifies number of decimals https://github.com/d3/d3-format\n * @return {String}           Percentage\n * @private\n */\nexport const calculatePercent = (value, total, decimals) => {\n    const percent = total ? (value / total) * 100 : 0;\n\n    return format(decimals)(percent);\n};\n\n/**\n * Checks if a number is an integer or a decimal value\n * @param  {Number}  value Value to check\n * @return {Boolean}       If it is an iteger\n * @private\n */\nexport const isInteger = (value) => {\n    return value % 1 === 0;\n};\n\n/**\n * Formats a floating point value depending on its value range\n * @param  {Number} value Decimal point value to format\n * @return {Number}       Formatted value to show\n * @private\n */\nexport const formatDecimalValue = (value) => {\n    let size = getValueSize(value, decimalValueFormats);\n    let format = decimalValueFormats[size].format;\n\n    return format(value);\n};\n\n/**\n * Formats an integer value depending on its value range\n * @param  {Number} value Decimal point value to format\n * @return {Number}       Formatted value to show\n * @private\n */\nexport const formatIntegerValue = (value) => {\n    let size = getValueSize(value, integerValueFormats);\n    let format = integerValueFormats[size].format;\n\n    return format(value);\n};\n\n/**\n * Generates a unique id with a prefix\n * @param  {String} prefix   Prefix to add before the id\n * @return {String}          Unique id\n * @private\n */\nexport const uniqueId = (prefix) => {\n    const id = ++idCounter;\n\n    return `${prefix.toString()}-${id}`;\n};\n\nexport default {\n    calculatePercent,\n    isInteger,\n    formatDecimalValue,\n    formatIntegerValue,\n    uniqueId,\n    calcLinearRegression,\n};\n","import * as d3Format from 'd3-format';\n\nconst REQUIRED_LOCALE_DEFINITION_KEYS = [\n    'decimal',\n    'thousands',\n    'grouping',\n    'currency',\n];\nconst WRONG_LOCALE_OBJECT_MESSAGE =\n    'Please pass in a valid locale object definition';\n\n/**\n * Sets the given locale as the new default locale through d3-format's formatDefaultLocale\n * When an object is used, it simply uses it to set the new locale.\n * @param  {LocaleObject} locale    The desired locale object\n * @return {Object}                 Object with a 'format' and 'formatPrefix' functions\n * @private\n */\nexport const setDefaultLocale = (locale) => {\n    if (isValidLocaleDefinition(locale)) {\n        return d3Format.formatDefaultLocale(locale);\n    } else {\n        throw new Error(WRONG_LOCALE_OBJECT_MESSAGE);\n    }\n};\n\n/**\n * Checks if a locale definition object contains the required keys\n * @param  {LocaleObject}  locale   Locale to check\n * @return {Boolean}                Is the locale definition has a correct format (https://cdn.jsdelivr.net/npm/d3-format/locale/en-US.json)\n * @private\n */\nconst isValidLocaleDefinition = (locale) => {\n    return (\n        typeof locale == 'object' &&\n        REQUIRED_LOCALE_DEFINITION_KEYS.every((localeKey) =>\n            locale.hasOwnProperty(localeKey)\n        )\n    );\n};\n","export const dataKeyDeprecationMessage = (keyName) => {\n    // eslint-disable-next-line no-console\n    console.warn(\n        `This method is being deprecated! Please modify your data to use \"${keyName}\" as the key.`\n    );\n};\n","import {\n    curveLinear,\n    curveBasis,\n    curveCardinal,\n    curveCatmullRom,\n    curveMonotoneX,\n    curveMonotoneY,\n    curveNatural,\n    curveStep,\n    curveStepAfter,\n    curveStepBefore,\n} from 'd3-shape';\nimport {\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time';\n\nexport const axisTimeCombinations = {\n    MINUTE_HOUR: 'minute-hour',\n    HOUR_DAY: 'hour-daymonth',\n    DAY_MONTH: 'day-month',\n    MONTH_YEAR: 'month-year',\n    CUSTOM: 'custom',\n};\n\nexport const timeBenchmarks = {\n    ONE_AND_A_HALF_YEARS: 47304000000,\n    ONE_YEAR: 31536000365,\n    ONE_DAY: 86400001,\n};\n\nexport const hoursHuman = [\n    '00h',\n    '01h',\n    '02h',\n    '03h',\n    '04h',\n    '05h',\n    '06h',\n    '07h',\n    '08h',\n    '09h',\n    '10h',\n    '11h',\n    '12h',\n    '13h',\n    '14h',\n    '15h',\n    '16h',\n    '17h',\n    '18h',\n    '19h',\n    '20h',\n    '21h',\n    '22h',\n    '23h',\n];\n\nexport const motion = {\n    duration: 1200,\n};\n\nexport const curveMap = {\n    linear: curveLinear,\n    basis: curveBasis,\n    cardinal: curveCardinal,\n    catmullRom: curveCatmullRom,\n    monotoneX: curveMonotoneX,\n    monotoneY: curveMonotoneY,\n    natural: curveNatural,\n    step: curveStep,\n    stepAfter: curveStepAfter,\n    stepBefore: curveStepBefore,\n};\n\nexport const emptyDonutData = [\n    {\n        quantity: 1,\n        percentage: 100,\n    },\n];\n\nexport const timeIntervals = {\n    timeMillisecond: timeMillisecond,\n    utcMillisecond: utcMillisecond,\n    timeSecond: timeSecond,\n    utcSecond: utcSecond,\n    timeMinute: timeMinute,\n    utcMinute: utcMinute,\n    timeHour: timeHour,\n    utcHour: utcHour,\n    timeDay: timeDay,\n    utcDay: utcDay,\n    timeWeek: timeWeek,\n    utcWeek: utcWeek,\n    timeSunday: timeSunday,\n    utcSunday: utcSunday,\n    timeMonday: timeMonday,\n    utcMonday: utcMonday,\n    timeTuesday: timeTuesday,\n    utcTuesday: utcTuesday,\n    timeWednesday: timeWednesday,\n    utcWednesday: utcWednesday,\n    timeThursday: timeThursday,\n    utcThursday: utcThursday,\n    timeFriday: timeFriday,\n    utcFriday: utcFriday,\n    timeSaturday: timeSaturday,\n    utcSaturday: utcSaturday,\n    timeMonth: timeMonth,\n    utcMonth: utcMonth,\n    timeYear: timeYear,\n    utcYear: utcYear,\n};\n\nexport default {\n    axisTimeCombinations,\n    curveMap,\n    emptyDonutData,\n    timeBenchmarks,\n    lineGradientId: 'lineGradientId',\n    timeIntervals,\n    hoursHuman,\n};\n","// TODO: Document d3 objects rather than using *\n// TODO: Add bi-directional accessors for 2d grid, and determine naming (H/V vs. X/Y)\n\nconst { scaleLinear } = require('d3-scale');\nconst { classArray } = require('./classes');\n\n// Opacity for fade in/out\nconst EPSILON = 1e-6;\n\nconst COMPONENT_CLASSNAME = 'grid';\nconst DIRECTION_HORIZONTAL = 'horizontal';\nconst DIRECTION_VERTICAL = 'vertical';\nconst DIRECTION_FULL = 'full';\n\n// Direction orientations\nconst DIR = {\n    H: DIRECTION_HORIZONTAL,\n    V: DIRECTION_VERTICAL,\n};\n\n/**\n * Higher order function that returns the default positioning function for continuous scales\n * The +0.5 avoids anti-aliasing artifacts\n * @param {*} scale - Scale for positioning\n * @return {function}\n * @private\n */\nfunction positionNumber(scale) {\n    return (d) => +scale(d) + 0.5;\n}\n\n/**\n * Higher order function that returns the positioning function for bandwidth scales\n * Also adjusted for anti-aliasing\n * @param {*} scale - Scale for positioning\n * @return {function}\n * @private\n */\nfunction positionCenter(scale) {\n    let offset = Math.max(0, scale.bandwidth() - 1) / 2;\n\n    if (scale.round()) {\n        offset = Math.round(offset);\n    }\n\n    return (d) => +scale(d) + offset + 0.5;\n}\n\n/**\n * Constructor for a one-dimensional grid helper\n * @param {string} orient - orientation string to define the direction\n * @param {*} scale - d3 scale for the grid's ticks\n * @return {gridBaseGenerator}\n * @private\n */\nfunction gridBase(orient, scale) {\n    let range = [0, 1],\n        offsetStart = 0,\n        offsetEnd = 0,\n        hideEdges = false,\n        ticks = null,\n        tickValues = null,\n        // Create a class array helper for producing class lists\n        classArr = classArray(COMPONENT_CLASSNAME, orient),\n        // Manage horizontal and vertical directions by setting the a parameter\n        // to use in svg attributes\n        x = orient === DIR.H ? 'x' : 'y',\n        y = orient === DIR.H ? 'y' : 'x';\n\n    /**\n     * Generator function for one-dimensional grid\n     * @param {*} context - d3 selection or transition to use as the container\n     */\n    function gridBaseGenerator(context) {\n        let values = getValues(),\n            // Get the appropriate function to position the lines, based on scale type\n            // Pass a duplicate scale to ensure position values are fixed until grid updated\n            position = (scale.bandwidth ? positionCenter : positionNumber)(\n                scale.copy()\n            ),\n            // Set parameter to ensure correct line offset positions for inverted ranges\n            k = range[range.length - 1] >= range[0] ? 1 : -1,\n            // If passed a transition, convert to selection\n            selection = context.selection ? context.selection() : context,\n            // Set up container element\n            initContainer = selection\n                .selectAll(classArr.asSelector())\n                .data([null]),\n            container = initContainer.merge(\n                initContainer\n                    .enter()\n                    .append('g')\n                    .attr('class', classArr.asList())\n            ),\n            // Set up line selections\n            line = container.selectAll('line').data(values, scale).order(),\n            lineExit = line.exit(),\n            lineEnter = line.enter().append('line').attr('class', 'grid-line');\n\n        line = line.merge(lineEnter);\n\n        // Run animations only if grid was called on a transition\n        if (context !== selection) {\n            // Higher-order function that returns a function to position the exiting grid lines\n            // Requires a HOF to pass the attribute name to the inner function\n            const exitPosition = (attr) =>\n                function (d) {\n                    return isFinite((d = position(d)))\n                        ? d\n                        : this.getAttribute(attr);\n                };\n\n            // Function to initially position the entering grid lines\n            // Pulls the previously saved positioning function from the parent node if it exists\n            const enterPosition = function (d) {\n                let p = this.parentNode.__pos;\n\n                return p && isFinite((p = p(d))) ? p : position(d);\n            };\n\n            line = line.transition(context);\n\n            lineExit = lineExit\n                .transition(context)\n                .attr('opacity', EPSILON)\n                .attr(y + '1', exitPosition(y + '1'))\n                .attr(y + '2', exitPosition(y + '2'));\n\n            lineEnter = lineEnter\n                .attr('opacity', EPSILON)\n                .attr(y + '1', enterPosition)\n                .attr(y + '2', enterPosition);\n        }\n\n        lineExit.remove();\n\n        line.attr('opacity', 1)\n            .attr(x + '1', +range[0] - k * offsetStart)\n            .attr(x + '2', +range[range.length - 1] + k * offsetEnd)\n            .attr(y + '1', (d) => position(d))\n            .attr(y + '2', (d) => position(d));\n\n        // Attach the positioning function as a property of the container element\n        // This stores it for future use as the starting point for the lineEnter transition\n        // Cannot use arrow function as this must refer to the element\n        container.each(function () {\n            this.__pos = position;\n        });\n    }\n\n    // HELPERS\n\n    /**\n     * Extract the tick values and adjust for edge hiding\n     * @return {number[]}\n     * @private\n     */\n    function getValues() {\n        let hideFirst =\n                hideEdges === true ||\n                hideEdges === 'both' ||\n                hideEdges === 'first',\n            hideLast =\n                hideEdges === true ||\n                hideEdges === 'both' ||\n                hideEdges === 'last',\n            values = tickValues === null ? scaleTicks() : tickValues.slice();\n\n        if (hideFirst) values.shift();\n        if (hideLast) values.pop();\n\n        return values;\n    }\n\n    /**\n     * Get the tick values from the underlying scales\n     * @return {number[]}\n     * @private\n     */\n    function scaleTicks() {\n        let scaleTicks;\n\n        if (scale.ticks) {\n            scaleTicks = scale.ticks.apply(scale, ticks ? [ticks] : []);\n        } else {\n            scaleTicks = scale.domain();\n        }\n\n        return scaleTicks.slice();\n    }\n\n    // API\n\n    /**\n     * Gets or sets the scale\n     * Scale applies the ticks to the grid\n     * @param {*} [_] - d3 scale instance\n     * @return {*|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.scale = function (_) {\n        if (!arguments.length) {\n            return scale;\n        }\n        scale = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the range\n     * Governs the underlying length and positioning of the grid lines relative to the container\n     * Should usually be set to the output range from the orthogonal scale in a 2D chart\n     * @param {number[]} [_] - Array representing the output range\n     * @return {*|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.range = function (_) {\n        if (!arguments.length) {\n            return range;\n        }\n        range = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the start offset\n     * Start offset is the distance before the start position of the scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {*|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.offsetStart = function (_) {\n        if (!arguments.length) {\n            return offsetStart;\n        }\n        offsetStart = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the end offset\n     * End offset is the distance after the end position of the scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {*|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.offsetEnd = function (_) {\n        if (!arguments.length) {\n            return offsetEnd;\n        }\n        offsetEnd = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the hideEdges parameter\n     * Determines if the first and last grid line are suppressed\n     * True or 'both' suppress both edges, 'first' and 'last' suppress the grid line\n     * corresponding to the first and last tick value respectively\n     * @param {boolean|string} [_] - hideEdges parameter, accepts boolean and 'both', 'first', or 'last' strings\n     * @return {boolean|string|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.hideEdges = function (_) {\n        if (!arguments.length) {\n            return hideEdges;\n        }\n        hideEdges = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the tick count\n     * Mirrors d3 axis' ticks API method\n     * @param {number} [_] - Approximate tick count\n     * @return {number|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.ticks = function (_) {\n        if (!arguments.length) {\n            return ticks;\n        }\n        ticks = _;\n\n        return gridBaseGenerator;\n    };\n\n    /**\n     * Gets or sets the tick values\n     * Mirrors d3 axis' tickValues API method\n     * @param {number[]} [_] - Array of domain values to place ticks\n     * @return {number[]|gridBaseGenerator}\n     * @public\n     */\n    gridBaseGenerator.tickValues = function (_) {\n        if (!arguments.length) {\n            return tickValues && tickValues.slice();\n        }\n        tickValues = _ === null ? null : [..._].slice();\n\n        return gridBaseGenerator;\n    };\n\n    return gridBaseGenerator;\n}\n\n/**\n * Constructor for a two-dimensional grid helper\n * @param {*} scaleX - d3 scale for the grid's x direction\n * @param {*} scaleY - d3 scale for the grid's y direction\n * @return {gridGenerator}\n * @memberof Grid\n * @alias module:Grid.grid\n * @example\n * const grid = grid(xScale, yScale)\n        .offsetStart(5)\n        .hideEdges(true)\n        .ticks(4);\n\n    grid(svg.select('.grid-lines-group'));\n */\nexport function grid(scaleX, scaleY) {\n    let gridH = gridHorizontal(scaleY || scaleLinear()),\n        gridV = gridVertical(scaleX || scaleLinear()),\n        direction = DIRECTION_FULL,\n        tickValuesX = null,\n        tickValuesY = null;\n\n    /**\n     * Generator function for two-dimensional grid\n     * @param {*} context - d3 selection or transition to use as the container\n     */\n    function gridGenerator(context) {\n        direction === DIRECTION_FULL || direction === DIRECTION_HORIZONTAL\n            ? gridH.tickValues(tickValuesY).range(scaleX.range())\n            : gridH.tickValues([]);\n\n        direction === DIRECTION_FULL || direction === DIRECTION_VERTICAL\n            ? gridV.tickValues(tickValuesX).range(scaleY.range())\n            : gridV.tickValues([]);\n\n        context.call(gridH).call(gridV);\n    }\n\n    // API\n\n    /**\n     * Gets or sets the x-scale\n     * X-scale applies ticks to the vertical grid and range to the horizontal grid\n     * @param {*} [_] - d3 scale instance\n     * @return {*|gridGenerator}\n     * @public\n     */\n    gridGenerator.scaleX = function (_) {\n        if (!arguments.length) {\n            return scaleX;\n        }\n        scaleX = _;\n        gridV.scale(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the y-scale\n     * Y-scale applies ticks to the horizontal grid and range to the vertical grid\n     * @param {*} [_] - d3 scale instance\n     * @return {*|gridGenerator}\n     * @public\n     */\n    gridGenerator.scaleY = function (_) {\n        if (!arguments.length) {\n            return scaleY;\n        }\n        scaleY = _;\n        gridH.scale(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the direction of the grid\n     * Direction of 'full' will render both horizontal and vertical grid lines\n     * Either 'horizontal' or 'vertical' wil render the respective lines\n     * @param {string} [_] - Grid direction accepts 'full', 'vertical', or 'horizontal'\n     * @return {string|gridGenerator}\n     * @public\n     */\n    gridGenerator.direction = function (_) {\n        if (!arguments.length) {\n            return direction;\n        }\n        direction = _;\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets both the horizontal and vertical grid start offset\n     * Convenience method that sets the start offset for both horizontal and vertical grids\n     * Returns the start offset of the horizontal grid if no argument is supplied\n     * Start offset is the distance before the start position of the scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetStart = function (_) {\n        if (!arguments.length) {\n            return gridH.offsetStart();\n        }\n        gridH.offsetStart(_);\n        gridV.offsetStart(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the horizontal grid start offset\n     * Returns the start offset of the horizontal grid if no argument is supplied\n     * Start offset is the distance before the start of the x-scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetStartH = function (_) {\n        if (!arguments.length) {\n            return gridH.offsetStart();\n        }\n        gridH.offsetStart(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the vertical grid start offset\n     * Returns the start offset of the vertical grid if no argument is supplied\n     * Start offset is the distance before the start of the y-scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetStartV = function (_) {\n        if (!arguments.length) {\n            return gridV.offsetStart();\n        }\n        gridV.offsetStart(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets both the horizontal and vertical grid end offset\n     * Convenience method that sets the end offset for both horizontal and vertical grids\n     * Returns the end offset of the horizontal grid if no argument is supplied\n     * End offset is the distance after the end position of the scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetEnd = function (_) {\n        if (!arguments.length) {\n            return gridH.offsetEnd();\n        }\n        gridH.offsetEnd(_);\n        gridV.offsetEnd(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the horizontal grid end offset\n     * Returns the end offset of the horizontal grid if no argument is supplied\n     * End offset is the distance after the end of the x-scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetEndH = function (_) {\n        if (!arguments.length) {\n            return gridH.offsetEnd();\n        }\n        gridH.offsetEnd(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the vertical grid end offset\n     * Returns the end offset of the vertical grid if no argument is supplied\n     * End offset is the distance after the end of the y-scale's range that the grid will render\n     * @param {number} [_] - Offset in px\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.offsetEndV = function (_) {\n        if (!arguments.length) {\n            return gridV.offsetEnd();\n        }\n        gridV.offsetEnd(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the hideEdges parameter for both horizontal and vertical grids\n     * Returns the horizontal value if no argument specified\n     * Determines if the first and last grid line are suppressed\n     * True or 'both' suppress both edges, 'first' and 'last' suppress the grid line\n     * corresponding to the first and last tick value respectively\n     * @param {boolean|string} [_] - hideEdges parameter, accepts boolean and 'both', 'first', or 'last' strings\n     * @return {boolean|string|gridGenerator}\n     * @public\n     */\n    gridGenerator.hideEdges = function (_) {\n        if (!arguments.length) {\n            return gridH.hideEdges();\n        }\n        gridH.hideEdges(_);\n        gridV.hideEdges(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the hideEdges parameter for the horizontal grid\n     * Determines if the first and last grid line are suppressed\n     * True or 'both' suppress both edges, 'first' and 'last' suppress the grid line\n     * corresponding to the first and last tick value respectively\n     * @param {boolean|string} [_] - hideEdges parameter, accepts boolean and 'both', 'first', or 'last' strings\n     * @return {boolean|string|gridGenerator}\n     * @public\n     */\n    gridGenerator.hideEdgesH = function (_) {\n        if (!arguments.length) {\n            return gridH.hideEdges();\n        }\n        gridH.hideEdges(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the hideEdges parameter for the vertical grid\n     * Determines if the first and last grid line are suppressed\n     * True or 'both' suppress both edges, 'first' and 'last' suppress the grid line\n     * corresponding to the first and last tick value respectively\n     * @param {boolean|string} [_] - hideEdges parameter, accepts boolean and 'both', 'first', or 'last' strings\n     * @return {boolean|string|gridGenerator}\n     * @public\n     */\n    gridGenerator.hideEdgesV = function (_) {\n        if (!arguments.length) {\n            return gridV.hideEdges();\n        }\n        gridV.hideEdges(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick count for both horizontal and vertical grids\n     * Returns the horizontal ticks if no argument specified\n     * Mirrors d3 axis' ticks API method\n     * @param {number} [_] - Approximate tick count\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.ticks = function (_) {\n        if (!arguments.length) {\n            return gridH.ticks();\n        }\n        gridH.ticks(_);\n        gridV.ticks(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick count for the horizontal grid\n     * Mirrors d3 axis' ticks API method\n     * @param {number} [_] - Approximate tick count\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.ticksH = function (_) {\n        if (!arguments.length) {\n            return gridH.ticks();\n        }\n        gridH.ticks(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick count for the vertical grid\n     * Mirrors d3 axis' ticks API method\n     * @param {number} [_] - Approximate tick count\n     * @return {number|gridGenerator}\n     * @public\n     */\n    gridGenerator.ticksV = function (_) {\n        if (!arguments.length) {\n            return gridV.ticks();\n        }\n        gridV.ticks(_);\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick values for both horizontal and vertical grids\n     * Returns the horizontal tick values if no argument specified\n     * Mirrors d3 axis' tickValues API method\n     * @param {number[]} [_] - Array of domain values to place ticks\n     * @return {number[]|gridGenerator}\n     * @public\n     */\n    gridGenerator.tickValues = function (_) {\n        if (!arguments.length) {\n            return tickValuesY;\n        }\n        tickValuesX = tickValuesY = _;\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick values for the horizontal grid\n     * Mirrors d3 axis' tickValues API method\n     * @param {number[]} [_] - Array of domain values to place ticks\n     * @return {number[]|gridGenerator}\n     * @public\n     */\n    gridGenerator.tickValuesH = function (_) {\n        if (!arguments.length) {\n            return tickValuesY;\n        }\n        tickValuesY = _;\n\n        return gridGenerator;\n    };\n\n    /**\n     * Gets or sets the tick values for the vertical grid\n     * Mirrors d3 axis' tickValues API method\n     * @param {number[]} [_] - Array of domain values to place ticks\n     * @return {number[]|gridGenerator}\n     * @public\n     */\n    gridGenerator.tickValuesV = function (_) {\n        if (!arguments.length) {\n            return tickValuesX;\n        }\n        tickValuesX = _;\n\n        return gridGenerator;\n    };\n\n    return gridGenerator;\n}\n\n/**\n * Constructor for a horizontal grid helper\n * @param {*} scale - d3 scale to initialize the grid\n * @return {gridBaseGenerator}\n * @public\n * @memberof Grid\n * @alias module:Grid.gridHorizontal\n * @example\n * const grid = gridHorizontal(yScale)\n        .range([0, chartWidth])\n        .hideEdges('first')\n        .ticks(yTicks);\n\n    grid(svg.select('.grid-lines-group'));\n */\nexport function gridHorizontal(scale) {\n    return gridBase(DIR.H, scale);\n}\n\n/**\n * Constructor for a vertical grid helper\n * @param {*} scale - d3 scale to initialize the grid\n * @return {gridBaseGenerator}\n * @public\n * @memberof Grid\n * @alias module:Grid.gridVertical\n * @example\n *  const grid = gridVertical(xScale)\n        .range([0, chartHeight])\n        .hideEdges('first')\n        .ticks(xTicks);\n\n    grid(svg.select('.grid-lines-group'));\n */\nexport function gridVertical(scale) {\n    return gridBase(DIR.V, scale);\n}\n\n/**\n * Reusable Grid component helper that renders either a vertical, horizontal or full grid, and that\n * will usually be used inside charts. It could also be used as a standalone component to use on custom charts.\n * @module Grid\n * @requires d3-scale\n * @exports gridHorizontal\n * @exports gridVertical\n * @exports grid\n */\nexport default {\n    gridHorizontal,\n    gridVertical,\n    grid,\n};\n","import { max } from 'd3-array';\nimport { easeQuadInOut } from 'd3-ease';\nimport { axisBottom, axisLeft } from 'd3-axis';\nimport { color } from 'd3-color';\nimport { dispatch } from 'd3-dispatch';\nimport * as d3Format from 'd3-format';\nimport { scaleLinear, scaleBand } from 'd3-scale';\nimport { mouse, select } from 'd3-selection';\nimport 'd3-transition';\n\nimport { wrapTextWithEllipses } from '../helpers/text';\nimport { exportChart } from '../helpers/export';\nimport colorHelper from '../helpers/color';\nimport { barLoadingMarkup } from '../helpers/load';\nimport { uniqueId } from '../helpers/number';\nimport { setDefaultLocale } from '../helpers/locale';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport { motion } from '../helpers/constants';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\nconst PERCENTAGE_FORMAT = '%';\nconst NUMBER_FORMAT = ',f';\n\n/**\n * Bar Chart reusable API class that renders a\n * simple and configurable bar chart.\n *\n * @module Bar\n * @tutorial bar\n * @requires d3-array, d3-ease, d3-axis, d3-color, d3-dispatch, d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * const barChart = bar();\n *\n * barChart\n *     .height(500)\n *     .width(800);\n *\n * d3.select('.css-selector')\n *     .datum(dataset)\n *     .call(barChart);\n *\n */\n\n/**\n * @typedef BarChartData\n * @type {Object[]}\n * @property {Number} value        Value of the group (required)\n * @property {String} name         Name of the group (required)\n *\n * @example\n * [\n *     {\n *         value: 1,\n *         name: 'glittering'\n *     },\n *     {\n *         value: 1,\n *         name: 'luminous'\n *     }\n * ]\n */\n\n/**\n * @typedef LocaleObject\n * @type {Object}\n * @property {String} decimal       the decimal point(e.g., \".\")\n * @property {String} thousands     the group separator(e.g., \",\")\n * @property {Number[]} grouping    the array of group sizes(e.g., [3]), cycled as needed\n * @property {String[]} currency    the currency prefix and suffix(e.g., [\"$\", \"\"])\n * @property {String[]} numerals    optional; an array of ten strings to replace the numerals 0 - 9.\n * @property {String} percent       optional; the percent sign(defaults to \"%\")\n * @property {String} minus         optional; the minus sign(defaults to hyphen - minus, \"-\")\n * @property {String} nan           optional; the not - a - number value(defaults \"NaN\")\n *\n * See some standard locale object values [here]{@link https://cdn.jsdelivr.net/npm/d3-format/locale/}.\n * @example\n * {\n *     \"decimal\": \",\",\n *     \"thousands\": \".\",\n *     \"grouping\": [3],\n *     \"currency\": [\"\", \"\\u00a0€\"]\n * }\n */\nexport default function module() {\n    let margin = {\n            top: 20,\n            right: 20,\n            bottom: 30,\n            left: 40,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        data,\n        dataZeroed,\n        chartWidth,\n        chartHeight,\n        xScale,\n        yScale,\n        colorSchema = colorHelper.singleColors.aloeGreen,\n        colorList,\n        nameToColorMap = null,\n        chartGradientColors = null,\n        chartGradientEl,\n        chartGradientId = uniqueId('bar-gradient'),\n        yTicks = 5,\n        xTicks = 5,\n        percentageAxisToMaxRatio = 1,\n        numberFormat = NUMBER_FORMAT,\n        enableLabels = false,\n        labelsMargin = 7,\n        labelsNumberFormat = NUMBER_FORMAT,\n        labelsSize = 12,\n        betweenBarsPadding = 0.1,\n        xAxis,\n        yAxis,\n        xAxisPadding = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        yAxisPaddingBetweenChart = 10,\n        yAxisLineWrapLimit = 1,\n        isHorizontal = false,\n        svg,\n        hasSingleBarHighlight = true,\n        isAnimated = false,\n        ease = easeQuadInOut,\n        animationDuration = motion.duration,\n        animationStepRatio = 70,\n        interBarDelay = (d, i) => animationStepRatio * i,\n        highlightBarFunction = (barSelection) =>\n            barSelection.attr('fill', ({ name }) =>\n                color(\n                    chartGradientColors\n                        ? chartGradientColors[1]\n                        : nameToColorMap[name]\n                ).darker()\n            ),\n        orderingFunction,\n        // To Deprecate\n        valueLabel = 'value',\n        nameLabel = 'name',\n        labelEl,\n        xAxisLabelEl = null,\n        xAxisLabel = null,\n        xAxisLabelOffset = 30,\n        yAxisLabelEl = null,\n        yAxisLabel = null,\n        yAxisLabelOffset = -30,\n        shouldReverseColorList = true,\n        locale = null,\n        localeFormatter = d3Format,\n        // Dispatcher object to broadcast the mouse events\n        // Ref: https://github.com/mbostock/d3/wiki/Internals#d3_dispatch\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customClick'\n        ),\n        // extractors\n        getName = ({ name }) => name,\n        getValue = ({ value }) => value,\n        _labelsHorizontalX = ({ value }) => xScale(value) + labelsMargin,\n        _labelsHorizontalY = ({ name }) =>\n            yScale(name) + yScale.bandwidth() / 2 + labelsSize * (3 / 8),\n        _labelsVerticalX = ({ name }) => xScale(name),\n        _labelsVerticalY = ({ value }) => yScale(value) - labelsMargin;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {BarChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        if (locale) {\n            localeFormatter = setDefaultLocale(locale);\n        }\n\n        _selection.each(function (_data) {\n            chartWidth =\n                width -\n                margin.left -\n                margin.right -\n                yAxisPaddingBetweenChart * 1.2;\n            chartHeight = height - margin.top - margin.bottom;\n            ({ data, dataZeroed } = sortData(cleanData(_data)));\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildScales();\n            buildAxis(localeFormatter);\n            buildGradient();\n            drawGridLines();\n            drawAxis();\n            drawBars();\n\n            if (enableLabels) {\n                drawLabels(localeFormatter);\n            }\n        });\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis(locale) {\n        if (isHorizontal) {\n            xAxis = axisBottom(xScale)\n                .ticks(xTicks, locale.format(numberFormat))\n                .tickSizeInner([-chartHeight]);\n\n            yAxis = axisLeft(yScale).ticks(yTicks, locale.format(numberFormat));\n        } else {\n            xAxis = axisBottom(xScale);\n\n            yAxis = axisLeft(yScale).ticks(yTicks, locale.format(numberFormat));\n        }\n    }\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr(\n                'transform',\n                `translate(${margin.left + yAxisPaddingBetweenChart}, ${\n                    margin.top\n                })`\n            );\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container\n            .append('g')\n            .classed('x-axis-group axis', true)\n            .append('g')\n            .classed('x-axis-label', true);\n        container\n            .append('g')\n            .attr('transform', `translate(${-1 * yAxisPaddingBetweenChart}, 0)`)\n            .classed('y-axis-group axis', true)\n            .append('g')\n            .classed('y-axis-label', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Builds the gradient element to be used later\n     * @return {void}\n     * @private\n     */\n    function buildGradient() {\n        if (!chartGradientEl && chartGradientColors) {\n            chartGradientEl = svg\n                .select('.metadata-group')\n                .append('linearGradient')\n                .attr('id', chartGradientId)\n                .attr('x1', '0%')\n                .attr('y1', '0%')\n                .attr('x2', '100%')\n                .attr('y2', '100%')\n                .attr('gradientUnits', 'userSpaceOnUse')\n                .selectAll('stop')\n                .data([\n                    { offset: '0%', color: chartGradientColors[0] },\n                    { offset: '50%', color: chartGradientColors[1] },\n                ])\n                .enter()\n                .append('stop')\n                .attr('offset', ({ offset }) => offset)\n                .attr('stop-color', ({ color }) => color);\n        }\n    }\n\n    /**\n     * Creates the x and y scales of the graph\n     * @private\n     */\n    function buildScales() {\n        let percentageAxis = getPercentageAxis();\n\n        if (isHorizontal) {\n            xScale = scaleLinear()\n                .domain([0, percentageAxis])\n                .rangeRound([0, chartWidth]);\n\n            yScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([0, chartHeight])\n                .padding(betweenBarsPadding);\n        } else {\n            xScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([0, chartWidth])\n                .padding(betweenBarsPadding);\n\n            yScale = scaleLinear()\n                .domain([0, percentageAxis])\n                .rangeRound([chartHeight, 0]);\n        }\n\n        if (shouldReverseColorList) {\n            colorList = data\n                .map((d) => d)\n                .reverse()\n                .map(({ name }, i) => ({\n                    name,\n                    color: colorSchema[i % colorSchema.length],\n                }));\n        } else {\n            colorList = data\n                .map((d) => d)\n                .map(({ name }, i) => ({\n                    name,\n                    color: colorSchema[i % colorSchema.length],\n                }));\n        }\n\n        nameToColorMap =\n            nameToColorMap ||\n            data\n                .map((d) => d)\n                .reduce(\n                    (acc, { name }, i) => ({\n                        ...acc,\n                        [name]: colorSchema[i % colorSchema.length],\n                    }),\n                    {}\n                );\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart bar-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values and names to the proper type while keeping\n     * the rest of properties on the data\n     * It also creates a set of zeroed data (for animation purposes)\n     * @param  {BarChartData} originalData  Raw data as passed to the container\n     * @return  {BarChartData}              Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        let data = originalData.reduce((acc, d) => {\n            d.value = +d[valueLabel];\n            d.name = String(d[nameLabel]);\n\n            return [...acc, d];\n        }, []);\n\n        let dataZeroed = data.map((d) => ({\n            value: 0,\n            name: String(d[nameLabel]),\n        }));\n\n        return { data, dataZeroed };\n    }\n\n    /**\n     * A utility function that checks if custom gradient\n     * color map should be applied if specified by the user\n     * @param {String} name - bar's data point name\n     * @return {void}\n     * @private\n     */\n    function computeColor(name) {\n        return chartGradientColors\n            ? `url(#${chartGradientId})`\n            : nameToColorMap[name];\n    }\n\n    /**\n     * Sorts data if orderingFunction is specified\n     * @param  {BarChartData}     clean unordered data\n     * @return  {BarChartData}    clean ordered data\n     * @private\n     */\n    function sortData(unorderedData) {\n        let { data, dataZeroed } = unorderedData;\n\n        if (orderingFunction) {\n            data.sort(orderingFunction);\n            dataZeroed.sort(orderingFunction);\n        }\n\n        return { data, dataZeroed };\n    }\n\n    /**\n     * Utility function that wraps a text into the given width\n     * @param  {D3Selection} text         Text to write\n     * @param  {Number} containerWidth\n     * @private\n     */\n    function wrapText(text, containerWidth) {\n        wrapTextWithEllipses(text, containerWidth, 0, yAxisLineWrapLimit);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group.axis')\n            .attr('transform', `translate(0, ${chartHeight})`)\n            .call(xAxis);\n\n        svg.select('.y-axis-group.axis').call(yAxis);\n\n        svg.selectAll('.y-axis-group .tick text').call(\n            wrapText,\n            margin.left - yAxisPaddingBetweenChart\n        );\n\n        drawAxisLabels();\n    }\n\n    /**\n     * Draws the x and y axis custom labels respective groups\n     * @private\n     */\n    function drawAxisLabels() {\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                yAxisLabelEl.remove();\n            }\n            yAxisLabelEl = svg\n                .select('.y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n\n        if (xAxisLabel) {\n            if (xAxisLabelEl) {\n                xAxisLabelEl.remove();\n            }\n            xAxisLabelEl = svg\n                .select('.x-axis-label')\n                .append('text')\n                .attr('y', xAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .classed('x-axis-label-text', true)\n                .attr('x', chartWidth / 2)\n                .text(xAxisLabel);\n        }\n    }\n\n    /**\n     * Draws the bars along the x axis\n     * @param  {D3Selection} bars Selection of bars\n     * @return {void}\n     */\n    function drawHorizontalBars(bars) {\n        // Enter + Update\n        bars.enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('y', chartHeight)\n            .attr('x', 0)\n            .attr('height', yScale.bandwidth())\n            .attr('width', ({ value }) => xScale(value))\n            .on('mouseover', function (d, _, barList) {\n                handleMouseOver(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d, _, barList) {\n                handleMouseOut(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('click', function (d) {\n                handleClick(this, d, chartWidth, chartHeight);\n            })\n            .merge(bars)\n            .attr('x', 0)\n            .attr('y', ({ name }) => yScale(name))\n            .attr('height', yScale.bandwidth())\n            .attr('width', ({ value }) => xScale(value))\n            .attr('fill', ({ name }) => computeColor(name));\n    }\n\n    /**\n     * Draws and animates the bars along the x axis\n     * @param  {D3Selection} bars Selection of bars\n     * @return {void}\n     */\n    function drawAnimatedHorizontalBars(bars) {\n        // Enter + Update\n        bars.enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', 0)\n            .attr('y', chartHeight)\n            .attr('height', yScale.bandwidth())\n            .attr('width', ({ value }) => xScale(value))\n            .on('mouseover', function (d, _, barList) {\n                handleMouseOver(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d, _, barList) {\n                handleMouseOut(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('click', function (d) {\n                handleClick(this, d, chartWidth, chartHeight);\n            });\n\n        bars.attr('x', 0)\n            .attr('y', ({ name }) => yScale(name))\n            .attr('height', yScale.bandwidth())\n            .attr('fill', ({ name }) => computeColor(name))\n            .transition()\n            .duration(animationDuration)\n            .delay(interBarDelay)\n            .ease(ease)\n            .attr('width', ({ value }) => xScale(value));\n    }\n\n    /**\n     * Draws and animates the bars along the y axis\n     * @param  {D3Selection} bars Selection of bars\n     * @return {void}\n     */\n    function drawAnimatedVerticalBars(bars) {\n        // Enter + Update\n        bars.enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', chartWidth)\n            .attr('y', ({ value }) => yScale(value))\n            .attr('width', xScale.bandwidth())\n            .attr('height', ({ value }) => chartHeight - yScale(value))\n            .on('mouseover', function (d, _, barList) {\n                handleMouseOver(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d, _, barList) {\n                handleMouseOut(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('click', function (d) {\n                handleClick(this, d, chartWidth, chartHeight);\n            })\n            .merge(bars)\n            .attr('x', ({ name }) => xScale(name))\n            .attr('width', xScale.bandwidth())\n            .attr('fill', ({ name }) => computeColor(name))\n            .transition()\n            .duration(animationDuration)\n            .delay(interBarDelay)\n            .ease(ease)\n            .attr('y', ({ value }) => yScale(value))\n            .attr('height', ({ value }) => chartHeight - yScale(value));\n    }\n\n    /**\n     * Draws the bars along the y axis\n     * @param  {D3Selection} bars Selection of bars\n     * @return {void}\n     */\n    function drawVerticalBars(bars) {\n        // Enter + Update\n        bars.enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', chartWidth)\n            .attr('y', ({ value }) => yScale(value))\n            .attr('width', xScale.bandwidth())\n            .attr('height', ({ value }) => chartHeight - yScale(value))\n            .on('mouseover', function (d, _, barList) {\n                handleMouseOver(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d, _, barList) {\n                handleMouseOut(this, d, barList, chartWidth, chartHeight);\n            })\n            .on('click', function (d) {\n                handleClick(this, d, chartWidth, chartHeight);\n            })\n            .merge(bars)\n            .attr('x', ({ name }) => xScale(name))\n            .attr('y', ({ value }) => yScale(value))\n            .attr('width', xScale.bandwidth())\n            .attr('height', ({ value }) => chartHeight - yScale(value))\n            .attr('fill', ({ name }) => computeColor(name));\n    }\n\n    /**\n     * Draws labels at the end of each bar\n     * @private\n     * @return {void}\n     */\n    function drawLabels(locale) {\n        const labelXPosition = isHorizontal\n            ? _labelsHorizontalX\n            : _labelsVerticalX;\n        const labelYPosition = isHorizontal\n            ? _labelsHorizontalY\n            : _labelsVerticalY;\n        const textFormatter = ({ value }) =>\n            locale.format(labelsNumberFormat)(value);\n\n        if (labelEl) {\n            svg.selectAll('.percentage-label-group').remove();\n        }\n\n        labelEl = svg\n            .select('.metadata-group')\n            .append('g')\n            .classed('percentage-label-group', true)\n            .selectAll('text')\n            .data(data.reverse())\n            .enter()\n            .append('text');\n\n        labelEl\n            .classed('percentage-label', true)\n            .attr('x', labelXPosition)\n            .attr('y', labelYPosition)\n            .text(textFormatter)\n            .attr('font-size', labelsSize + 'px');\n    }\n\n    /**\n     * Draws the bar elements within the chart group\n     * @private\n     */\n    function drawBars() {\n        let bars;\n\n        if (isAnimated) {\n            bars = svg\n                .select('.chart-group')\n                .selectAll('.bar')\n                .data(dataZeroed);\n\n            if (isHorizontal) {\n                drawHorizontalBars(bars);\n            } else {\n                drawVerticalBars(bars);\n            }\n\n            bars = svg.select('.chart-group').selectAll('.bar').data(data);\n\n            if (isHorizontal) {\n                drawAnimatedHorizontalBars(bars);\n            } else {\n                drawAnimatedVerticalBars(bars);\n            }\n\n            // Exit\n            bars.exit().transition().style('opacity', 0).remove();\n        } else {\n            bars = svg.select('.chart-group').selectAll('.bar').data(data);\n\n            if (isHorizontal) {\n                drawHorizontalBars(bars);\n            } else {\n                drawVerticalBars(bars);\n            }\n\n            // Exit\n            bars.exit().remove();\n        }\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * @return void\n     */\n    function drawGridLines() {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        if (isHorizontal) {\n            drawVerticalGridLines();\n        } else {\n            drawHorizontalGridLines();\n        }\n    }\n\n    /**\n     * Draws the grid lines for an horizontal bar chart\n     * @return {void}\n     */\n    function drawVerticalGridLines() {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(barLoadingMarkup);\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        svg.select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draws the grid lines for a vertical bar chart\n     * @return {void}\n     */\n    function drawHorizontalGridLines() {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     */\n    function drawHorizontalExtendedLine() {\n        svg.select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Custom OnMouseOver event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseOver(e, d, barList, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOver', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n        highlightBarFunction = highlightBarFunction || function () {};\n\n        if (hasSingleBarHighlight) {\n            highlightBarFunction(select(e));\n\n            return;\n        }\n\n        barList.forEach((barRect) => {\n            if (barRect === e) {\n                return;\n            }\n            highlightBarFunction(select(barRect));\n        });\n    }\n\n    /**\n     * Custom OnMouseMove event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseMove(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseMove', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Custom OnMouseOver event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseOut(e, d, barList, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOut', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n\n        barList.forEach((barRect) => {\n            select(barRect).attr('fill', ({ name }) => computeColor(name));\n        });\n    }\n\n    /**\n     * Custom onClick event handler\n     * @return {void}\n     * @private\n     */\n    function handleClick(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customClick', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Gets the percentageAxis, sets it to `percentageAxisToMaxRatio` if all data points are 0\n     * @return {number} Calculated percentageAxis\n     * @private\n     */\n    function getPercentageAxis() {\n        const uniqueDataPoints = new Set(data.map(getValue));\n        const allZeroes =\n            uniqueDataPoints.size === 1 && uniqueDataPoints.has(0);\n\n        if (allZeroes) {\n            return percentageAxisToMaxRatio;\n        }\n\n        return Math.min(percentageAxisToMaxRatio * max(data, getValue));\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the padding of the chart (Default is 0.1)\n     * @param  { Number | module } _x   Padding value to get/set\n     * @return {padding | module}       Current padding or Chart module to chain calls\n     * @public\n     */\n    exports.betweenBarsPadding = function (_x) {\n        if (!arguments.length) {\n            return betweenBarsPadding;\n        }\n        betweenBarsPadding = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the gradient colors of a bar in the chart\n     * @param  {String[]} _x            Desired color gradient for the line (array of two hexadecimal numbers)\n     * @return {String[] | module}      Current color gradient or Line Chart module to chain calls\n     * @public\n     */\n    exports.chartGradient = function (_x) {\n        if (!arguments.length) {\n            return chartGradientColors;\n        }\n        chartGradientColors = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example barChart.colorMap({name: 'colorHex', name2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x Desired colorSchema for the graph\n     * @return { colorSchema | module} Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * If true, adds labels at the end of the bars\n     * @param  {Boolean} [_x=false]\n     * @return {Boolean | module}    Current value of enableLabels or Chart module to chain calls\n     * @public\n     */\n    exports.enableLabels = function (_x) {\n        if (!arguments.length) {\n            return enableLabels;\n        }\n        enableLabels = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the hasPercentage status\n     * @param  {boolean} _x         Should use percentage as value format\n     * @return {boolean | module}   Is percentage used or Chart module to chain calls\n     * @public\n     */\n    exports.hasPercentage = function (_x) {\n        if (!arguments.length) {\n            return numberFormat === PERCENTAGE_FORMAT;\n        }\n        if (_x) {\n            numberFormat = PERCENTAGE_FORMAT;\n        } else {\n            numberFormat = NUMBER_FORMAT;\n        }\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasSingleBarHighlight status.\n     * If the value is true (default), only the hovered bar is considered to\n     * be highlighted and will be darkened by default. If the value is false,\n     * all the bars but the hovered bar are considered to be highlighted\n     * and will be darkened (by default). To customize the bar highlight or\n     * remove it completely, use highlightBarFunction instead.\n     * @param  {boolean} _x        Should highlight the hovered bar\n     * @return {boolean | module} Is hasSingleBarHighlight used or Chart module to chain calls\n     * @public\n     */\n    exports.hasSingleBarHighlight = function (_x) {\n        if (!arguments.length) {\n            return hasSingleBarHighlight;\n        }\n        hasSingleBarHighlight = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {number} _x Desired width for the graph\n     * @return {height | module} Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the highlightBarFunction function. The callback passed to\n     * this function returns a bar selection from the bar chart. Use this function\n     * if you want to apply a custom behavior to the highlighted bar on hover.\n     * When hasSingleBarHighlight is true the highlighted bar will be the\n     * one that was hovered by the user. When hasSingleBarHighlight is false\n     * the highlighted bars are all the bars but the hovered one. The default\n     * highlight effect on a bar is darkening the highlighted bar(s) color.\n     * @param  {Function} _x        Desired operation operation on a hovered bar passed through callback\n     * @return {highlightBarFunction | module} Is highlightBarFunction used or Chart module to chain calls\n     * @public\n     * @example barChart.highlightBarFunction(bar => bar.attr('fill', 'blue'))\n     * barChart.highlightBarFunction(null) // will disable the default highlight effect\n     */\n    exports.highlightBarFunction = function (_x) {\n        if (!arguments.length) {\n            return highlightBarFunction;\n        }\n        highlightBarFunction = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * By default this is 'false'\n     *\n     * @param  {Boolean} _x             Desired animation flag\n     * @return {isAnimated | module}    Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the horizontal direction of the chart\n     * @param  {number} _x              Desired horizontal direction for the graph\n     * @return { isHorizontal | module} If it is horizontal or Chart module to chain calls\n     * @public\n     */\n    exports.isHorizontal = function (_x) {\n        if (!arguments.length) {\n            return isHorizontal;\n        }\n        isHorizontal = _x;\n\n        return this;\n    };\n\n    /**\n     * Offset between end of bar and start of the percentage bars\n     * @param  {number} [_x=7]      Margin offset from end of bar\n     * @return {number | module}    Current offset or Chart module to chain calls\n     * @public\n     */\n    exports.labelsMargin = function (_x) {\n        if (!arguments.length) {\n            return labelsMargin;\n        }\n        labelsMargin = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the labels number format\n     * @param  {string} [_x=\",f\"] desired label number format for the bar chart\n     * @return {string | module} Current labelsNumberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.labelsNumberFormat = function (_x) {\n        if (!arguments.length) {\n            return labelsNumberFormat;\n        }\n        labelsNumberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Get or Sets the labels text size\n     * @param  {number} [_x=12] label font size\n     * @return {number | module}    Current text size or Chart module to chain calls\n     * @public\n     */\n    exports.labelsSize = function (_x) {\n        if (!arguments.length) {\n            return labelsSize;\n        }\n        labelsSize = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {object} _x Margin object to get/set\n     * @return {margin | module} Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the nameLabel of the chart\n     * @param  {number} _x Desired nameLabel for the graph\n     * @return {number | module} Current nameLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the bar chart\n     * @param  {string} _x = ',f'     Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}      Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut, and customClick\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Configurable extension of the x axis. If your max point was 50% you might want to show x axis to 60%, pass 1.2\n     * @param  {number} _x ratio to max data point to add to the x axis\n     * @return {ratio | module} Current ratio or Chart module to chain calls\n     * @public\n     */\n    exports.percentageAxisToMaxRatio = function (_x) {\n        if (!arguments.length) {\n            return percentageAxisToMaxRatio;\n        }\n        percentageAxisToMaxRatio = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets whether the color list should be reversed or not\n     * @param  {boolean} _x     Should reverse the color list\n     * @return {boolean | module} Is color list being reversed or Chart module to chain calls\n     * @public\n     */\n    exports.shouldReverseColorList = function (_x) {\n        if (!arguments.length) {\n            return shouldReverseColorList;\n        }\n        shouldReverseColorList = _x;\n\n        return this;\n    };\n\n    /**\n     * Changes the order of items given the custom function\n     * @param  {Function} _x             A custom function that sets logic for ordering\n     * @return {(Function | Module)}   A custom ordering function or Chart module to chain calls\n     * @public\n     */\n    exports.orderingFunction = function (_x) {\n        if (!arguments.length) {\n            return orderingFunction;\n        }\n        orderingFunction = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {Number} _x Desired valueLabel for the graph\n     * @return { valueLabel | module} Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the locale which our formatting functions use.\n     * Check [the d3-format docs]{@link https://github.com/d3/d3-format#formatLocale} for the required values.\n     * @example\n     *  barChart\n     *  .valueLocale({thousands: '.', grouping: [3], currency: [\"$\", \"\"], decimal: \".\"})\n     * @param  {LocaleObject}  [_x=null]  _x    Desired locale object format.\n     * @return {LocaleObject | module}          Current locale object or Chart module to chain calls\n     * @public\n     */\n    exports.valueLocale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {number} _x Desired width for the graph\n     * @return {width | module} Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text of the xAxisLabel on the chart\n     * @param  {String} _x          Desired text for the label\n     * @return {String | module}    Label or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabel;\n        }\n        xAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the xAxisLabel on the chart\n     * @param  {Number} _x Desired offset for the label\n     * @return {Number | module} label or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabelOffset;\n        }\n        xAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the x axis on the chart\n     * @param  {Number} _x = 5          Desired horizontal ticks\n     * @return {Number | module}        Current xTicks or Chart module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text of the yAxisLabel on the chart\n     * @param  {String} _x          Desired text for the label\n     * @return {String | module}    Label or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel on the chart\n     * @param  {Number} _x          Desired offset for the label\n     * @return {Number | module}    Label or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Space between y axis and chart\n     * @param  {Number} _x = 10     Space between y axis and chart\n     * @return {Number| module}     Current value of yAxisPaddingBetweenChart or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisPaddingBetweenChart = function (_x) {\n        if (!arguments.length) {\n            return yAxisPaddingBetweenChart;\n        }\n        yAxisPaddingBetweenChart = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of vertical ticks on the chart\n     * @param  {Number} _x = 6         Desired number of vertical ticks for the graph\n     * @return {Number | module}       Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { dispatch } from 'd3-dispatch';\nimport { easeCubicInOut } from 'd3-ease';\nimport { interpolate } from 'd3-interpolate';\nimport { scaleOrdinal } from 'd3-scale';\nimport { pie, arc } from 'd3-shape';\nimport { select, mouse } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport * as textHelper from '../helpers/text';\nimport colorHelper from '../helpers/color';\nimport { calculatePercent } from '../helpers/number';\nimport { emptyDonutData } from '../helpers/constants';\nimport { donutLoadingMarkup } from '../helpers/load';\nimport { motion } from '../helpers/constants';\n\n/**\n * Reusable Donut Chart API class that renders a\n * simple and configurable donut chart.\n *\n * @module Donut\n * @tutorial donut\n * @requires d3-dispatch, d3-ease, d3-interpolate, d3-scale, d3-shape, d3-selection, d3-transition\n *\n * @example\n * const donutChart = donut();\n *\n * donutChart\n *     .externalRadius(500)\n *     .internalRadius(200);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(donutChart);\n *\n */\n\n/**\n * @typedef DonutChartData\n * @type {Object[]}\n * @property {Number} quantity     Quantity of the group (required)\n * @property {Number} percentage   Percentage of the total (optional)\n * @property {String} name         Name of the group (required)\n * @property {Number} id           Identifier for the group required for legend feature (optional)\n *\n * @example\n * [\n *     {\n *         quantity: 1,\n *         percentage: 50,\n *         name: 'glittering',\n *         id: 1\n *     },\n *     {\n *         quantity: 1,\n *         percentage: 50,\n *         name: 'luminous',\n *         id: 2\n *     }\n * ]\n */\nexport default function module() {\n    let margin = {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n        },\n        width = 300,\n        height = 300,\n        isLoading = false,\n        ease = easeCubicInOut,\n        pieDrawingTransitionDuration = motion.duration,\n        pieHoverTransitionDuration = 150,\n        radiusHoverOffset = 12,\n        paddingAngle = 0,\n        data,\n        chartWidth,\n        chartHeight,\n        externalRadius = 140,\n        internalRadius = 45.5,\n        legendWidth = externalRadius + internalRadius,\n        layout,\n        shape,\n        slices,\n        svg,\n        isAnimated = false,\n        isEmpty = false,\n        highlightedSliceId,\n        highlightedSlice,\n        hasFixedHighlightedSlice = false,\n        hasHoverAnimation = true,\n        hasLastHoverSliceHighlighted = false,\n        lastHighlightedSlice = null,\n        emptyDataConfig = {\n            emptySliceColor: '#EFF2F5',\n            showEmptySlice: false,\n        },\n        quantityLabel = 'quantity',\n        nameLabel = 'name',\n        percentageLabel = 'percentage',\n        percentageFormat = '.1f',\n        numberFormat,\n        hasCenterLegend = true,\n        // colors\n        colorScale,\n        nameToColorMap = null,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        centeredTextFunction = (d) => `${d.percentage}% ${d.name}`,\n        // utils\n        storeAngle = function (d) {\n            this._current = d;\n        },\n        reduceOuterRadius = (d) => {\n            d.outerRadius = externalRadius - radiusHoverOffset;\n        },\n        orderingFunction = (a, b) => b.quantity - a.quantity,\n        sumValues = (data) => data.reduce((total, d) => d.quantity + total, 0),\n        // extractors\n        getQuantity = ({ quantity }) => quantity,\n        getName = ({ name }) => name,\n        getSliceFill = ({ data }) => nameToColorMap[data.name],\n        // events\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customClick'\n        );\n\n    /**\n     * This function creates the graph using the selection as container\n     *\n     * @param {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {DonutChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildLayout();\n            buildColorScale();\n            buildShape();\n            drawSlices();\n            initTooltip();\n\n            if (highlightedSliceId) {\n                initHighlightSlice();\n            }\n            if (isEmpty && emptyDataConfig.showEmptySlice) {\n                drawEmptySlice();\n            }\n        });\n    }\n\n    /**\n     * Builds color scale for chart, if any colorSchema was defined\n     * @private\n     */\n    function buildColorScale() {\n        if (colorSchema) {\n            colorScale = scaleOrdinal().range(colorSchema);\n\n            nameToColorMap =\n                nameToColorMap ||\n                colorScale\n                    .domain(data.map(getName))\n                    .domain()\n                    .reduce((memo, item) => {\n                        memo[item] = colorScale(item);\n\n                        return memo;\n                    }, {});\n        }\n    }\n\n    /**\n     * Builds containers for the chart, the legend and a wrapper for all of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${width / 2}, ${height / 2})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('legend-group', true);\n    }\n\n    /**\n     * Builds the pie layout that will produce data ready to draw\n     * @private\n     */\n    function buildLayout() {\n        layout = pie()\n            .padAngle(paddingAngle)\n            .value(getQuantity)\n            .sort(orderingFunction);\n    }\n\n    /**\n     * Builds the shape function\n     * @private\n     */\n    function buildShape() {\n        shape = arc().innerRadius(internalRadius).padRadius(externalRadius);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     *\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart donut-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the quantities, names and percentages to the proper type while keeping\n     * the rest of properties on the data. It also calculates the percentages if not present.\n     * @param  {DonutChartData} data    Data as passed to the container\n     * @return {DonutChartData}         Clean data with percentages\n     * @private\n     */\n    function cleanData(data) {\n        let dataWithPercentages;\n        let cleanData = data.reduce((acc, d) => {\n            // Skip data without quantity\n            if (d[quantityLabel] === undefined || d[quantityLabel] === null) {\n                return acc;\n            }\n\n            d.quantity = +d[quantityLabel];\n            d.name = String(d[nameLabel]);\n            d.percentage = d[percentageLabel] || null;\n\n            return [...acc, d];\n        }, []);\n\n        let totalQuantity = sumValues(cleanData);\n\n        if (totalQuantity === 0 && emptyDataConfig.showEmptySlice) {\n            isEmpty = true;\n        }\n\n        dataWithPercentages = cleanData.map((d) => {\n            d.percentage = String(\n                d.percentage ||\n                    calculatePercent(\n                        d[quantityLabel],\n                        totalQuantity,\n                        percentageFormat\n                    )\n            );\n\n            return d;\n        });\n\n        return dataWithPercentages;\n    }\n\n    /**\n     * Cleans any value that could be on the legend text element\n     * @private\n     */\n    function cleanLegend() {\n        svg.select('.donut-text').text('');\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draw an empty slice\n     * @private\n     */\n    function drawEmptySlice() {\n        if (slices) {\n            svg.selectAll('g.arc').remove();\n        }\n        slices = svg\n            .select('.chart-group')\n            .selectAll('g.arc')\n            .data(layout(emptyDonutData));\n\n        let newSlices = slices\n            .enter()\n            .append('g')\n            .each(storeAngle)\n            .each(reduceOuterRadius)\n            .classed('arc', true)\n            .append('path');\n\n        newSlices\n            .merge(slices)\n            .attr('fill', emptyDataConfig.emptySliceColor)\n            .attr('d', shape)\n            .transition()\n            .ease(ease)\n            .duration(pieDrawingTransitionDuration)\n            .attrTween('d', tweenLoading);\n\n        slices.exit().remove();\n    }\n\n    /**\n     * Draws the values on the donut slice inside the text element\n     *\n     * @param  {Object} obj Data object\n     * @private\n     */\n    function drawLegend(obj) {\n        if (obj.data && hasCenterLegend) {\n            svg.select('.donut-text')\n                .text(() => centeredTextFunction(obj.data))\n                .attr('dy', '.2em')\n                .attr('text-anchor', 'middle');\n\n            svg.select('.donut-text').call(wrapText, legendWidth);\n        }\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(donutLoadingMarkup);\n    }\n\n    /**\n     * Draws the slices of the donut\n     * @private\n     */\n    function drawSlices() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (slices) {\n            svg.selectAll('g.arc').remove();\n        }\n\n        slices = svg\n            .select('.chart-group')\n            .selectAll('g.arc')\n            .data(layout(data));\n\n        let newSlices = slices\n            .enter()\n            .append('g')\n            .each(storeAngle)\n            .each(reduceOuterRadius)\n            .classed('arc', true)\n            .append('path');\n\n        if (isAnimated) {\n            newSlices\n                .merge(slices)\n                .attr('fill', getSliceFill)\n                .on('mouseover', function (d) {\n                    handleMouseOver(this, d, chartWidth, chartHeight);\n                })\n                .on('mousemove', function (d) {\n                    handleMouseMove(this, d, chartWidth, chartHeight);\n                })\n                .on('mouseout', function (d) {\n                    handleMouseOut(this, d, chartWidth, chartHeight);\n                })\n                .on('click', function (d) {\n                    handleClick(this, d, chartWidth, chartHeight);\n                })\n                .transition()\n                .ease(ease)\n                .duration(pieDrawingTransitionDuration)\n                .attrTween('d', tweenLoading);\n        } else {\n            newSlices\n                .merge(slices)\n                .attr('fill', getSliceFill)\n                .attr('d', shape)\n                .on('mouseover', function (d) {\n                    handleMouseOver(this, d, chartWidth, chartHeight);\n                })\n                .on('mousemove', function (d) {\n                    handleMouseMove(this, d, chartWidth, chartHeight);\n                })\n                .on('mouseout', function (d) {\n                    handleMouseOut(this, d, chartWidth, chartHeight);\n                })\n                .on('click', function (d) {\n                    handleClick(this, d, chartWidth, chartHeight);\n                });\n        }\n\n        slices.exit().remove();\n    }\n\n    /**\n     * Checks if the given element id is the same as the highlightedSliceId and returns the\n     * element if that's the case\n     * @param  {DOMElement} options.data Dom element to check\n     * @return {DOMElement}              Dom element if it has the same id\n     */\n    function filterHighlightedSlice({ data }) {\n        if (data.id === highlightedSliceId) {\n            return this;\n        }\n    }\n\n    /**\n     * Handles a path mouse over\n     * @return {void}\n     * @private\n     */\n    function handleMouseOver(el, d, chartWidth, chartHeight) {\n        drawLegend(d);\n        dispatcher.call('customMouseOver', el, d, mouse(el), [\n            chartWidth,\n            chartHeight,\n        ]);\n\n        if (hasHoverAnimation) {\n            // if the hovered slice is not the same as the last slice hovered\n            // after mouseout event, then shrink the last slice that was highlighted\n            if (lastHighlightedSlice && el !== lastHighlightedSlice) {\n                tweenGrowth(\n                    lastHighlightedSlice,\n                    externalRadius - radiusHoverOffset,\n                    pieHoverTransitionDuration\n                );\n            }\n            if (highlightedSlice && el !== highlightedSlice) {\n                tweenGrowth(\n                    highlightedSlice,\n                    externalRadius - radiusHoverOffset\n                );\n            }\n            tweenGrowth(el, externalRadius);\n        }\n    }\n\n    /**\n     * Handles a path mouse move\n     * @return {void}\n     * @private\n     */\n    function handleMouseMove(el, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseMove', el, d, mouse(el), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Handles a path mouse out\n     * @return {void}\n     * @private\n     */\n    function handleMouseOut(el, d, chartWidth, chartHeight) {\n        cleanLegend();\n\n        // When there is a fixed highlighted slice,\n        // we will always highlight it and render legend\n        if (\n            highlightedSlice &&\n            hasFixedHighlightedSlice &&\n            !hasLastHoverSliceHighlighted\n        ) {\n            drawLegend(highlightedSlice.__data__);\n            tweenGrowth(highlightedSlice, externalRadius);\n        }\n\n        // When the current slice is not the highlighted, or there isn't a fixed highlighted slice and it is the highlighted\n        // we will shrink the slice\n        if (\n            el !== highlightedSlice ||\n            (!hasFixedHighlightedSlice && el === highlightedSlice)\n        ) {\n            tweenGrowth(\n                el,\n                externalRadius - radiusHoverOffset,\n                pieHoverTransitionDuration\n            );\n        }\n\n        if (hasLastHoverSliceHighlighted) {\n            drawLegend(el.__data__);\n            tweenGrowth(el, externalRadius);\n            lastHighlightedSlice = el;\n        }\n\n        dispatcher.call('customMouseOut', el, d, mouse(el), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Handles a path click\n     * @return {void}\n     * @private\n     */\n    function handleClick(el, d, chartWidth, chartHeight) {\n        dispatcher.call('customClick', el, d, mouse(el), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Find the slice by id and growth it if needed\n     * @private\n     */\n    function initHighlightSlice() {\n        highlightedSlice = svg\n            .selectAll('.chart-group .arc path')\n            .select(filterHighlightedSlice)\n            .node();\n\n        if (highlightedSlice) {\n            drawLegend(highlightedSlice.__data__);\n            tweenGrowth(\n                highlightedSlice,\n                externalRadius,\n                pieDrawingTransitionDuration\n            );\n        }\n    }\n\n    /**\n     * Creates the text element that will hold the legend of the chart\n     */\n    function initTooltip() {\n        svg.select('.legend-group').append('text').attr('class', 'donut-text');\n    }\n\n    /**\n     * Stores current angles and interpolates with new angles\n     * Check out {@link http://bl.ocks.org/mbostock/1346410| this example}\n     *\n     * @param  {Object}     a   New data for slice\n     * @return {Function}       Tweening function for the donut shape\n     * @private\n     */\n    function tweenArc(a) {\n        let i = interpolate(this._current, a);\n\n        this._current = i(0);\n\n        return function (t) {\n            return shape(i(t));\n        };\n    }\n\n    /**\n     * Animate slice with tweens depending on the attributes given\n     *\n     * @param  {DOMElement} slice   Slice to growth\n     * @param  {Number} outerRadius Final outer radius value\n     * @param  {Number} delay       Delay of animation\n     * @private\n     */\n    function tweenGrowth(slice, outerRadius, delay = 0) {\n        select(slice)\n            .transition()\n            .delay(delay)\n            .attrTween('d', function (d) {\n                let i = interpolate(d.outerRadius, outerRadius);\n\n                return (t) => {\n                    d.outerRadius = i(t);\n\n                    return shape(d);\n                };\n            });\n    }\n\n    /**\n     * Animation for chart loading\n     * Check out {@link http://bl.ocks.org/mbostock/4341574| this example}\n     *\n     * @param  {Object} b   Data point\n     * @return {Function}   Tween function\n     * @private\n     */\n    function tweenLoading(b) {\n        let i;\n\n        b.innerRadius = 0;\n        i = interpolate({ startAngle: 0, endAngle: 0 }, b);\n\n        return function (t) {\n            return shape(i(t));\n        };\n    }\n\n    /**\n     * Utility function that wraps a text into the given width\n     *\n     * @param  {D3Selection} text       Text to write\n     * @param  {Number} legendWidth     Width of the container\n     * @private\n     */\n    function wrapText(text, legendWidth) {\n        let fontSize = externalRadius / 5;\n\n        textHelper.wrapText.call(null, 0, fontSize, legendWidth, text.node());\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return pieDrawingTransitionDuration;\n        }\n        pieDrawingTransitionDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the centeredTextFunction of the chart. If function is provided\n     * the format will be changed by the custom function's value format.\n     * The default format function value is \"${d.percentage}% ${d.name}\".\n     * The callback will provide the data object with id, name, percentage, and quantity.\n     * Also provides the component added by the user in each data entry.\n     * @param  {Function} _x        Custom function that returns a formatted string\n     * @return {Function | module}  Current centeredTextFunction or Chart module to chain calls\n     * @public\n     * @example donutChart.centeredTextFunction(d => `${d.id} ${d.quantity}`)\n     */\n    exports.centeredTextFunction = function (_x) {\n        if (!arguments.length) {\n            return centeredTextFunction;\n        }\n        centeredTextFunction = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {number | module}     Current colorMap or Chart module to chain calls\n     * @example stackedBar.colorMap({groupName: 'colorHex', groupName2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x        Desired colorSchema for the graph\n     * @return { String | module}   Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the emptyDataConfig of the chart. If set and data is empty (quantity\n     * adds up to zero or there are no entries), the chart will render an empty slice\n     * with a given color (light gray by default)\n     * @param  {Object} _x          EmptyDataConfig object to get/set\n     * @return { Object | module}   Current config for when chart data is an empty array\n     * @public\n     * @example donutChart.emptyDataConfig({showEmptySlice: true, emptySliceColor: '#000000'})\n     */\n    exports.emptyDataConfig = function (_x) {\n        if (!arguments.length) {\n            return emptyDataConfig;\n        }\n        emptyDataConfig = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the externalRadius of the chart\n     * @param  {Number} _x              ExternalRadius number to get/set\n     * @return { (Number | Module) }    Current externalRadius or Donut Chart module to chain calls\n     * @public\n     */\n    exports.externalRadius = function (_x) {\n        if (!arguments.length) {\n            return externalRadius;\n        }\n        externalRadius = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasCenterLegend property of the chart, making it display\n     * legend at the center of the donut.\n     *\n     * @param  {boolean} _x         If we want to show legent at the center of the donut\n     * @return {boolean | Module}   Current hasCenterLegend flag or Chart module\n     * @public\n     */\n    exports.hasCenterLegend = function (_x) {\n        if (!arguments.length) {\n            return hasCenterLegend;\n        }\n        hasCenterLegend = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasHoverAnimation property of the chart. By default,\n     * donut chart highlights the hovered slice. This property explicitly\n     * disables this hover behavior.\n     * @param  {boolean} _x         Decide whether hover slice animation should be enabled\n     * @return {boolean | module}   Current hasHoverAnimation flag or Chart module\n     * @public\n     */\n    exports.hasHoverAnimation = function (_x) {\n        if (!arguments.length) {\n            return hasHoverAnimation;\n        }\n        hasHoverAnimation = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasFixedHighlightedSlice property of the chart, making it to\n     * highlight the selected slice id set with `highlightSliceById` all the time.\n     *\n     * @param  {boolean} _x         If we want to make the highlighted slice permanently highlighted\n     * @return {boolean | module}   Current hasFixedHighlightedSlice flag or Chart module\n     * @public\n     */\n    exports.hasFixedHighlightedSlice = function (_x) {\n        if (!arguments.length) {\n            return hasFixedHighlightedSlice;\n        }\n        hasFixedHighlightedSlice = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or sets the hasLastHoverSliceHighlighted property.\n     * If property is true, the last hovered slice will be highlighted\n     * after 'mouseout` event is triggered. The last hovered slice will remain\n     * in highlight state.\n     * Note: if both hasFixedHighlightedSlice and hasLastHoverSliceHighlighted\n     * are true, the latter property will override the former.\n     * @param {boolean} _x          Decide whether the last hovered slice should be highlighted\n     * @return {boolean | module}   Current hasLastHoverSliceHighlighted value or Chart module\n     * @public\n     */\n    exports.hasLastHoverSliceHighlighted = function (_x) {\n        if (!arguments.length) {\n            return hasLastHoverSliceHighlighted;\n        }\n        hasLastHoverSliceHighlighted = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x              Desired width for the graph\n     * @return { (Number | Module) }    Current height or Donut Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the id of the slice to highlight\n     * @param  {Number} _x              Slice id\n     * @return { (Number | Module) }    Current highlighted slice id or Donut Chart module to chain calls\n     * @public\n     */\n    exports.highlightSliceById = function (_x) {\n        if (!arguments.length) {\n            return highlightedSliceId;\n        }\n        highlightedSliceId = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the internalRadius of the chart\n     * @param  {Number} _x              InternalRadius number to get/set\n     * @return { (Number | Module) }    Current internalRadius or Donut Chart module to chain calls\n     * @public\n     */\n    exports.internalRadius = function (_x) {\n        if (!arguments.length) {\n            return internalRadius;\n        }\n        internalRadius = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * By default this is 'false'\n     *\n     * @param  {Boolean} _x             Desired animation flag\n     * @return { Boolean | module}      Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x              Margin object to get/set\n     * @return { (Object | Module) }    Current margin or Donut Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the donut chart\n     * @param  {string} _x          Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}    Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut and customClick\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Changes the order of items given custom function\n     * @param  {Function} _x              A custom function that sets logic for ordering\n     * @return { (Function | Module) }    Void function with no return\n     * @public\n     */\n    exports.orderingFunction = function (_x) {\n        if (!arguments.length) {\n            return orderingFunction;\n        }\n        orderingFunction = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the percentage format for the percentage label\n     * @param  {String} _x              Format for the percentage label (e.g. '.1f')\n     * @return { (Number | Module) }    Current format or Donut Chart module to chain calls\n     * @public\n     */\n    exports.percentageFormat = function (_x) {\n        if (!arguments.length) {\n            return percentageFormat;\n        }\n        percentageFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the radiusHoverOffset of the chart\n     * @param  {Number} _x              Desired offset for the hovered slice\n     * @return { (Number | Module) }    Current offset or Donut Chart module to chain calls\n     * @public\n     */\n    exports.radiusHoverOffset = function (_x) {\n        if (!arguments.length) {\n            return radiusHoverOffset;\n        }\n        radiusHoverOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x              Desired width for the graph\n     * @return { (Number | Module) }    Current width or Donut Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { format } from 'd3-format';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\n\nimport * as textHelper from '../helpers/text';\nimport colorHelper from '../helpers/color';\n\n/**\n * @fileOverview Legend Component reusable API class that renders a\n * simple and configurable legend element.\n *\n * @module Legend\n * @tutorial legend\n * @exports charts/legend\n * @requires d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * const donutChart = donut(),\n *     legendBox = legend();\n *\n * donutChart\n *     .externalRadius(500)\n *     .internalRadius(200)\n *     .on('customMouseOver', function(data) {\n *         legendBox.highlight(data.data.id);\n *     })\n *     .on('customMouseOut', function() {\n *         legendBox.clearHighlight();\n *     });\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(donutChart);\n *\n * d3Selection.select('.other-css-selector')\n *     .datum(dataset)\n *     .call(legendBox);\n *\n */\n\n/**\n * @typedef LegendChartData\n * @type {Object[]}\n * @property {Number} id        Id of the group (required)\n * @property {String} name      Name of the group (required)\n * @property {Number} quantity  Quantity of the group (optional)\n *\n * @example\n * [\n *     {\n *         id: 1,\n *         quantity: 2,\n *         name: 'glittering'\n *     },\n *     {\n *         id: 2,\n *         quantity: 3,\n *         name: 'luminous'\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 5,\n            right: 5,\n            bottom: 5,\n            left: 5,\n        },\n        width = 320,\n        height = 180,\n        textSize = 12,\n        textLetterSpacing = 0.5,\n        markerSize = 16,\n        markerYOffset = -(textSize - 2) / 2,\n        marginRatio = 1.5,\n        valueReservedSpace = 40,\n        numberLetterSpacing = 0.8,\n        numberFormat = 's',\n        unit = '',\n        isFadedClassName = 'is-faded',\n        isHorizontal = false,\n        highlightedEntryId = null,\n        hasQuantities = true,\n        // colors\n        colorScale,\n        nameToColorMap = null,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        getId = ({ id }) => id,\n        getName = ({ name }) => name,\n        getFormattedQuantity = ({ quantity }) =>\n            format(numberFormat)(quantity) + unit,\n        getMarkerFill = ({ name }) => {\n            if (nameToColorMap !== null) {\n                return nameToColorMap[name]\n                    ? nameToColorMap[name]\n                    : colorScale(name);\n            }\n\n            return colorScale(name);\n        },\n        hasQuantity = ({ quantity }) =>\n            typeof quantity === 'number' || typeof quantity === 'string',\n        entries,\n        chartWidth,\n        chartHeight,\n        data,\n        svg;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {LegendChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            buildColorScale();\n            buildSVG(this);\n\n            if (isHorizontal) {\n                drawHorizontalLegend();\n            } else {\n                drawVerticalLegend();\n            }\n\n            if (highlightedEntryId) {\n                cleanFadedLines();\n                fadeLinesBut(highlightedEntryId);\n            }\n        });\n    }\n\n    /**\n     * Depending on the size of the horizontal legend, we are going to add a new\n     * line with the last entry of the legend\n     * @return {void}\n     * @private\n     */\n    function adjustLines() {\n        let lineWidth =\n            svg.select('.legend-line').node().getBoundingClientRect().width +\n            markerSize;\n        let lineWidthSpace = chartWidth - lineWidth;\n\n        if (lineWidthSpace <= 0) {\n            splitInLines();\n        }\n\n        centerInlineLegendOnSVG();\n    }\n\n    /**\n     * Builds containers for the legend\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('legend-container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        container.append('g').classed('legend-group', true);\n    }\n\n    /**\n     * Builds color scale for chart\n     * @private\n     */\n    function buildColorScale() {\n        colorScale = scaleOrdinal().range(colorSchema);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart britechart-legend', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Centers the legend on the chart given that is a single line of labels\n     * @return {void}\n     * @private\n     */\n    function centerInlineLegendOnSVG() {\n        let legendGroupSize =\n            svg\n                .select('g.legend-container-group')\n                .node()\n                .getBoundingClientRect().width + getLineElementMargin();\n        let emptySpace = width - legendGroupSize;\n        let newXPosition = emptySpace / 2;\n\n        if (emptySpace > 0) {\n            svg.select('g.legend-container-group').attr(\n                'transform',\n                `translate(${newXPosition},0)`\n            );\n        }\n    }\n\n    /**\n     * Centers the legend on the chart given that is a stack of labels\n     * @return {void}\n     * @private\n     */\n    function centerVerticalLegendOnSVG() {\n        let legendGroupSize = svg\n            .select('g.legend-container-group')\n            .node()\n            .getBoundingClientRect().width;\n        let emptySpace = width - legendGroupSize;\n        let newXPosition = emptySpace / 2 - legendGroupSize / 2;\n\n        if (emptySpace > 0) {\n            svg.select('g.legend-container-group').attr(\n                'transform',\n                `translate(${newXPosition},0)`\n            );\n        }\n    }\n\n    /**\n     * Makes sure the types of the data are right and checks if it has quantities\n     * @param {LegendChartData} data\n     * @private\n     */\n    function cleanData(data) {\n        hasQuantities = data.filter(hasQuantity).length === data.length;\n\n        return data.reduce((acc, d) => {\n            if (d.quantity !== undefined && d.quantity !== null) {\n                d.quantity = +d.quantity;\n            }\n            d.name = String(d.name);\n            d.id = +d.id;\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Removes the faded class from all the entry lines\n     * @private\n     */\n    function cleanFadedLines() {\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .classed(isFadedClassName, false);\n    }\n\n    /**\n     * Draws the entries of the legend within a single line\n     * @private\n     */\n    function drawHorizontalLegend() {\n        let xOffset = markerSize;\n\n        svg.select('.legend-group').selectAll('g').remove();\n\n        // We want a single line\n        svg.select('.legend-group').append('g').classed('legend-line', true);\n\n        // And one entry per data item\n        entries = svg\n            .select('.legend-line')\n            .selectAll('g.legend-entry')\n            .data(data);\n\n        // Enter\n        entries\n            .enter()\n            .append('g')\n            .classed('legend-entry', true)\n            .attr('data-item', getId)\n            .attr('transform', function ({ name }) {\n                let horizontalOffset = xOffset,\n                    lineHeight = chartHeight / 2,\n                    verticalOffset = lineHeight,\n                    labelWidth = textHelper.getTextWidth(name, textSize);\n\n                xOffset += markerSize + 2 * getLineElementMargin() + labelWidth;\n\n                return `translate(${horizontalOffset},${verticalOffset})`;\n            })\n            .merge(entries)\n            .append('circle')\n            .classed('legend-circle', true)\n            .attr('cx', markerSize / 2)\n            .attr('cy', markerYOffset)\n            .attr('r', markerSize / 2)\n            .style('fill', getMarkerFill)\n            .style('stroke-width', 1);\n\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-name', true)\n            .text(getName)\n            .attr('x', getLineElementMargin())\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${textLetterSpacing}px`);\n\n        // Exit\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .exit()\n            .transition()\n            .style('opacity', 0)\n            .remove();\n\n        adjustLines();\n    }\n\n    /**\n     * Draws the entries of the legend\n     * @private\n     */\n    function drawVerticalLegend() {\n        svg.select('.legend-group').selectAll('g').remove();\n\n        entries = svg\n            .select('.legend-group')\n            .selectAll('g.legend-line')\n            .data(data);\n\n        // Enter\n        entries\n            .enter()\n            .append('g')\n            .classed('legend-line', true)\n            .append('g')\n            .classed('legend-entry', true)\n            .attr('data-item', getId)\n            .attr('transform', function (d, i) {\n                let horizontalOffset = markerSize + getLineElementMargin(),\n                    lineHeight = chartHeight / (data.length + 1),\n                    verticalOffset = (i + 1) * lineHeight;\n\n                return `translate(${horizontalOffset},${verticalOffset})`;\n            })\n            .merge(entries)\n            .append('circle')\n            .classed('legend-circle', true)\n            .attr('cx', markerSize / 2)\n            .attr('cy', markerYOffset)\n            .attr('r', markerSize / 2)\n            .style('fill', getMarkerFill)\n            .style('stroke-width', 1);\n\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-name', true)\n            .text(getName)\n            .attr('x', getLineElementMargin())\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${textLetterSpacing}px`);\n\n        if (hasQuantities) {\n            writeEntryValues();\n        } else {\n            centerVerticalLegendOnSVG();\n        }\n\n        // Exit\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .exit()\n            .transition()\n            .style('opacity', 0)\n            .remove();\n    }\n\n    /**\n     * Applies the faded class to all lines but the one that has the given id\n     * @param  {number} exceptionItemId Id of the line that needs to stay the same\n     * @private\n     */\n    function fadeLinesBut(exceptionItemId) {\n        let classToFade = 'g.legend-entry';\n        let entryLine = svg.select(`[data-item=\"${exceptionItemId}\"]`);\n\n        if (entryLine.nodes().length) {\n            svg.select('.legend-group')\n                .selectAll(classToFade)\n                .classed(isFadedClassName, true);\n\n            entryLine.classed(isFadedClassName, false);\n        }\n    }\n\n    /**\n     * Calculates the margin between elements of the legend\n     * @return {Number} Margin to apply between elements\n     * @private\n     */\n    function getLineElementMargin() {\n        return marginRatio * markerSize;\n    }\n\n    /**\n     * Simple method to move the last item of an overflowing legend into the next line\n     * @return {void}\n     * @private\n     */\n    function splitInLines() {\n        let legendEntries = svg.selectAll('.legend-entry');\n        let numberOfEntries = legendEntries.size();\n        let lineHeight = (chartHeight / 2) * 1.7;\n        let newLine = svg\n            .select('.legend-group')\n            .append('g')\n            .classed('legend-line', true)\n            .attr('transform', `translate(0, ${lineHeight})`);\n        let lastEntry = legendEntries.filter(`:nth-child(${numberOfEntries})`);\n\n        lastEntry.attr('transform', `translate(${markerSize},0)`);\n        newLine.append(() => lastEntry.node());\n    }\n\n    /**\n     * Draws the data entry quantities within the legend-entry lines\n     * @return {void}\n     * @private\n     */\n    function writeEntryValues() {\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-value', true)\n            .text(getFormattedQuantity)\n            .attr('x', chartWidth - valueReservedSpace)\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${numberLetterSpacing}px`)\n            .style('text-anchor', 'end')\n            .style('startOffset', '100%');\n    }\n\n    // API\n\n    /**\n     * Command that clears all highlighted entries on a legend instance\n     * @public\n     */\n    exports.clearHighlight = function () {\n        cleanFadedLines();\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Legend module to chain calls\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {array} [_x=colorHelper.colorSchemas.britecharts]    Color scheme array to get/set\n     * @return {number | module}                                    Current colorSchema or Legend module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the legend chart\n     * @param  {number} [_x=180]        Desired width for the chart in pixels\n     * @return {height | module}    Current height or Legend module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Command that highlights a line entry by fading the rest of lines on a legend instance\n     * @param  {number} entryId     ID of the entry line\n     * @public\n     */\n    exports.highlight = function (entryId) {\n        cleanFadedLines();\n        fadeLinesBut(entryId);\n    };\n\n    /**\n     * Gets or Sets the id of the entry to highlight\n     * @param  {Number} [_x=null]           Entry id\n     * @return { (Number | Module) }        Current highlighted slice id or Donut Chart module to chain calls\n     * @public\n     */\n    exports.highlightEntryById = function (_x) {\n        if (!arguments.length) {\n            return highlightedEntryId;\n        }\n        highlightedEntryId = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the horizontal mode on the legend\n     * @param  {Boolean} [_x=false]     Desired horizontal mode for the graph\n     * @return {Boolean | module}   If it is horizontal or Legend module to chain calls\n     * @public\n     */\n    exports.isHorizontal = function (_x) {\n        if (!arguments.length) {\n            return isHorizontal;\n        }\n        isHorizontal = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the legend chart\n     * @param  {object} _x          Margin object to get/set\n     * @return {object | module}    Current margin or Legend module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin ratio of the legend chart.\n     * Used to determine spacing between legend elements.\n     * @param  {number} [_x=1.5]    Margin Ratio to get/set\n     * @return {number | module}    Current marginRatio or Legend module to chain calls\n     * @public\n     */\n    exports.marginRatio = function (_x) {\n        if (!arguments.length) {\n            return marginRatio;\n        }\n        marginRatio = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the markerSize of the legend chart.\n     * This markerSize will determine the horizontal and vertical size of the colored marks\n     * added as color identifiers for the chart's categories.\n     *\n     * @param  {object} [_x=16]         Margin object to get/set\n     * @return {object | module}    Current markerSize or Legend module to chain calls\n     * @public\n     */\n    exports.markerSize = function (_x) {\n        if (!arguments.length) {\n            return markerSize;\n        }\n        markerSize = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the legend chart\n     * @param  {string[]} _x = 's'      Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current number format or Legend module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the unit of the value\n     * @param  {String} [_x='']     Desired unit\n     * @return {String | module}    Current unit or Legend module to chain calls\n     * @public\n     */\n    exports.unit = function (_x) {\n        if (!arguments.length) {\n            return unit;\n        }\n        unit = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the legend chart\n     * @param  {number} [_x=320]    Desired width for the graph in pixels\n     * @return {number | module}    Current width or Legend module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","const localeTimeMap = {\n    minute: { minute: 'numeric' },\n    hour: { hour: 'numeric' },\n    day: { day: 'numeric' },\n    daymonth: { day: 'numeric', month: 'short' },\n    month: { month: 'short' },\n    year: { year: 'numeric' },\n};\n\n/**\n * Calculates a new date by summing a given amount of days to a given date\n * @param  {String}  startDate      Date\n * @param  {Number}  days           Number of days to add\n * @return {String}                 Offsetted date\n * @private\n */\nexport const addDays = (startDate, days) => {\n    const result = new Date(startDate);\n\n    result.setDate(result.getDate() + days);\n\n    return String(result);\n};\n\n/**\n * Calculates difference between dates in days\n * @param  {String}  startDate  Date in string form\n * @param  {String}  endDate    Date in string form\n * @return {Number}             Number of days between dates\n * @private\n */\nexport const diffDays = (startDate, endDate) => {\n    const oneDayInMilliseconds = 24 * 60 * 60 * 1000;\n\n    return Math.ceil(\n        Math.abs(\n            (new Date(startDate).getTime() - new Date(endDate).getTime()) /\n                oneDayInMilliseconds\n        )\n    );\n};\n\n/**\n * Takes a number representing milliseconds and convert to days\n * @param  {Number} milliseconds    Any number of days in milliseconds\n * @return {Number}                 Number of days that the input represents\n * @private\n */\nexport const convertMillisecondsToDays = (milliseconds) =>\n    Math.ceil(milliseconds / (24 * 60 * 60 * 1000));\n\n/**\n * Takes a locale (string) and the format to return and returns a function to format dates\n * @param  {String} locale              Locale tag eg. en-US, fr-FR, ru-RU\n * @param  {String} [timeUnit='day']    One of minute, hour, day, daymonth, month, year\n * @return {Function}                   Function that formats dates in the proper locale\n * @private\n */\nexport const getLocaleDateFormatter = (locale, timeUnit = 'day') => {\n    let options = localeTimeMap[timeUnit];\n    let formatter = new Intl.DateTimeFormat(locale, options);\n\n    return (date) => formatter.format(date);\n};\n\nexport default {\n    addDays,\n    convertMillisecondsToDays,\n    diffDays,\n    getLocaleDateFormatter,\n};\n","import { timeHour, timeDay, timeMonth, timeYear } from 'd3-time';\nimport { timeFormat } from 'd3-time-format';\n\nimport { axisTimeCombinations, timeBenchmarks } from './constants';\nimport { convertMillisecondsToDays, getLocaleDateFormatter } from './date';\n\nconst singleTickWidth = 20;\nconst horizontalTickSpacing = 50;\nconst minEntryNumForDayFormat = 5;\n\nconst formatMap = {\n    minute: timeFormat('%M m'),\n    hour: timeFormat('%H %p'),\n    day: timeFormat('%e'),\n    daymonth: timeFormat('%d %b'),\n    month: timeFormat('%b'),\n    year: timeFormat('%Y'),\n};\nconst settingsToMajorTickMap = {\n    [axisTimeCombinations.MINUTE_HOUR]: timeHour.every(1),\n    [axisTimeCombinations.HOUR_DAY]: timeDay.every(1),\n    [axisTimeCombinations.DAY_MONTH]: timeMonth.every(1),\n    [axisTimeCombinations.MONTH_YEAR]: timeYear.every(1),\n};\n\n/**\n * Figures out the proper settings from the current time span\n * @param  {Number} timeSpan    Span of time charted by the graph in milliseconds\n * @return {String}             Type of settings for the given timeSpan\n * @private\n */\nconst getAxisSettingsFromTimeSpan = (timeSpan) => {\n    let { ONE_YEAR, ONE_DAY } = timeBenchmarks;\n    let settings;\n\n    if (timeSpan < ONE_DAY) {\n        settings = axisTimeCombinations.HOUR_DAY;\n    } else if (timeSpan < ONE_YEAR) {\n        settings = axisTimeCombinations.DAY_MONTH;\n    } else {\n        settings = axisTimeCombinations.MONTH_YEAR;\n    }\n\n    return settings;\n};\n\n/**\n * Calculates the maximum number of ticks for the x axis\n * @param  {Number} width               Chart width\n * @param  {Number} dataPointNumber     Number of entries on the data\n * @return {Number}                     Number of ticks to render\n * @private\n */\nconst getMaxNumOfHorizontalTicks = (width, dataPointNumber) => {\n    let ticksForWidth = Math.ceil(\n        width / (singleTickWidth + horizontalTickSpacing)\n    );\n\n    return dataPointNumber < minEntryNumForDayFormat\n        ? timeDay\n        : Math.min(dataPointNumber, ticksForWidth);\n};\n\n/**\n * Calculates the maximum number of ticks for the x axis\n * with respect to number ranges\n * @param  {Number} width               Chart width\n * @param  {Number} dataPointNumber     Number of entries on the data\n * @return {Number}                     Number of ticks to render\n * @private\n */\nconst getMaxNumOfHorizontalTicksForNumberRanges = (width, dataPointNumber) => {\n    let ticksForWidth = Math.ceil(\n        width / (singleTickWidth + horizontalTickSpacing)\n    );\n\n    return Math.min(dataPointNumber, ticksForWidth);\n};\n\n/**\n * Returns tick object to be used when building the x axis\n * @param {dataByDate} dataByDate       Chart data ordered by Date\n * @param {Number} width                Chart width\n * @param {String} [settings=null]      Optional forced settings for axis, a combination of one of minute, hour, day, daymonth, month, year separated by '-'\n * @param {String} [locale=null]        Optional forced locale\n * @return {object}                     Tick settings for major and minr axis\n * @private\n */\nexport const getTimeSeriesAxis = (\n    dataByDate,\n    width,\n    settings = null,\n    locale = null\n) => {\n    const firstDate = new Date(dataByDate[0].date);\n    const lastDate = new Date(dataByDate[dataByDate.length - 1].date);\n    const dateTimeSpan = lastDate - firstDate;\n\n    if (\n        locale &&\n        (typeof Intl === 'undefined' ||\n            (typeof Intl === 'object' && !Intl.DateTimeFormat))\n    ) {\n        locale = null;\n    }\n\n    if (!settings) {\n        settings = getAxisSettingsFromTimeSpan(dateTimeSpan);\n    }\n\n    const [minor, major] = settings.split('-');\n    const majorTickValue = settingsToMajorTickMap[settings];\n    const minorTickValue = getMaxNumOfHorizontalTicks(\n        width,\n        convertMillisecondsToDays(dateTimeSpan)\n    );\n\n    return {\n        minor: {\n            format: locale\n                ? getLocaleDateFormatter(locale, minor)\n                : formatMap[minor],\n            tick: minorTickValue,\n        },\n        major: {\n            format: locale\n                ? getLocaleDateFormatter(locale, major)\n                : formatMap[major],\n            tick: majorTickValue,\n        },\n    };\n};\n\n/**\n * Returns tick object to be used when building the x axis\n * @param {dataSorted} dataSorted       Chart data ordered by Date\n * @param {Number} width                Chart width\n * @param {String} [settings=null]      Optional forced settings for axis\n * @return {object} tick settings for minor axis\n * @private\n */\nexport const getSortedNumberAxis = (dataSorted, width) => {\n    const firstEntry = dataSorted[0].date;\n    const lastEntry = dataSorted[dataSorted.length - 1].date;\n    const timeSpan = lastEntry - firstEntry;\n\n    const minorTickValue = getMaxNumOfHorizontalTicksForNumberRanges(\n        width,\n        timeSpan\n    );\n\n    return {\n        tick: minorTickValue,\n    };\n};\n\nexport default {\n    getTimeSeriesAxis,\n    getSortedNumberAxis,\n};\n","const filterId = 'highlight-filter';\n\nexport const createFilterContainer = (metadataSelection) => {\n    let highlightFilter = metadataSelection\n        .append('defs')\n        .append('filter')\n        .attr('id', filterId);\n\n    return highlightFilter;\n};\n\nexport const createGausianBlur = (filterSelector) => {\n    filterSelector\n        .append('feGaussianBlur')\n        .attr('stdDeviation', 1)\n        .attr('result', 'coloredBlur');\n\n    return filterId;\n};\n\nexport const createGlow = (filterSelector) => {\n    filterSelector\n        .attr('x', '-30%')\n        .attr('y', '-30%')\n        .attr('width', '160%')\n        .attr('height', '160%');\n\n    filterSelector\n        .append('feGaussianBlur')\n        .attr('stdDeviation', '0.9 0.9')\n        .attr('result', 'glow');\n\n    let merge = filterSelector.append('feMerge');\n\n    merge.append('feMergeNode').attr('in', 'glow');\n\n    merge.append('feMergeNode').attr('in', 'glow');\n\n    merge.append('feMergeNode').attr('in', 'glow');\n\n    return filterId;\n};\n\nexport const createGlowWithMatrix = (filterSelector) => {\n    let colorMatrix = '0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0';\n\n    filterSelector\n        .attr('x', '-500%')\n        .attr('y', '-500%')\n        .attr('width', '1800%')\n        .attr('height', '1800%');\n\n    filterSelector\n        .append('feColorMatrix')\n        .attr('type', 'matrix')\n        .attr('values', colorMatrix);\n\n    filterSelector\n        .append('feGaussianBlur')\n        .attr('stdDeviation', '1')\n        .attr('result', 'coloredBlur')\n        .attr('in', 'SourceGraphic');\n\n    let merge = filterSelector.append('feMerge');\n\n    merge.append('feMergeNode').attr('in', 'coloredBlur');\n\n    merge.append('feMergeNode').attr('in', 'SourceGraphic');\n\n    return filterId;\n};\n\nexport const createWhiteGlow = (filterSelector) => {\n    filterSelector\n        .attr('x', '-5000%')\n        .attr('y', '-5000%')\n        .attr('width', '10000%')\n        .attr('height', '10000%');\n\n    filterSelector\n        .append('feFlood')\n        .attr('result', 'flood')\n        .attr('flood-color', '#ffffff')\n        .attr('flood-opacity', '1');\n\n    filterSelector\n        .append('feComposite')\n        .attr('result', 'mask')\n        .attr('in2', 'SourceGraphic')\n        .attr('operator', 'in')\n        .attr('in', 'flood');\n\n    filterSelector\n        .append('feMorphology')\n        .attr('result', 'dilated')\n        .attr('operator', 'dilate')\n        .attr('radius', '2')\n        .attr('in', 'mask');\n\n    filterSelector\n        .append('feGaussianBlur')\n        .attr('result', 'blurred')\n        .attr('stdDeviation', '5')\n        .attr('in', 'dilated');\n\n    let merge = filterSelector.append('feMerge');\n\n    merge.append('feMergeNode').attr('in', 'blurred');\n\n    merge.append('feMergeNode').attr('in', 'SourceGraphic');\n\n    return filterId;\n};\n\nexport const bounceCircleHighlight = (\n    el,\n    ease,\n    radius,\n    bounceRadius = radius * 2\n) => {\n    const duration = 100;\n    const delay = 50;\n\n    el.transition()\n        .ease(ease)\n        .duration(duration)\n        .attr('r', bounceRadius)\n        .transition()\n        .ease(ease)\n        .delay(delay)\n        .duration(duration)\n        .attr('r', radius);\n};\n\nexport default {\n    bounceCircleHighlight,\n    createFilterContainer,\n    createGausianBlur,\n    createWhiteGlow,\n    createGlow,\n    createGlowWithMatrix,\n};\n","/**\n * Casts the data given to a date or number\n * respecting the value of xAxisValueType\n * @param {string | number} value   Value data\n * @param {string} type             Type to cast to\n * @return {Date | number} value    Casted value\n * @private\n */\nexport const castValueToType = (value, type) => {\n    if (type === 'number') {\n        return Number(value);\n    }\n\n    return new Date(value);\n};\n\n/**\n * Given any type of value, checks\n * if it's strictly defined in JS terms.\n * @param {any} value           Any kind of value\n * @param {Boolean} isDefined   Whether the value is defined\n * @private\n */\nexport const isDefined = (value) => {\n    return value !== null && value !== undefined;\n};\n","import { min, max, bisector } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { nest } from 'd3-collection';\nimport { dispatch } from 'd3-dispatch';\nimport { easeQuadInOut } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { timeFormat } from 'd3-time-format';\nimport { scaleOrdinal, scaleTime, scaleLinear, scaleLog } from 'd3-scale';\nimport { line } from 'd3-shape';\nimport { select, mouse, touch } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport colorHelper from '../helpers/color';\nimport { lineLoadingMarkup } from '../helpers/load';\nimport { getTimeSeriesAxis, getSortedNumberAxis } from '../helpers/axis';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport { axisTimeCombinations, curveMap, motion } from '../helpers/constants';\nimport {\n    createFilterContainer,\n    createGlowWithMatrix,\n    bounceCircleHighlight,\n} from '../helpers/filter';\nimport {\n    formatIntegerValue,\n    formatDecimalValue,\n    isInteger,\n    uniqueId,\n} from '../helpers/number';\nimport { castValueToType } from '../helpers/type';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\n/**\n * Line Chart reusable API module that allows us\n * rendering a multi line and configurable chart.\n *\n * @module Line\n * @tutorial line\n * @requires d3-array, d3-axis, d3-collection, d3-dispatch, d3-ease, d3-format, d3-time-format, d3-scale, d3-shape, d3-selection, d3-transition\n *\n * @example\n * let lineChart = line();\n *\n * lineChart\n *     .width(500);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(lineChart);\n *\n */\n\n/**\n * @typedef D3Selection\n * @type {Array[]}\n * @property {number} length            Size of the selection\n * @property {DOMElement} parentNode    Parent of the selection\n */\n\n/**\n * @typedef LineChartFlatData\n * @type {object}\n * @property {string} topicName    Topic name (required)\n * @property {number} topic        Topic identifier (required)\n * @property {object[]} dates      All date entries with values for that topic in ISO8601 format (required)\n *\n * @example\n * [\n *     {\n *         topicName: 'San Francisco',\n *         name: 123,\n *         date: '2017-01-16T16:00:00-08:00',\n *         value: 1\n *     }\n * ]\n */\n\n/**\n * Former data standard, it is currently calculated internally if not passed\n * @typedef LineChartDataByTopic\n * @type {object}\n * @property {string} topicName    Topic name (required)\n * @property {number} topic        Topic identifier (required)\n * @property {object[]} dates      All date entries with values for that topic in ISO8601 format (required)\n *\n * @example\n * {\n *     topicName: 'San Francisco',\n *     topic: 123,\n *     dates: [\n *         {\n *             date: '2017-01-16T16:00:00-08:00',\n *             value: 1\n *         },\n *         {\n *             date: '2017-01-16T17:00:00-08:00',\n *             value: 2\n *         }\n *     ]\n * }\n */\n\n/**\n * The Data Sorted is calculated internally in the chart in order to pass it to our tooltips\n * @typedef LineChartDataSorted\n * @type {object[]}\n * @property {string} date | number        Date in ISO8601 format or number (required)]\n * @property {object[]} topics     List of topics with values that date (required)\n *\n * @example\n * [\n *     {\n *         date: \"2015-06-27T07:00:00.000Z\",\n *         topics: [\n *             {\n *                 \"name\": 1,\n *                 \"value\": 1,\n *                 \"topicName\": \"San Francisco\"\n *             },\n *             {\n *                 \"name\": 2,\n *                 \"value\": 20,\n *                 \"topicName\": \"Los Angeles\"\n *             },\n *             {\n *                 \"name\": 3,\n *                 \"value\": 10,\n *                 \"topicName\": \"Oakland\"\n *             }\n *         ]\n *     },\n *     {...}\n * ]\n */\n\n/**\n * The data shape for the line chart.\n * Note that up to version 2.10.1, this required a \"dataByTopic\" array described on LineChartDataByTopic.\n * The \"dataByTopic\" schema still works, but we prefer a flat dataset as described here.\n * @typedef LineChartData\n * @type {object}\n * @property {LineChartFlatData[]} data  Data values to chart (required)\n *\n * @example\n * {\n *     data: [\n *         {\n *             topicName: 'San Francisco',\n *             name: 1,\n *             date: '2017-01-16T16:00:00-08:00',\n *             value: 1\n *         },\n *         {\n *             topicName: 'San Francisco',\n *             name: 1,\n *             date: '2017-01-17T16:00:00-08:00',\n *             value: 2\n *         },\n *         {\n *             topicName: 'Oakland',\n *             name: 2,\n *             date: '2017-01-16T16:00:00-08:00',\n *             value: 3\n *         },\n *         {\n *             topicName: 'Oakland',\n *             name: 2,\n *             date: '2017-01-17T16:00:00-08:00',\n *             value: 7\n *         }\n *     ]\n * }\n */\nexport default function module() {\n    let margin = {\n            top: 60,\n            right: 30,\n            bottom: 40,\n            left: 70,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        tooltipThreshold = 480,\n        svg,\n        paths,\n        chartWidth,\n        chartHeight,\n        xScale,\n        yScale,\n        colorScale,\n        xAxis,\n        xSubAxis,\n        yAxis,\n        xAxisPadding = {\n            top: 0,\n            left: 15,\n            bottom: 0,\n            right: 0,\n        },\n        verticalShift = 30,\n        monthAxisPadding = 30,\n        tickPadding = 5,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        nameToColorMap = null,\n        singleLineGradientColors = colorHelper.colorGradients.greenBlue,\n        linearGradient,\n        lineGradientId = uniqueId('one-line-gradient'),\n        highlightFilter = null,\n        highlightFilterId = null,\n        highlightCircleSize = 12,\n        highlightCircleRadius = 5,\n        highlightCircleStroke = 2,\n        highlightCircleStrokeAll = 5,\n        highlightCircleActiveRadius = highlightCircleRadius + 2,\n        highlightCircleActiveStrokeWidth = 5,\n        highlightCircleActiveStrokeOpacity = 0.6,\n        xAxisValueType = 'date',\n        xAxisScale = 'linear',\n        xAxisFormat = null,\n        xTicks = null,\n        xAxisCustomFormat = null,\n        locale,\n        shouldShowAllDataPoints = false,\n        isAnimated = false,\n        ease = easeQuadInOut,\n        animationDuration = motion.duration,\n        strokeDashoffset = 10,\n        strokeDasharrayOffset = 3,\n        lineCurve = 'linear',\n        dataByTopic,\n        dataSorted,\n        dateLabel = 'date',\n        valueLabel = 'value',\n        topicLabel = 'topic',\n        topicNameLabel = 'topicName',\n        xAxisLabel = null,\n        xAxisLabelEl = null,\n        xAxisLabelPadding = 36,\n        yAxisLabel = null,\n        yAxisLabelEl = null,\n        yAxisLabelPadding = 36,\n        yTicks = 5,\n        hasMinimumValueScale = false,\n        overlay,\n        overlayColor = 'rgba(0, 0, 0, 0)',\n        verticalMarkerContainer,\n        verticalMarkerLine,\n        numberFormat,\n        customLines = [],\n        defaultCustomLineColor = colorHelper.colorSchemas.grey[3],\n        grid = null,\n        baseLineX,\n        baseLineY,\n        pathYCache = {},\n        // extractors\n        getDate = ({ date }) => date,\n        getValue = ({ value }) => value,\n        getTopic = ({ topic }) => topic,\n        getVariableTopicName = (d) => d[topicNameLabel],\n        getLineColor = ({ topic }) => nameToColorMap[topic],\n        // events\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customDataEntryClick',\n            'customTouchMove'\n        );\n\n    const acceptNullValue = (value) => (value === null ? null : +value);\n\n    /**\n     * This function creates the graph using the selection and data provided\n     *\n     * @param {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {LineChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            ({ dataByTopic, dataSorted: dataSorted } = cleanData(_data));\n\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildScales();\n            buildAxis();\n            drawAxis();\n            buildGradient();\n            drawLines();\n            animateLine();\n\n            if (shouldShowTooltip()) {\n                drawHoverOverlay();\n                drawVerticalMarker();\n                addMouseEvents();\n            }\n\n            if (shouldShowAllDataPoints) {\n                drawAllDataPoints();\n            }\n\n            addTouchEvents();\n        });\n    }\n\n    /**\n     * Adds a filter to the element\n     * @param {DOMElement} el\n     * @private\n     */\n    function addGlowFilter(el) {\n        if (!highlightFilter) {\n            highlightFilter = createFilterContainer(\n                svg.select('.metadata-group')\n            );\n            highlightFilterId = createGlowWithMatrix(highlightFilter);\n        }\n\n        let glowEl = select(el);\n\n        glowEl\n            .style('stroke-width', highlightCircleActiveStrokeWidth)\n            .style('stroke-opacity', highlightCircleActiveStrokeOpacity)\n            .attr('filter', `url(#${highlightFilterId})`);\n\n        bounceCircleHighlight(glowEl, ease, highlightCircleRadius);\n    }\n\n    /**\n     * Adds events to the container group if the environment is not mobile\n     * Adding: mouseover, mouseout and mousemove\n     */\n    function addMouseEvents() {\n        svg.on('mouseover', function (d) {\n            handleMouseOver(this, d);\n        })\n            .on('mouseout', function (d) {\n                handleMouseOut(this, d);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d);\n            });\n    }\n\n    /**\n     * Adds events to the container group for the mobile environment\n     * Adding: touchmove\n     * @private\n     */\n    function addTouchEvents() {\n        svg.on('touchmove', function (d) {\n            handleTouchMove(this, d);\n        });\n    }\n\n    /**\n     * Adjusts the position of the y axis' ticks\n     * @param  {D3Selection} selection Y axis group\n     * @return void\n     */\n    function adjustYTickLabels(selection) {\n        selection.selectAll('.tick text').attr('transform', 'translate(0, -7)');\n    }\n\n    /**\n     * Formats the value depending on its characteristics\n     * @param  {number} value Value to format\n     * @return {number}       Formatted value\n     */\n    function getFormattedValue(value) {\n        let formatFn;\n\n        if (isInteger(value)) {\n            formatFn = formatIntegerValue;\n        } else {\n            formatFn = formatDecimalValue;\n        }\n\n        if (numberFormat) {\n            formatFn = format(numberFormat);\n        }\n\n        return formatFn(value);\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis() {\n        let minor, major;\n\n        if (xAxisValueType === 'number') {\n            minor = getSortedNumberAxis(dataSorted, width);\n            major = null;\n\n            if (xAxisScale === 'logarithmic') {\n                xAxis = axisBottom(xScale)\n                    .ticks(minor.tick, 'e')\n                    .tickFormat(function (d) {\n                        const log = Math.log(d) / Math.LN10;\n\n                        return Math.abs(Math.round(log) - log) < 1e-6\n                            ? '10^' + Math.round(log)\n                            : '';\n                    });\n            } else {\n                xAxis = axisBottom(xScale)\n                    .ticks(minor.tick)\n                    .tickFormat(getFormattedValue);\n            }\n        } else {\n            if (\n                xAxisFormat === 'custom' &&\n                typeof xAxisCustomFormat === 'string'\n            ) {\n                minor = {\n                    tick: xTicks,\n                    format: timeFormat(xAxisCustomFormat),\n                };\n                major = null;\n            } else {\n                ({ minor, major } = getTimeSeriesAxis(\n                    dataSorted,\n                    width,\n                    xAxisFormat,\n                    locale\n                ));\n\n                xSubAxis = axisBottom(xScale)\n                    .ticks(major.tick)\n                    .tickSize(0, 0)\n                    .tickFormat(major.format);\n            }\n\n            xAxis = axisBottom(xScale)\n                .ticks(minor.tick)\n                .tickSize(10, 0)\n                .tickPadding(tickPadding)\n                .tickFormat(minor.format);\n        }\n\n        yAxis = axisLeft(yScale)\n            .ticks(yTicks)\n            .tickSize([0])\n            .tickPadding(tickPadding)\n            .tickFormat(getFormattedValue);\n\n        drawGridLines(minor.tick, yTicks);\n        drawCustomLines();\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * NOTE: The order of drawing of this group elements is really important,\n     * as everything else will be drawn on top of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('axis x', true);\n        container\n            .selectAll('.x-axis-group')\n            .append('g')\n            .classed('axis sub-x', true);\n        container\n            .append('g')\n            .classed('y-axis-group', true)\n            .append('g')\n            .classed('axis y', true);\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('custom-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Builds the gradient element to be used later\n     * @return {void}\n     */\n    function buildGradient() {\n        if (!linearGradient) {\n            linearGradient = svg\n                .select('.metadata-group')\n                .append('linearGradient')\n                .attr('id', lineGradientId)\n                .attr('x1', '0%')\n                .attr('y1', '0%')\n                .attr('x2', '100%')\n                .attr('y2', '0%')\n                .attr('gradientUnits', 'userSpaceOnUse')\n                .selectAll('stop')\n                .data([\n                    { offset: '0%', color: singleLineGradientColors[0] },\n                    { offset: '100%', color: singleLineGradientColors[1] },\n                ])\n                .enter()\n                .append('stop')\n                .attr('offset', ({ offset }) => offset)\n                .attr('stop-color', ({ color }) => color);\n        }\n    }\n\n    /**\n     * Creates the x and y scales of the graph\n     * @private\n     */\n    function buildScales() {\n        xScale = buildXAxisScale();\n        yScale = buildYAxisScale();\n\n        colorScale = scaleOrdinal()\n            .range(colorSchema)\n            .domain(dataByTopic.map(getTopic));\n\n        let range = colorScale.range();\n\n        nameToColorMap =\n            nameToColorMap ||\n            colorScale.domain().reduce((memo, item, i) => {\n                memo[item] = range[i];\n\n                return memo;\n            }, {});\n    }\n\n    /**\n     * Creates the xScale depending on the settings of\n     * xAxisValueType and xAxisScale\n     * @private\n     */\n    function buildXAxisScale() {\n        let minX = min(dataByTopic, ({ dates }) => min(dates, getDate)),\n            maxX = max(dataByTopic, ({ dates }) => max(dates, getDate));\n\n        if (xAxisValueType === 'number') {\n            if (xAxisScale === 'logarithmic') {\n                return scaleLog()\n                    .domain([minX, maxX])\n                    .rangeRound([0, chartWidth]);\n            } else {\n                return scaleLinear()\n                    .domain([minX, maxX])\n                    .rangeRound([0, chartWidth]);\n            }\n        } else {\n            return scaleTime().domain([minX, maxX]).rangeRound([0, chartWidth]);\n        }\n    }\n\n    /**\n     * Creates the yScale\n     * @private\n     */\n    function buildYAxisScale() {\n        let maxY = max(dataByTopic, ({ dates }) => max(dates, getValue)),\n            minY = min(dataByTopic, ({ dates }) => min(dates, getValue));\n        let yScaleBottomValue = minY < 0 || hasMinimumValueScale ? minY : 0;\n        let yScaleTopValue = minY === 0 && maxY === 0 ? 1 : maxY;\n\n        return scaleLinear()\n            .domain([yScaleBottomValue, yScaleTopValue])\n            .rangeRound([chartHeight, 0])\n            .nice();\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     *\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart line-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Parses dates and values into JS Date objects and numbers\n     * @param  {obj} dataByTopic        Raw data grouped by topic\n     * @return {obj}                    Parsed data with dataByTopic and dataSorted\n     */\n    function cleanData({ dataByTopic, dataSorted, data }) {\n        if (!dataByTopic && !data) {\n            throw new Error(\n                'Data needs to have a dataByTopic or data property. See more in http://britecharts.github.io/britecharts/global.html#LineChartData__anchor'\n            );\n        }\n\n        // If dataByTopic or data are not present, we generate them\n        if (!dataByTopic) {\n            dataByTopic = nest()\n                .key(getVariableTopicName)\n                .entries(data)\n                .map((d) => ({\n                    topic: d.values[0]['name'],\n                    topicName: d.key,\n                    dates: d.values,\n                }));\n        } else {\n            data = dataByTopic.reduce((accum, topic) => {\n                topic.dates.forEach((date) => {\n                    accum.push({\n                        topicName: topic[topicNameLabel],\n                        name: topic[topicLabel],\n                        date: date[dateLabel],\n                        value: date[valueLabel],\n                    });\n                });\n\n                return accum;\n            }, []);\n\n            // eslint-disable-next-line no-console\n            console.warn(\n                'Lookout! You are using an old data shape (dataByTopic), please use the new flatter version as this one will be deprecated in version 4'\n            );\n        }\n\n        // Nest data by date or number and format\n        dataSorted = nest()\n            .key(getDate)\n            .entries(data)\n            .map((d) => {\n                return {\n                    date: castValueToType(d.key, xAxisValueType),\n                    topics: d.values,\n                };\n            });\n\n        const normalizedDataByTopic = dataByTopic.reduce((accum, topic) => {\n            let { dates, ...restProps } = topic;\n\n            let newDates = dates.map((d) => {\n                return {\n                    date: castValueToType(d[dateLabel], xAxisValueType),\n                    value: acceptNullValue(d[valueLabel]),\n                };\n            });\n\n            accum.push({ dates: newDates, ...restProps });\n\n            return accum;\n        }, []);\n\n        return {\n            dataByTopic: normalizedDataByTopic,\n            dataSorted,\n        };\n    }\n\n    /**\n     * Removes all the datapoints highlighter circles added to the marker container\n     * @return void\n     */\n    function cleanDataPointHighlights() {\n        verticalMarkerContainer.selectAll('.circle-container').remove();\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Creates a masking clip that would help us fake an animation if the\n     * proper flag is true\n     *\n     * @return {void}\n     */\n    function animateLine() {\n        if (isAnimated) {\n            const totalLength = paths.nodes().reduce(findLongestPath, 0);\n\n            paths\n                .attr(\n                    'stroke-dasharray',\n                    totalLength + ' ' + strokeDasharrayOffset * totalLength\n                )\n                .style('will-change', 'stroke-dasharray')\n                .attr('stroke-dashoffset', totalLength)\n                .transition()\n                .duration(animationDuration)\n                .ease(ease)\n                .attr('stroke-dashoffset', strokeDashoffset);\n        }\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups along with the axis labels if given\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group .axis.x')\n            .attr('transform', `translate(0, ${chartHeight})`)\n            .call(xAxis);\n\n        if (xAxisFormat !== 'custom' && xAxisValueType !== 'number') {\n            svg.select('.x-axis-group .axis.sub-x')\n                .attr(\n                    'transform',\n                    `translate(0, ${chartHeight + monthAxisPadding})`\n                )\n                .call(xSubAxis);\n        }\n\n        if (xAxisLabel) {\n            if (xAxisLabelEl) {\n                svg.selectAll('.x-axis-label').remove();\n            }\n            let xLabelXPosition = chartWidth / 2;\n            let xLabelYPosition =\n                chartHeight + monthAxisPadding + xAxisLabelPadding;\n\n            xAxisLabelEl = svg\n                .select('.x-axis-group')\n                .append('text')\n                .attr('x', xLabelXPosition)\n                .attr('y', xLabelYPosition)\n                .attr('text-anchor', 'middle')\n                .attr('class', 'x-axis-label')\n                .text(xAxisLabel);\n        }\n\n        svg.select('.y-axis-group .axis.y')\n            .attr('transform', `translate(${-xAxisPadding.left}, 0)`)\n            .call(yAxis)\n            .call(adjustYTickLabels);\n\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label').remove();\n            }\n            // Note this coordinates are rotated, so they are not what they look\n            let yLabelYPosition = -yAxisLabelPadding - xAxisPadding.left;\n            let yLabelXPosition = -chartHeight / 2;\n\n            yAxisLabelEl = svg\n                .select('.y-axis-group')\n                .append('text')\n                .attr('x', yLabelXPosition)\n                .attr('y', yLabelYPosition)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270)')\n                .attr('class', 'y-axis-label')\n                .text(yAxisLabel);\n        }\n    }\n\n    /**\n     * Draws the line elements within the chart group\n     * @private\n     */\n    function drawLines() {\n        let lines, topicLine;\n\n        // clear tooltip chache on path redraw\n        pathYCache = {};\n\n        topicLine = line()\n            .curve(curveMap[lineCurve])\n            .x(({ date }) => xScale(date))\n            .defined(({ value }) => value !== null)\n            .y(({ value }) => yScale(value));\n\n        lines = svg\n            .select('.chart-group')\n            .selectAll('.line')\n            .data(dataByTopic, getTopic);\n\n        paths = lines\n            .enter()\n            .append('g')\n            .attr('class', 'topic')\n            .append('path')\n            .attr('class', 'line')\n            .merge(lines)\n            .attr('id', ({ topic }) => topic)\n            .attr('d', ({ dates }) => topicLine(dates))\n            .attr('stroke', (d) =>\n                dataByTopic.length === 1\n                    ? `url(#${lineGradientId})`\n                    : getLineColor(d)\n            )\n            .attr('fill', 'none');\n\n        lines.exit().remove();\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(lineLoadingMarkup);\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * TODO: Refactor into new grid helper\n     * @return void\n     */\n    function drawGridLines(xTicks, yTicks) {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        let minY = min(dataByTopic, ({ dates }) => min(dates, getValue));\n        let shouldHighlightXAxis = minY < 0;\n\n        if (grid === 'horizontal' || grid === 'full') {\n            drawHorizontalGridLines(yTicks);\n            if (shouldHighlightXAxis) {\n                drawHorizontalHighlightLine();\n            }\n        }\n\n        if (grid === 'vertical' || grid === 'full') {\n            drawVerticalGridLines(xTicks);\n        }\n    }\n\n    /**\n     * Draws vertical gridlines of the chart\n     * These gridlines are parallel to y-axis\n     * @return {void}\n     * @private\n     */\n    function drawVerticalGridLines(xTicks) {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        baseLineY = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draw horizontal gridlinees of the chart\n     * These gridlines are parallel to x-axis\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalGridLines(yTicks) {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws a horizontal line to extend x-axis till the edges\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalExtendedLine() {\n        baseLineX = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', 0)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Adds highlight class to horizontal grid line at data = 0\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalHighlightLine() {\n        const horizontalGrid = svg\n            .select('.horizontal')\n            .selectAll('.grid-line');\n\n        horizontalGrid.attr('class', (d) =>\n            d === 0\n                ? 'grid-line horizontal-grid-line--highlighted'\n                : 'grid-line'\n        );\n    }\n\n    /**\n     * Draws custom user-defined lines onto the chart\n     * @return void\n     */\n    function drawCustomLines() {\n        svg.select('.custom-lines-group').selectAll('.custom-line').remove();\n        svg.select('.custom-lines-group')\n            .selectAll('.custom-line-annotation')\n            .remove();\n\n        let yValues = customLines.map((line) => line.y);\n\n        let getColor = (yValue) => {\n            const definedColor = customLines.find(\n                (line) => line.y === yValue\n            ).color;\n\n            if (definedColor) {\n                return definedColor;\n            }\n\n            return defaultCustomLineColor;\n        };\n\n        //draw a horizontal line to extend x-axis till the edges\n        svg.select('.custom-lines-group')\n            .selectAll('line.custom-line')\n            .data(yValues)\n            .enter()\n            .append('line')\n            .attr('class', 'custom-line')\n            .attr('x1', 0)\n            .attr('x2', chartWidth)\n            .attr('y1', (d) => yScale(d))\n            .attr('y2', (d) => yScale(d))\n            .attr('stroke', (d) => getColor(d))\n            .attr('fill', 'none');\n\n        // draw the annotations right above the line at the right end of the chart\n        for (let line of customLines) {\n            if (line.name) {\n                svg.select('.custom-lines-group')\n                    .append('text')\n                    .attr('x', chartWidth)\n                    .attr('y', yScale(line.y) - 6)\n                    .attr('class', 'custom-line-annotation')\n                    .attr('text-anchor', 'end')\n                    .attr('dominant-baseline', 'baseline')\n                    .text(line.name);\n            }\n        }\n    }\n\n    /**\n     * Draws an overlay element over the graph\n     * @inner\n     * @return void\n     */\n    function drawHoverOverlay() {\n        if (!overlay) {\n            overlay = svg\n                .select('.metadata-group')\n                .append('rect')\n                .attr('class', 'overlay')\n                .attr('y1', 0)\n                .attr('y2', height)\n                .attr('height', chartHeight)\n                .attr('width', chartWidth)\n                .attr('fill', overlayColor)\n                .style('display', 'none');\n        }\n    }\n\n    /**\n     * Draws all data points of the chart\n     * if shouldShowAllDataPoints is set to true\n     * @private\n     * @return void\n     */\n    function drawAllDataPoints() {\n        svg.select('.chart-group').selectAll('.data-points-container').remove();\n\n        const nodesById = paths.nodes().reduce((acc, node) => {\n            acc[node.id] = node;\n\n            return acc;\n        }, {});\n\n        const allTopics = dataSorted.reduce((accum, dataPoint) => {\n            const dataPointTopics = dataPoint.topics.map((topic) => ({\n                topic,\n                node: nodesById[topic.name],\n            }));\n\n            accum = [...accum, ...dataPointTopics];\n\n            return accum;\n        }, []);\n\n        let allDataPoints = svg\n            .select('.chart-group')\n            .append('g')\n            .classed('data-points-container', true)\n            .selectAll('circle')\n            .data(allTopics)\n            .enter()\n            .append('circle')\n            .classed('data-point-mark', true)\n            .attr('r', highlightCircleRadius)\n            .style('stroke-width', highlightCircleStroke)\n            .style('stroke', (d) => nameToColorMap[d.topic.name])\n            .style('cursor', 'pointer')\n            .attr('cx', (d) => xScale(new Date(d.topic.date)))\n            .attr('cy', (d) =>\n                getPathYFromX(\n                    xScale(new Date(d.topic.date)),\n                    d.node,\n                    d.topic.name\n                )\n            );\n    }\n\n    /**\n     * Creates the vertical marker\n     * @return void\n     */\n    function drawVerticalMarker() {\n        if (!verticalMarkerContainer) {\n            verticalMarkerContainer = svg\n                .select('.metadata-group')\n                .append('g')\n                .attr('class', 'hover-marker vertical-marker-container')\n                .attr('transform', 'translate(9999, 0)');\n\n            verticalMarkerLine = verticalMarkerContainer\n                .selectAll('path')\n                .data([\n                    {\n                        x1: 0,\n                        y1: 0,\n                        x2: 0,\n                        y2: 0,\n                    },\n                ])\n                .enter()\n                .append('line')\n                .classed('vertical-marker', true)\n                .attr('x1', 0)\n                .attr('y1', chartHeight)\n                .attr('x2', 0)\n                .attr('y2', 0);\n        }\n    }\n\n    /**\n     * Reduces a list of SVGPaths to their longest length\n     * @param {number} acc          Longest path until the moment\n     * @param {SVGElement} path     Path to examine\n     * @returns {number}            Longest between the accumulated length or the current path's length\n     * @private\n     */\n    function findLongestPath(acc, path) {\n        return acc > path.pathLength ? acc : path.pathLength;\n    }\n\n    /**\n     * Finds out which datapoint is closer to the given x position\n     * @param  {number} x0 Date value for data point\n     * @param  {object} d0 Previous datapoint\n     * @param  {object} d1 Next datapoint\n     * @return {object}    d0 or d1, the datapoint with closest date to x0\n     */\n    function findOutNearestDate(x0, d0, d1) {\n        if (xAxisValueType === 'number') {\n            return x0 - d0.date > d1.date - x0 ? d0 : d1;\n        }\n\n        return new Date(x0).getTime() - new Date(d0.date).getTime() >\n            new Date(d1.date).getTime() - new Date(x0).getTime()\n            ? d0\n            : d1;\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels\n     * @param  {number} mouseX X position of the mouse\n     * @return {object}        Data entry that is closer to that x axis position\n     */\n    function getNearestDataPoint(mouseX) {\n        let dateFromInvertedX = xScale.invert(mouseX);\n        let bisectDate = bisector(getDate).left;\n        let dataEntryIndex = bisectDate(dataSorted, dateFromInvertedX, 1);\n        let dataEntryForXPosition = dataSorted[dataEntryIndex];\n        let previousDataEntryForXPosition = dataSorted[dataEntryIndex - 1];\n        let nearestDataPoint;\n\n        if (previousDataEntryForXPosition && dataEntryForXPosition) {\n            nearestDataPoint = findOutNearestDate(\n                dateFromInvertedX,\n                dataEntryForXPosition,\n                previousDataEntryForXPosition\n            );\n        } else {\n            nearestDataPoint = dataEntryForXPosition;\n        }\n\n        return nearestDataPoint;\n    }\n\n    /**\n     * MouseMove handler, calculates the nearest dataPoint to the cursor\n     * and updates metadata related to it\n     * @private\n     */\n    function handleMouseMove(e) {\n        let [xPosition, yPosition] = mouse(e),\n            xPositionOffset = -margin.left, //Arbitrary number, will love to know how to assess it\n            dataPoint = getNearestDataPoint(xPosition + xPositionOffset),\n            dataPointXPosition;\n\n        if (dataPoint) {\n            dataPointXPosition = xScale(new Date(dataPoint.date));\n            // More verticalMarker to that datapoint\n            moveVerticalMarker(dataPointXPosition);\n            // Add data points highlighting\n            highlightDataPoints(dataPoint);\n            // Emit event with xPosition for tooltip or similar feature\n            dispatcher.call(\n                'customMouseMove',\n                e,\n                dataPoint,\n                nameToColorMap,\n                dataPointXPosition,\n                yPosition\n            );\n        }\n    }\n\n    /**\n     * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n     * It also resets the container of the vertical marker\n     * @private\n     */\n    function handleMouseOut(e, d) {\n        overlay.style('display', 'none');\n        verticalMarkerLine.classed('bc-is-active', false);\n        verticalMarkerContainer.attr('transform', 'translate(9999, 0)');\n\n        dispatcher.call('customMouseOut', e, d, mouse(e));\n    }\n\n    /**\n     * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n     * @private\n     */\n    function handleMouseOver(e, d) {\n        overlay.style('display', 'block');\n        verticalMarkerLine.classed('bc-is-active', true);\n\n        dispatcher.call('customMouseOver', e, d, mouse(e));\n    }\n\n    /**\n     * Mouseclick handler over one of the highlight points\n     * It will only pass the information with the event\n     * @private\n     */\n    function handleHighlightClick(e, d) {\n        dispatcher.call('customDataEntryClick', e, d, mouse(e));\n    }\n\n    /**\n     * Touchmove highlighted points\n     * It will only pass the information with the event\n     * @private\n     */\n    function handleTouchMove(e, d) {\n        dispatcher.call('customTouchMove', e, d, touch(e));\n    }\n\n    /**\n     * Creates coloured circles marking where the exact data y value is for a given data point\n     * @param  {object} dataPoint Data point to extract info from\n     * @private\n     */\n    function highlightDataPoints(dataPoint) {\n        cleanDataPointHighlights();\n\n        const nodes = paths.nodes();\n        const nodesById = nodes.reduce((acc, node) => {\n            acc[node.id] = node;\n\n            return acc;\n        }, {});\n\n        // Group corresponding path node with its topic, and\n        // sorting the topics based on the order of the colors,\n        // so that the order always stays constant\n        const topicsWithNode = dataPoint.topics\n            .map((topic) => ({\n                topic,\n                node: nodesById[topic.name],\n            }))\n            .filter(({ topic }) => !!topic)\n            .sort(\n                (a, b) =>\n                    nameToColorMap[a.topic.name] < nameToColorMap[b.topic.name]\n            );\n\n        dataPoint.topics = topicsWithNode.map(({ topic }) => topic);\n\n        dataPoint.topics.forEach((d, index) => {\n            let marker = verticalMarkerContainer\n                .append('g')\n                .classed('circle-container', true)\n                .append('circle')\n                .classed('data-point-highlighter', true)\n                .attr('cx', highlightCircleSize)\n                .attr('cy', 0)\n                .attr('r', highlightCircleRadius)\n                .style('stroke-width', () =>\n                    shouldShowAllDataPoints\n                        ? highlightCircleStrokeAll\n                        : highlightCircleStroke\n                )\n                .style('stroke', nameToColorMap[d.name])\n                .style('cursor', 'pointer')\n                .on('click', function () {\n                    addGlowFilter(this);\n                    handleHighlightClick(this, d);\n                })\n                .on('mouseout', function () {\n                    removeFilter(this);\n                });\n\n            const path = topicsWithNode[index].node;\n            const x = xScale(new Date(dataPoint.topics[index].date));\n            const y = getPathYFromX(x, path, d.name);\n\n            marker.attr(\n                'transform',\n                `translate( ${-highlightCircleSize}, ${y} )`\n            );\n        });\n    }\n\n    /**\n     * Finds the y coordinate of a path given an x coordinate and the line's path node.\n     * @param  {number} x The x coordinate\n     * @param  {node} path The path node element\n     * @param {*} name - The name identifier of the topic\n     * @param  {number} error The margin of error from the actual x coordinate. Default 0.01\n     * @private\n     */\n    function getPathYFromX(x, path, name, error) {\n        const key = `${name}-${x}`;\n\n        if (key in pathYCache) {\n            return pathYCache[key];\n        }\n\n        error = error || 0.01;\n\n        const maxIterations = 100;\n\n        let lengthStart = 0;\n        let lengthEnd = path.pathLength;\n        let point;\n\n        try {\n            point = path.getPointAtLength((lengthEnd + lengthStart) / 2);\n        } catch (e) {\n            point = { x: 0, y: 0 };\n        }\n        let iterations = 0;\n\n        while (x < point.x - error || x > point.x + error) {\n            const midpoint = (lengthStart + lengthEnd) / 2;\n\n            try {\n                point = path.getPointAtLength(midpoint);\n            } catch (e) {\n                point = { x: 0, y: 0 };\n            }\n\n            if (x < point.x) {\n                lengthEnd = midpoint;\n            } else {\n                lengthStart = midpoint;\n            }\n\n            iterations += 1;\n            if (maxIterations < iterations) {\n                break;\n            }\n        }\n\n        pathYCache[key] = point.y;\n\n        return pathYCache[key];\n    }\n\n    /**\n     * Helper method to update the x position of the vertical marker\n     * @param  {object} dataPoint Data entry to extract info\n     * @return void\n     */\n    function moveVerticalMarker(verticalMarkerXPosition) {\n        verticalMarkerContainer.attr(\n            'transform',\n            `translate(${verticalMarkerXPosition},0)`\n        );\n    }\n\n    /**\n     * Resets a point filter\n     * @param {DOMElement} point  Point to reset\n     */\n    function removeFilter(point) {\n        select(point).attr('filter', 'none');\n    }\n\n    /**\n     * Determines if we should add the tooltip related logic depending on the\n     * size of the chart and the tooltipThreshold variable value\n     * @return {boolean} Should we build the tooltip?\n     */\n    function shouldShowTooltip() {\n        return width > tooltipThreshold;\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the constants to be used to force the x axis to respect a certain granularity\n     * current options: MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR\n     * @example\n     *     line.xAxisFormat(line.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.axisTimeCombinations = axisTimeCombinations;\n\n    /**\n     * Gets or Sets the label of the X axis of the chart\n     * @param  {string} _x              Desired label for the X axis\n     * @return { (string | module) }    Current label of the X axis or Line Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabel;\n        }\n        xAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the label of the Y axis of the chart\n     * @param  {string} _x              Desired label for the Y axis\n     * @return { (String | module) }    Current label of the Y axis or Line Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {string[]} _x Desired colorSchema for the graph\n     * @return { string[] | module} Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example lineChart.colorMap({groupName: 'colorHex', groupName2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the dateLabel of the chart\n     * @param  {number} _x Desired dateLabel for the graph\n     * @return { number | module} Current dateLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.dateLabel = function (_x) {\n        if (!arguments.length) {\n            return dateLabel;\n        }\n        dateLabel = _x;\n        dataKeyDeprecationMessage('date');\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x format\n     * It requires a `xAxisFormat` of 'custom' in order to work.\n     * NOTE: localization not supported\n     * @param  {string} _x              Desired format for x axis, one of the d3.js date formats [here]{@link https://github.com/d3/d3-time-format#locale_format}\n     * @return { string|module }        Current format or module to chain calls\n     * @public\n     */\n    exports.xAxisCustomFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisCustomFormat;\n        }\n        xAxisCustomFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x axis grouping\n     * @param  {string} _x          Desired format, a combination of axisTimeCombinations (MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR)\n     * Set it to 'custom' to make use of specific formats with xAxisCustomFormat\n     * @return { String|Module }      Current format or module to chain calls\n     * @public\n     * @example\n     *     line.xAxisCustomFormat(line.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.xAxisFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisFormat;\n        }\n        xAxisFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x ticks. It requires a `xAxisFormat` of 'custom' in order to work.\n     * NOTE: This value needs to be a multiple of 2, 5 or 10. They won't always work as expected, as D3 decides at the end\n     * how many and where the ticks will appear.\n     *\n     * @param  {number} _x              Desired number of x axis ticks (multiple of 2, 5 or 10)\n     * @return { (Number|module) }      Current number or ticks or module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the grid mode.\n     *\n     * @param  {string} _x          Desired mode for the grid ('vertical'|'horizontal'|'full')\n     * @return { String | module}   Current mode of the grid or Line Chart module to chain calls\n     * @public\n     */\n    exports.grid = function (_x) {\n        if (!arguments.length) {\n            return grid;\n        }\n        grid = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasMinimumValueScale property of the chart, making yAxix bottom value\n     * to adjust to the minimum dataset value.\n     * By default this is 'false'\n     *\n     * @param  {Boolean} _x Desired minimum value flag\n     * @return { hasMinimumValueScale | module} Current hasMinimumValueScale flag or Chart module\n     * @public\n     */\n    exports.hasMinimumValueScale = function (_x) {\n        if (!arguments.length) {\n            return hasMinimumValueScale;\n        }\n        hasMinimumValueScale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {number} _x              Desired width for the graph\n     * @return { (Number | module) }    Current height or Line Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * @param  {boolean} _x = false     Desired animation flag\n     * @return { isAnimated | module}   Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Add custom horizontal lines to the Chart - this way you are able to plot arbitrary horizontal lines\n     * onto the chart with a specific color and a text annotation over the line.\n     * @param  {object[]} _x            Array of Objects describing the lines\n     * @return { (Object[] | module) }  Current lines or module to chain calls\n     * @public\n     * @example line.lines([{\n     *   y: 2,\n     *   name: 'Maximum threshold',\n     *   color: '#ff0000'\n     * }])\n     */\n    exports.lines = function (_x) {\n        if (!arguments.length) {\n            return customLines;\n        }\n        customLines = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the curve of the line chart\n     * @param  {curve} _x Desired curve for the lines, default 'linear'. Other options are:\n     * basis, natural, monotoneX, monotoneY, step, stepAfter, stepBefore, cardinal, and\n     * catmullRom. Visit https://github.com/d3/d3-shape#curves for more information.\n     * @return { (curve | module) } Current line curve or Line Chart module to chain calls\n     * @public\n     */\n    exports.lineCurve = function (_x) {\n        if (!arguments.length) {\n            return lineCurve;\n        }\n        lineCurve = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the gradient colors of the line chart when there is only one line\n     * @param  {string[]} _x            Desired color gradient for the line (array of two hexadecimal numbers)\n     * @return { (Number | module) }    Current color gradient or Line Chart module to chain calls\n     * @public\n     */\n    exports.lineGradient = function (_x) {\n        if (!arguments.length) {\n            return singleLineGradientColors;\n        }\n        singleLineGradientColors = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Pass language tag for the tooltip to localize the date.\n     * Uses Intl.DateTimeFormat, for compatability and support, refer to\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n     * @param  {string} _x            A language tag (BCP 47) like 'en-US' or 'fr-FR'\n     * @return { (string|module) }    Current locale or module to chain calls\n     * @public\n     */\n    exports.locale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin object of the chart (top, bottom, left and right)\n     * @param  {object} _x              Margin object to get/set\n     * @return { (object | module) }    Current margin or Line Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the line chart\n     * @param  {string} _x = ',f'       Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the topicLabel of the chart\n     * @param  {boolean} _x=false                   Whether all data points should be drawn\n     * @return {shouldShowAllDataPoints | module}   Current shouldShowAllDataPoints or Chart module to chain calls\n     * @public\n     */\n    exports.shouldShowAllDataPoints = function (_x) {\n        if (!arguments.length) {\n            return shouldShowAllDataPoints;\n        }\n        shouldShowAllDataPoints = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the minimum width of the graph in order to show the tooltip\n     * NOTE: This could also depend on the aspect ratio\n     * @param  {number} _x              Desired tooltip threshold for the graph\n     * @return { (Number | module) }    Current tooltip threshold or Line Chart module to chain calls\n     * @public\n     */\n    exports.tooltipThreshold = function (_x) {\n        if (!arguments.length) {\n            return tooltipThreshold;\n        }\n        tooltipThreshold = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the topicLabel of the chart\n     * @param  {number} _x              Desired topicLabel for the graph\n     * @return {topicLabel | module}    Current topicLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.topicLabel = function (_x) {\n        if (!arguments.length) {\n            return topicLabel;\n        }\n        topicLabel = _x;\n        dataKeyDeprecationMessage('topic');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {number} _x              Desired valueLabel for the graph\n     * @return {valueLabel | module}    Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the yAxisLabelPadding of the chart.\n     * @param  {number} _x= -36                 Desired yAxisLabelPadding for the graph\n     * @return {yAxisLabelPadding | module}     Current yAxisLabelPadding or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabelPadding = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelPadding;\n        }\n        yAxisLabelPadding = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the y axis on the chart\n     * @param  {number} _x = 5     Desired yTicks\n     * @return {number | module}   Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {number} _x          Desired width for the graph\n     * @return {number | Module}    Current width or Line Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {string} filename     File title for the resulting picture\n     * @param {string} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseHover, customMouseMove, customMouseOut,\n     * customDataEntryClick, and customTouchMove\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the `xAxisValueType`.\n     * Choose between 'date' and 'number'. When set to `number` the values of the x-axis must not\n     * be dates anymore, but can be arbitrary numbers.\n     * @param  {string} [_x='date']     Desired value type of the x-axis\n     * @return {string | module}        Current value type of the x-axis or Chart module to chain calls\n     * @public\n     * @example line.xAxisValueType('numeric')\n     */\n    exports.xAxisValueType = function (_x) {\n        if (!arguments.length) {\n            return xAxisValueType;\n        }\n        xAxisValueType = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the `xAxisScale`.\n     * Choose between 'linear' and 'logarithmic'. The setting will only work if `xAxisValueType` is set to\n     * 'number' as well, otherwise it won't influence the visualization.\n     * @param  {string} [_x='linear']      Desired value type of the x-axis\n     * @return {string | module}           Current value type of the x-axis or Chart module to chain calls\n     * @public\n     * @example line.xAxisValueType('numeric').xAxisScale('logarithmic')\n     */\n    exports.xAxisScale = function (_x) {\n        if (!arguments.length) {\n            return xAxisScale;\n        }\n        xAxisScale = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { easeQuadInOut } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport 'd3-transition';\n\nimport { axisTimeCombinations } from '../helpers/constants';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport {\n    formatIntegerValue,\n    formatDecimalValue,\n    isInteger,\n} from '../helpers/number';\nimport { getTextWidth, getApproximateNumberOfLines } from '../helpers/text';\n\n/**\n * Tooltip Component reusable API class that renders a\n * simple and configurable tooltip element for Britechart's\n * line chart or stacked area chart.\n *\n * @module Tooltip\n * @tutorial tooltip\n * @requires d3-array, d3-axis, d3-dispatch, d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * const lineChart = line(),\n *     tooltip = tooltip();\n *\n * tooltip\n *     .title('Tooltip title');\n *\n * lineChart\n *     .width(500)\n *     .on('customMouseOver', function() {\n *          tooltip.show();\n *     })\n *     .on('customMouseMove', function(dataPoint, topicColorMap, dataPointXPosition) {\n *          tooltip.update(dataPoint, topicColorMap, dataPointXPosition);\n *     })\n *     .on('customMouseOut', function() {\n *          tooltip.hide();\n *     });\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(lineChart);\n *\n * d3Selection.select('.metadata-group .hover-marker')\n *     .datum([])\n *     .call(tooltip);\n *\n */\nexport default function module() {\n    let margin = {\n            top: 2,\n            right: 2,\n            bottom: 2,\n            left: 2,\n        },\n        width = 250,\n        height = 45,\n        title = 'Tooltip title',\n        shouldShowDateInTitle = true,\n        valueFormat = null,\n        // tooltip\n        tooltipBackground,\n        tooltipOffset = {\n            y: -55,\n            x: 0,\n        },\n        tooltipMaxTopicLength = 170,\n        tooltipMaxTitleLength = 230,\n        tooltipTextContainer,\n        tooltipBody,\n        tooltipTitle,\n        tooltipWidth = 250,\n        tooltipHeight = 48,\n        tooltipBorderRadius = 3,\n        tooltipContentPadding = 12,\n        circularMarkerRadius = 4,\n        ttTextX = 0,\n        ttTextY = 37,\n        textHeight,\n        entryLineLimit = 3,\n        initialTooltipBodyYPosition = 37,\n        additionalTooltipTitleHeight = 0,\n        initialTooltipTextXPosition = -22,\n        tooltipTextLinePadding = 5,\n        tooltipRightWidth,\n        // Animations\n        mouseChaseDuration = 100,\n        fadeInDuration = 100,\n        ease = easeQuadInOut,\n        circleYOffset = 8,\n        colorMap,\n        titleFillColor = '#6D717A',\n        textFillColor = '#282C35',\n        tooltipTextColor = '#000000',\n        dateLabel = 'date',\n        valueLabel = 'value',\n        nameLabel = 'name',\n        topicLabel = 'topics',\n        defaultAxisSettings = axisTimeCombinations.DAY_MONTH,\n        xAxisValueType = 'date',\n        dateFormat = null,\n        dateCustomFormat = null,\n        topicsOrder = [],\n        // formats\n        numberFormat = null,\n        valueFormatter = null,\n        monthDayYearFormat = timeFormat('%b %d, %Y'),\n        monthDayHourFormat = timeFormat('%b %d, %I %p'),\n        locale,\n        chartWidth,\n        chartHeight,\n        data,\n        svg;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {Object} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = _data;\n\n            buildSVG(this);\n        });\n    }\n\n    /**\n     * Builds containers for the tooltip\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        const container = svg\n            .append('g')\n            .classed('tooltip-container-group select-disable', true)\n            .attr('transform', `translate( ${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('tooltip-group', true);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('g')\n                .classed('britechart britechart-tooltip', true)\n                .style('visibility', 'hidden');\n\n            buildContainerGroups();\n            drawTooltip();\n        }\n        svg.transition().attr('width', width).attr('height', height);\n\n        // Hidden by default\n        exports.hide();\n    }\n\n    /**\n     * Resets the tooltipBody content\n     * @return void\n     * @private\n     */\n    function cleanContent() {\n        tooltipBody.selectAll('text').remove();\n        tooltipBody.selectAll('circle').remove();\n    }\n\n    /**\n     * Draws the different elements of the Tooltip box\n     * @return void\n     * @private\n     */\n    function drawTooltip() {\n        const textStartX = -tooltipWidth / 4 + tooltipContentPadding;\n\n        tooltipTextContainer = svg\n            .selectAll('.tooltip-group')\n            .append('g')\n            .classed('tooltip-text', true);\n\n        tooltipBackground = tooltipTextContainer\n            .append('rect')\n            .classed('tooltip-background', true)\n            .attr('x', textStartX)\n            .attr('y', 0)\n            .attr('width', tooltipWidth)\n            .attr('height', tooltipHeight)\n            .attr('rx', tooltipBorderRadius)\n            .attr('ry', tooltipBorderRadius);\n\n        tooltipTitle = tooltipTextContainer\n            .append('text')\n            .classed('tooltip-title', true)\n            .attr('x', getTooltipTitleXPosition())\n            .attr('dy', '0em')\n            .attr('y', tooltipContentPadding * 2)\n            .style('fill', titleFillColor);\n\n        tooltipBody = tooltipTextContainer\n            .append('g')\n            .classed('tooltip-body', true)\n            .style('fill', textFillColor);\n\n        updateTooltipTitleYPosition();\n    }\n\n    /**\n     * Formats the value depending on its characteristics\n     * @param  {Number} value Value to format\n     * @return {Number}       Formatted value\n     * @private\n     */\n    function getFormattedValue(value) {\n        if (valueFormatter !== null) {\n            return valueFormatter(value);\n        }\n\n        let chosenValueFormatter = formatDecimalValue;\n\n        if (!value) {\n            return 0;\n        }\n        if (numberFormat !== null) {\n            chosenValueFormatter = format(numberFormat);\n        } else if (isInteger(value)) {\n            chosenValueFormatter = formatIntegerValue;\n        }\n\n        return chosenValueFormatter(value);\n    }\n\n    /**\n     * Calculates the desired position for the tooltip\n     * @param  {Number} mouseX             Current horizontal mouse position\n     * @param  {Number} mouseY             Current vertical mouse position\n     * @return {Number[]}                  X and Y position\n     * @private\n     */\n    function getTooltipPosition([mouseX, mouseY]) {\n        let tooltipX, tooltipY;\n\n        // show tooltip to the right\n        if (mouseX - tooltipWidth < 0) {\n            // Tooltip on the right\n            tooltipX = tooltipWidth - 185;\n        } else {\n            // Tooltip on the left\n            tooltipX = -215;\n        }\n\n        if (mouseY) {\n            tooltipY = tooltipOffset.y;\n            // tooltipY = mouseY + tooltipOffset.y;\n        } else {\n            tooltipY = tooltipOffset.y;\n        }\n\n        return [tooltipX, tooltipY];\n    }\n\n    /**\n     * Extracts the value from the data object\n     * @param  {Object} data Data value containing the info\n     * @return {String}      Value to show\n     */\n    function getValueText(data) {\n        let value = data[valueLabel];\n        let valueText;\n\n        if (data.missingValue) {\n            valueText = '-';\n        } else {\n            valueText = getFormattedValue(value).toString();\n        }\n\n        return valueText;\n    }\n\n    /**\n     * Resets the height of the tooltip and the pointer for the text\n     * position\n     */\n    function resetSizeAndPositionPointers() {\n        tooltipHeight =\n            48 + additionalTooltipTitleHeight + tooltipContentPadding;\n        ttTextY = initialTooltipBodyYPosition + additionalTooltipTitleHeight;\n        ttTextX = 0;\n    }\n\n    /**\n     * Draws the data entries inside the tooltip for a given topic\n     * @param  {Object} topic Topic to extract data from\n     * @return void\n     * @private\n     */\n    function updateTopicContent(topic) {\n        let name = topic[nameLabel],\n            tooltipRight,\n            tooltipLeftText,\n            tooltipRightText,\n            elementText;\n\n        tooltipLeftText = topic.topicName || name;\n        tooltipRightText = getValueText(topic);\n\n        elementText = tooltipBody\n            .append('text')\n            .classed('tooltip-left-text', true)\n            .attr('dy', '1em')\n            .attr('x', ttTextX)\n            .attr('y', ttTextY)\n            .style('fill', tooltipTextColor)\n            .text(tooltipLeftText)\n            .call(textWrap, tooltipMaxTopicLength, initialTooltipTextXPosition);\n\n        tooltipRight = tooltipBody\n            .append('text')\n            .classed('tooltip-right-text', true)\n            .attr('dy', '1em')\n            .attr('x', ttTextX)\n            .attr('y', ttTextY)\n            .style('fill', tooltipTextColor)\n            .text(tooltipRightText);\n\n        // IE11 give us sometimes a height of 0 when hovering on top of the vertical marker\n        // This hack fixes it for some cases, but it doesn't work in multiline (they won't wrap)\n        // Let's remove this once we stop supporting IE11\n        textHeight = elementText.node().getBBox().height\n            ? elementText.node().getBBox().height\n            : textHeight;\n\n        tooltipHeight += textHeight + tooltipTextLinePadding;\n        // update the width if it exists because IE renders the elements\n        // too slow and cant figure out the width?\n        tooltipRightWidth = tooltipRight.node().getBBox().width\n            ? tooltipRight.node().getBBox().width\n            : tooltipRightWidth;\n        tooltipRight.attr(\n            'x',\n            tooltipWidth - tooltipRightWidth - 10 - tooltipWidth / 4\n        );\n\n        tooltipBody\n            .append('circle')\n            .classed('tooltip-circle', true)\n            .attr('cx', -tooltipWidth / 4 + 30)\n            .attr('cy', ttTextY + circleYOffset)\n            .attr('r', circularMarkerRadius)\n            .style('fill', colorMap[name])\n            .style('stroke-width', 1);\n\n        ttTextY += textHeight + 7;\n    }\n\n    /**\n     * Updates size and position of tooltip depending on the side of the chart we are in\n     * TODO: This needs a refactor, following the mini-tooltip code.\n     *\n     * @param  {Number} xPosition DataPoint's x position in the chart\n     * @param  {Number} xPosition DataPoint's y position in the chart\n     * @return void\n     * @private\n     */\n    function updatePositionAndSize(xPosition, yPosition) {\n        let [tooltipX, tooltipY] = getTooltipPosition([xPosition, yPosition]);\n\n        svg.transition()\n            .duration(fadeInDuration)\n            .ease(ease)\n            .style('opacity', 1);\n\n        tooltipBackground\n            .attr('width', tooltipWidth)\n            .attr('height', tooltipHeight);\n\n        svg.selectAll('.tooltip-group')\n            .transition()\n            .duration(mouseChaseDuration)\n            .ease(ease)\n            .attr('transform', `translate(${tooltipX}, ${tooltipY})`);\n    }\n\n    /**\n     * Get formatted key to show in the tooltip title\n     * @param {Date | String} key   Key to format\n     * @return {String}     Formatted Key\n     * @private\n     */\n    function formatKey(key) {\n        if (xAxisValueType === 'number') {\n            return Number(key);\n        }\n\n        return formatDate(new Date(key));\n    }\n\n    /**\n     * Figures out which date format to use when showing the date of the current data entry\n     * @param {Date} date   Date object to format\n     * @return {Function}   The proper date formatting function\n     * @private\n     */\n    function formatDate(date) {\n        let settings = dateFormat || defaultAxisSettings;\n        let format = null;\n        let localeOptions = { month: 'short', day: 'numeric' };\n\n        if (\n            settings === axisTimeCombinations.DAY_MONTH ||\n            settings === axisTimeCombinations.MONTH_YEAR\n        ) {\n            format = monthDayYearFormat;\n            localeOptions.year = 'numeric';\n        } else if (\n            settings === axisTimeCombinations.HOUR_DAY ||\n            settings === axisTimeCombinations.MINUTE_HOUR\n        ) {\n            format = monthDayHourFormat;\n            localeOptions.hour = 'numeric';\n        } else if (\n            settings === axisTimeCombinations.CUSTOM &&\n            typeof dateCustomFormat === 'string'\n        ) {\n            format = timeFormat(dateCustomFormat);\n        }\n\n        if (\n            locale &&\n            typeof Intl !== 'undefined' &&\n            typeof Intl === 'object' &&\n            Intl.DateTimeFormat\n        ) {\n            let f = Intl.DateTimeFormat(locale, localeOptions);\n\n            return f.format(date);\n        }\n\n        return format(date);\n    }\n\n    /**\n     * Returns the x-Position of the Tooltip Title\n     * @private\n     */\n    function getTooltipTitleXPosition() {\n        return -tooltipWidth / 4 + 2 * tooltipContentPadding;\n    }\n\n    /**\n     * Helper method to sort the passed topics array by the names passed int he order arary\n     * @param  {Object[]} topics    Topics data, retrieved from datapoint passed by line chart\n     * @param  {Object[]} order     Array of names in the order to sort topics by\n     * @return {Object[]}           sorted topics object\n     * @private\n     */\n    function _sortByTopicsOrder(topics, order = topicsOrder) {\n        return order.map(\n            (orderName) => topics.filter(({ name }) => name === orderName)[0]\n        );\n    }\n\n    /**\n     * Sorts topic by alphabetical order for arrays of objects with a name proeprty\n     * @param  {Array} topics   List of topic objects\n     * @return {Array}          List of topic name strings\n     * @private\n     */\n    function _sortByAlpha(topics) {\n        return topics\n            .map((d) => d)\n            .sort((a, b) => {\n                if (a.name > b.name) return 1;\n                if (a.name === b.name) return 0;\n\n                return -1;\n            });\n    }\n\n    /**\n     * Calculates the number of lines the tooltip title will need and updates the\n     * initialTooltipBodyYPosition accordingly\n     * @private\n     */\n    function updateTooltipTitleYPosition() {\n        const approximateTitle = getTooltipTitle(Date.now());\n        const approximateNumberOfTitleLines = getApproximateNumberOfLines(\n            approximateTitle,\n            16,\n            tooltipMaxTitleLength\n        );\n\n        if (approximateNumberOfTitleLines > 1) {\n            additionalTooltipTitleHeight =\n                17 * (approximateNumberOfTitleLines - 1);\n        }\n    }\n\n    /**\n     * Updates value of tooltipTitle with the data meaning and the date\n     * @param  {Object} dataPoint Point of data to use as source\n     * @return void\n     * @private\n     */\n    function updateTitle(dataPoint) {\n        const textTitle = getTooltipTitle(dataPoint[dateLabel]);\n\n        tooltipTitle\n            .text(textTitle)\n            .call(textWrap, tooltipMaxTitleLength, getTooltipTitleXPosition());\n    }\n\n    /**\n     * Gets the tooltipTitle respecting the different settings\n     * @param  {Date | String}  date  Date to use\n     * @private\n     */\n    function getTooltipTitle(date) {\n        let textTitle = title;\n        let formattedDate = formatKey(date);\n\n        if (textTitle.length) {\n            if (shouldShowDateInTitle) {\n                textTitle = `${textTitle} - ${formattedDate}`;\n            }\n        } else {\n            textTitle = formattedDate;\n        }\n\n        return textTitle;\n    }\n\n    /**\n     * Hides the tooltip\n     * @return {void}\n     * @private\n     */\n    function hideTooltip() {\n        svg.style('visibility', 'hidden');\n    }\n\n    /**\n     * Shows the tooltip updating it's content\n     * @return {void}\n     * @private\n     */\n    function showTooltip() {\n        svg.style('visibility', 'visible').style('opacity', 0);\n    }\n\n    /**\n     * Wraps a text given the text, width, x position and textFormatter function\n     * @param  {D3Selection} text  Selection with the text to wrap inside\n     * @param  {Number} width Desired max width for that line\n     * @param  {Number} xpos  Initial x position of the text\n     * REF: http://bl.ocks.org/mbostock/7555321\n     * More discussions on https://github.com/mbostock/d3/issues/1642\n     * @private\n     *\n     */\n    function textWrap(text, width, xpos = 0) {\n        text.each(function () {\n            let words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\n            text = select(this);\n\n            words = text.text().split(/\\s+/).reverse();\n            line = [];\n            lineNumber = 0;\n            lineHeight = 1.2;\n            y = text.attr('y');\n            dy = parseFloat(text.attr('dy'));\n            tspan = text\n                .text(null)\n                .append('tspan')\n                .attr('x', xpos)\n                .attr('y', y)\n                .attr('dy', dy + 'em');\n\n            while ((word = words.pop())) {\n                line.push(word);\n                tspan.text(line.join(' '));\n\n                // fixes for IE wrap text issue\n                const textWidth = getTextWidth(\n                    line.join(' '),\n                    16,\n                    'Karla, sans-serif'\n                );\n\n                if (textWidth > width) {\n                    line.pop();\n                    tspan.text(line.join(' '));\n\n                    if (lineNumber < entryLineLimit - 1) {\n                        line = [word];\n                        tspan = text\n                            .append('tspan')\n                            .attr('x', xpos)\n                            .attr('y', y)\n                            .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                            .text(word);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Draws the data entries inside the tooltip\n     * @param  {Object} dataPoint   Data entry from to take the info\n     * @return void\n     * @private\n     */\n    function updateContent(dataPoint) {\n        let topics = dataPoint[topicLabel];\n\n        // sort order by topicsOrder array if passed\n        if (topicsOrder.length) {\n            topics = _sortByTopicsOrder(topics);\n        } else if (topics.length && topics[0].name) {\n            topics = _sortByAlpha(topics);\n        }\n\n        cleanContent();\n        updateTitle(dataPoint);\n        resetSizeAndPositionPointers();\n        topics.forEach(updateTopicContent);\n    }\n\n    /**\n     * Updates tooltip title, content, size and position\n     * sorts by alphatical name order if not forced order given\n     *\n     * @param  {lineChartPointByDate} dataPoint  Current datapoint to show info about\n     * @param  {Number} xPosition           Position of the mouse on the X axis\n     * @return void\n     * @private\n     */\n    function updateTooltip(dataPoint, xPosition, yPosition) {\n        updateContent(dataPoint);\n        updatePositionAndSize(xPosition, yPosition);\n    }\n\n    // API\n\n    /**\n     * constants to be used to force the x axis to respect a certain granularity\n     * current options: HOUR_DAY, DAY_MONTH, MONTH_YEAR\n     * @example tooltip.dateFormat(tooltip.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.axisTimeCombinations = axisTimeCombinations;\n\n    /**\n     * Exposes the ability to force the tooltip to use a certain date format\n     * @param  {String} _x          Desired format\n     * @return {String | module}  Current format or module to chain calls\n     * @public\n     */\n    exports.dateFormat = function (_x) {\n        if (!arguments.length) {\n            return dateFormat || defaultAxisSettings;\n        }\n        dateFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to use a custom date format\n     * @param  {String} _x          Desired custom format\n     * @return {String | module}  Current format or module to chain calls\n     * @public\n     * @example tooltip.dateFormat(tooltip.axisTimeCombinations.CUSTOM);\n     * tooltip.dateCustomFormat('%H:%M %p')\n     */\n    exports.dateCustomFormat = function (_x) {\n        if (!arguments.length) {\n            return dateCustomFormat;\n        }\n        dateCustomFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the dateLabel of the data\n     * @param  {String} _x          Desired dateLabel\n     * @return {String | module}   Current dateLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.dateLabel = function (_x) {\n        if (!arguments.length) {\n            return dateLabel;\n        }\n        dateLabel = _x;\n        dataKeyDeprecationMessage('date');\n\n        return this;\n    };\n\n    /**\n     * Hides the tooltip\n     * @return {module} Tooltip module to chain calls\n     * @public\n     */\n    exports.hide = function () {\n        hideTooltip();\n\n        return this;\n    };\n\n    /**\n     * Pass locale for the tooltip to render the date in\n     * @param  {String} _x          Must be a locale tag like 'en-US' or 'fr-FR'\n     * @return {String | module}    Current locale or module to chain calls\n     * @public\n     */\n    exports.locale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the nameLabel of the data\n     * @param  {String} _x           Desired nameLabel\n     * @return {String | module}    Current nameLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format for the value displayed on the tooltip\n     * @param  {string} _x              Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the formatter function for the value displayed on the tooltip.\n     * Setting this property makes the tooltip ignore numberFormat.\n     * @param  {Function} _x Desired formatter function\n     * @return {Function | module} Current valueFormatter or Chart module to chain calls\n     * @public\n     * @example tooltipChart.valueFormatter(value => value.toString().length.toString())\n     */\n    exports.valueFormatter = function (_x) {\n        if (!arguments.length) {\n            return valueFormatter;\n        }\n        valueFormatter = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets shouldShowDateInTitle\n     * @param  {Boolean} _x          Desired value\n     * @return {Boolean | module}    Current shouldShowDateInTitle or Chart module to chain calls\n     * @public\n     */\n    exports.shouldShowDateInTitle = function (_x) {\n        if (!arguments.length) {\n            return shouldShowDateInTitle;\n        }\n        shouldShowDateInTitle = _x;\n\n        return this;\n    };\n\n    /**\n     * Shows the tooltip\n     * @return {module} Tooltip module to chain calls\n     * @public\n     */\n    exports.show = function () {\n        showTooltip();\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the title of the tooltip (to only show the date, set a blank title)\n     * @param  {String} _x          Desired title\n     * @return {String | module}   Current title or module to chain calls\n     * @public\n     */\n    exports.title = function (_x) {\n        if (!arguments.length) {\n            return title;\n        }\n        title = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass an override for the offset of your tooltip\n     * @param  {Object} tooltipOffset  Object representing the X and Y offsets\n     * @return {Object | module}       Current tooltipOffset\n     * @public\n     */\n    exports.tooltipOffset = function (_x) {\n        if (!arguments.length) {\n            return tooltipOffset;\n        }\n        tooltipOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass an override for the ordering of your tooltip\n     * @param  {String[]} _x           Array of the names of your tooltip items\n     * @return {String[] | module}    Current overrideOrder or Chart module to chain calls\n     * @public\n     */\n    exports.topicsOrder = function (_x) {\n        if (!arguments.length) {\n            return topicsOrder;\n        }\n        topicsOrder = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the topicLabel of the data\n     * @param  {String} _x          Desired topicLabel\n     * @return {String | module}   Current topicLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.topicLabel = function (_x) {\n        if (!arguments.length) {\n            return topicLabel;\n        }\n        topicLabel = _x;\n        dataKeyDeprecationMessage('topic');\n\n        return this;\n    };\n\n    /**\n     * Updates the position and content of the tooltip\n     * @param  {Object} dataPoint       Datapoint to represent\n     * @param  {Object} colorMapping    Color scheme of the topics\n     * @param  {Number} position        X-scale position in pixels\n     * @return {Module}                 Tooltip module to chain calls\n     * @public\n     */\n    exports.update = function (\n        dataPoint,\n        colorMapping,\n        xPosition,\n        yPosition = null\n    ) {\n        colorMap = colorMapping;\n        updateTooltip(dataPoint, xPosition, yPosition);\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the data\n     * @param  {String} _x          Desired valueLabel\n     * @return {String | module}   Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the `xAxisValueType` of the data. Choose between 'date' and 'number'. When set to\n     * number, the x-Axis values won't be parsed as dates anymore, but as numbers.\n     * @param  {String} [_x='date']     Desired keyType\n     * @return {String | module}        Current keyType or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisValueType = function (_x) {\n        if (!arguments.length) {\n            return xAxisValueType;\n        }\n        xAxisValueType = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { max } from 'd3-array';\nimport { easeQuadInOut } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\n\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport { isDefined } from '../helpers/type';\n\nconst NUMBER_FORMAT = '.2f';\n\n/**\n * Mini Tooltip Component reusable API class that renders a\n * simple and configurable tooltip element for Britechart's\n * bar and step chart.\n *\n * @module Mini-tooltip\n * @tutorial bar\n * @requires d3-array, d3-ease, d3-format, d3-selection, d3-transition\n *\n * @example\n * const barChart = line(),\n *     miniTooltip = miniTooltip();\n *\n * barChart\n *     .width(500)\n *     .height(300)\n *     .on('customMouseHover', miniTooltip.show)\n *     .on('customMouseMove', miniTooltip.update)\n *     .on('customMouseOut', miniTooltip.hide);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(barChart);\n *\n * d3Selection.select('.metadata-group .mini-tooltip-container')\n *     .datum([])\n *     .call(miniTooltip);\n *\n */\nexport default function module() {\n    let margin = {\n            top: 12,\n            right: 12,\n            bottom: 12,\n            left: 12,\n        },\n        width = 100,\n        height = 100,\n        // Optional Title\n        title = '',\n        // Data Format\n        valueLabel = 'value',\n        nameLabel = 'name',\n        // Animations\n        fadeInDuration = 200,\n        ease = easeQuadInOut,\n        // tooltip\n        tooltipBackground,\n        backgroundBorderRadius = 2,\n        tooltipTextContainer,\n        tooltipOffset = {\n            y: 0,\n            x: 20,\n        },\n        // Fonts\n        textSize = 14,\n        textLineHeight = 1.5,\n        valueTextSize = 27,\n        valueTextLineHeight = 1.18,\n        // Colors\n        bodyFillColor = '#FFFFFF',\n        borderStrokeColor = '#D2D6DF',\n        titleFillColor = '#666a73',\n        nameTextFillColor = '#666a73',\n        valueTextFillColor = '#45494E',\n        valueTextWeight = 200,\n        // formats\n        numberFormat = NUMBER_FORMAT,\n        valueFormatter = (value) => format(numberFormat)(value),\n        chartWidth,\n        chartHeight,\n        svg;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     */\n    function exports(_selection) {\n        _selection.each(function () {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n\n            buildSVG(this);\n            drawTooltip();\n        });\n    }\n\n    /**\n     * Builds containers for the tooltip\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('tooltip-container-group', true)\n            .attr('transform', `translate( ${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('tooltip-group', true);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('g')\n                .classed('britechart britechart-mini-tooltip', true);\n\n            buildContainerGroups();\n        }\n        svg.transition().attr('width', width).attr('height', height);\n\n        // Hidden by default\n        exports.hide();\n    }\n\n    /**\n     * Draws the different elements of the Tooltip box\n     * @return void\n     * @private\n     */\n    function drawTooltip() {\n        tooltipTextContainer = svg\n            .selectAll('.tooltip-group')\n            .append('g')\n            .classed('tooltip-text select-disable', true);\n\n        tooltipBackground = tooltipTextContainer\n            .append('rect')\n            .classed('tooltip-background', true)\n            .attr('width', width)\n            .attr('height', height)\n            .attr('rx', backgroundBorderRadius)\n            .attr('ry', backgroundBorderRadius)\n            .attr('y', -margin.top)\n            .attr('x', -margin.left)\n            .style('pointer-events', 'none');\n    }\n\n    /**\n     * Figures out the max length of the tooltip lines\n     * @param  {D3Selection[]} texts    List of svg elements of each line\n     * @return {Number}                 Max size of the lines\n     * @private\n     */\n    function getMaxLengthLine(...texts) {\n        let textSizes = texts\n            .filter((x) => !!x)\n            .map((x) => x.node().getBBox().width);\n\n        return max(textSizes);\n    }\n\n    /**\n     * Calculates the desired position for the tooltip\n     * @param  {Number} mouseX             Current horizontal mouse position\n     * @param  {Number} mouseY             Current vertical mouse position\n     * @param  {Number} parentChartWidth   Parent's chart width\n     * @param  {Number} parentChartHeight  Parent's chart height\n     * @return {Number[]}                  X and Y position\n     * @private\n     */\n    function getTooltipPosition(\n        [mouseX, mouseY],\n        [parentChartWidth, parentChartHeight]\n    ) {\n        let tooltipX, tooltipY;\n\n        if (hasEnoughHorizontalRoom(parentChartWidth, mouseX)) {\n            tooltipX = mouseX + tooltipOffset.x;\n        } else {\n            tooltipX = mouseX - chartWidth - tooltipOffset.x - margin.right;\n        }\n\n        if (hasEnoughVerticalRoom(parentChartHeight, mouseY)) {\n            tooltipY = mouseY + tooltipOffset.y;\n        } else {\n            tooltipY = mouseY - chartHeight - tooltipOffset.y - margin.bottom;\n        }\n\n        return [tooltipX, tooltipY];\n    }\n\n    /**\n     * Checks if the mouse is over the bounds of the parent chart\n     * @param  {Number}  chartWidth Parent's chart\n     * @param  {Number}  positionX  Mouse position\n     * @return {Boolean}            If the mouse position allows space for the tooltip\n     * @private\n     */\n    function hasEnoughHorizontalRoom(parentChartWidth, positionX) {\n        return (\n            parentChartWidth -\n                margin.left -\n                margin.right -\n                chartWidth -\n                positionX >\n            0\n        );\n    }\n\n    /**\n     * Checks if the mouse is over the bounds of the parent chart\n     * @param  {Number}  chartWidth Parent's chart\n     * @param  {Number}  positionX  Mouse position\n     * @return {Boolean}            If the mouse position allows space for the tooltip\n     * @private\n     */\n    function hasEnoughVerticalRoom(parentChartHeight, positionY) {\n        return (\n            parentChartHeight -\n                margin.top -\n                margin.bottom -\n                chartHeight -\n                positionY >\n            0\n        );\n    }\n\n    /**\n     * Hides the tooltip\n     * @return {void}\n     * @private\n     */\n    function hideTooltip() {\n        svg.style('visibility', 'hidden');\n    }\n\n    /**\n     * Shows the tooltip updating it's content\n     * @param  {Object} dataPoint Data point from the chart\n     * @return {void}\n     * @private\n     */\n    function showTooltip() {\n        updateContent();\n        svg.style('visibility', 'visible').style('opacity', 0);\n    }\n\n    /**\n     * Draws the data entries inside the tooltip for a given topic\n     * @param  {Object} topic Topic to extract data from\n     * @return void\n     * @private\n     */\n    function updateContent(dataPoint = {}) {\n        let value = dataPoint[valueLabel] || '',\n            name = dataPoint[nameLabel] || '',\n            lineHeight = textSize * textLineHeight,\n            valueLineHeight = valueTextSize * valueTextLineHeight,\n            defaultDy = '1em',\n            temporalHeight = 0,\n            tooltipValue,\n            tooltipName,\n            tooltipTitle;\n\n        tooltipTextContainer.selectAll('text').remove();\n\n        if (title) {\n            tooltipTitle = tooltipTextContainer\n                .append('text')\n                .classed('mini-tooltip-title', true)\n                .attr('dy', defaultDy)\n                .attr('y', 0)\n                .style('fill', titleFillColor)\n                .style('font-size', textSize)\n                .text(title);\n\n            temporalHeight = lineHeight + temporalHeight;\n        }\n\n        if (name) {\n            tooltipName = tooltipTextContainer\n                .append('text')\n                .classed('mini-tooltip-name', true)\n                .attr('dy', defaultDy)\n                .attr('y', temporalHeight || 0)\n                .style('fill', nameTextFillColor)\n                .style('font-size', textSize)\n                .text(name);\n\n            temporalHeight = lineHeight + temporalHeight;\n        }\n\n        if (isDefined(value)) {\n            tooltipValue = tooltipTextContainer\n                .append('text')\n                .classed('mini-tooltip-value', true)\n                .attr('dy', defaultDy)\n                .attr('y', temporalHeight || 0)\n                .style('fill', valueTextFillColor)\n                .style('font-size', valueTextSize)\n                .style('font-weight', valueTextWeight)\n                .text(valueFormatter(value));\n\n            temporalHeight = valueLineHeight + temporalHeight;\n        }\n\n        chartWidth = getMaxLengthLine(tooltipName, tooltipTitle, tooltipValue);\n        chartHeight = temporalHeight;\n    }\n\n    /**\n     * Updates size and position of tooltip depending on the side of the chart we are in\n     * @param  {Object} dataPoint DataPoint of the tooltip\n     * @return void\n     * @private\n     */\n    function updatePositionAndSize(mousePosition, parentChartSize) {\n        let [tooltipX, tooltipY] = getTooltipPosition(\n            mousePosition,\n            parentChartSize\n        );\n\n        svg.transition()\n            .duration(fadeInDuration)\n            .ease(ease)\n            .style('opacity', 1)\n            .attr('height', chartHeight + margin.top + margin.bottom)\n            .attr('width', chartWidth + margin.left + margin.right)\n            .attr('transform', `translate(${tooltipX},${tooltipY})`);\n\n        tooltipBackground\n            .attr('height', chartHeight + margin.top + margin.bottom)\n            .attr('width', chartWidth + margin.left + margin.right);\n    }\n\n    /**\n     * Updates tooltip content, size and position\n     *\n     * @param  {Object} dataPoint Current datapoint to show info about\n     * @return void\n     * @private\n     */\n    function updateTooltip(dataPoint, position, chartSize) {\n        updateContent(dataPoint);\n        updatePositionAndSize(position, chartSize);\n    }\n\n    /**\n     * Hides the tooltip\n     * @return {Module} Tooltip module to chain calls\n     * @public\n     */\n    exports.hide = function () {\n        hideTooltip();\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets data's nameLabel\n     * @param  {text} _x Desired nameLabel\n     * @return { text | module} nameLabel or Step Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format for the value displayed on the tooltip\n     * @param  {string} _x = '.2f'      Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the formatter function for the value displayed on the tooltip.\n     * Setting this property makes the tooltip ignore numberFormat. Set by default to\n     * d3-format formatter with numberFormat.\n     * @param  {Function} _x Desired formatter function\n     * @return {Function | module} Current valueFormatter or Chart module to chain calls\n     * @public\n     * @example tooltipChart.valueFormatter(value => value.toString().length.toString())\n     */\n    exports.valueFormatter = function (_x) {\n        if (!arguments.length) {\n            return valueFormatter;\n        }\n        valueFormatter = _x;\n\n        return this;\n    };\n\n    /**\n     * Shows the tooltip\n     * @return {Module} Tooltip module to chain calls\n     * @public\n     */\n    exports.show = function () {\n        showTooltip();\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the title of the tooltip\n     * @param  {string} _x Desired title\n     * @return { string | module} Current title or module to chain calls\n     * @public\n     */\n    exports.title = function (_x) {\n        if (!arguments.length) {\n            return title;\n        }\n        title = _x;\n\n        return this;\n    };\n\n    /**\n     * Updates the position and content of the tooltip\n     * @param  {Object} dataPoint       Datapoint of the hovered element\n     * @param  {Array} mousePosition    Mouse position relative to the parent chart [x, y]\n     * @param  {Array} chartSize        Parent chart size [x, y]\n     * @return {module}                 Current component\n     */\n    exports.update = function (dataPoint, mousePosition, chartSize) {\n        updateTooltip(dataPoint, mousePosition, chartSize);\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets data's valueLabel\n     * @param  {text} _x        Desired valueLabel\n     * @return {text | module}  valueLabel or Step Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    return exports;\n}\n","import { extent } from 'd3-array';\nimport { easeQuadInOut } from 'd3-ease';\nimport { scaleLinear } from 'd3-scale';\nimport { area, line, curveBasis } from 'd3-shape';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport colorHelper from '../helpers/color';\nimport { sparkLineLoadingMarkup } from '../helpers/load';\nimport { uniqueId } from '../helpers/number';\nimport { motion } from '../helpers/constants';\n\nconst DEFAULT_TITLE_TEXT_STYLE = {\n    'font-size': '22px',\n    'font-family': 'sans-serif',\n    'font-style': 'normal',\n    'font-weight': 0,\n};\n\n/**\n * Sparkline Chart reusable API module that allows us\n * rendering a sparkline configurable chart.\n *\n * @module Sparkline\n * @tutorial sparkline\n * @requires d3-array, d3-ease, d3-scale, d3-shape, d3-selection, d3-transition\n *\n * @example\n * const sparkLineChart = sparkline();\n *\n * sparkLineChart\n *     .width(200)\n *     .height(100);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(sparkLineChart);\n *\n */\n\n/**\n * @typedef SparklineChartData\n * @type {Object[]}\n * @property {number} value        Value of the group (required)\n * @property {string} name         Name of the group (required)\n *\n * @example\n * [\n *     {\n *         value: 1,\n *         date: '2011-01-06T00:00:00Z'\n *     },\n *     {\n *         value: 2,\n *         date: '2011-01-07T00:00:00Z'\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            left: 5,\n            right: 5,\n            top: 5,\n            bottom: 5,\n        },\n        width = 100,\n        height = 30,\n        isLoading = false,\n        xScale,\n        yScale,\n        areaGradient = ['#F5FDFF', '#F6FEFC'],\n        areaGradientEl,\n        areaGradientId = uniqueId('sparkline-area-gradient'),\n        lineStrokeWidth = 2,\n        lineGradient = colorHelper.colorGradients.greenBlue,\n        lineGradientEl,\n        lineGradientId = uniqueId('sparkline-line-gradient'),\n        maskingClip,\n        maskingClipId = uniqueId('maskingClip'),\n        svg,\n        chartWidth,\n        chartHeight,\n        data,\n        hasArea = true,\n        isAnimated = false,\n        clipDuration = motion.duration,\n        ease = easeQuadInOut,\n        topLine,\n        areaBelow,\n        circle,\n        titleEl,\n        titleText,\n        titleTextStyle = DEFAULT_TITLE_TEXT_STYLE,\n        markerSize = 1.5,\n        valueLabel = 'value',\n        dateLabel = 'date',\n        // getters\n        getDate = ({ date }) => date,\n        getValue = ({ value }) => value;\n\n    /**\n     * This function creates the graph using the selection and data provided\n     *\n     * @param {D3Selection} _selection A d3 selection that represents\n     * the container(s) where the chart(s) will be rendered\n     * @param {SparklineChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildScales();\n            createGradients();\n            createMaskingClip();\n            drawArea();\n            drawLine();\n            drawEndMarker();\n\n            if (titleText) {\n                drawSparklineTitle();\n            }\n        });\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * NOTE: The order of drawing of this group elements is really important,\n     * as everything else will be drawn on top of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container.append('g').classed('text-group', true);\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Creates the x, y and color scales of the chart\n     * @private\n     */\n    function buildScales() {\n        xScale = scaleLinear()\n            .domain(extent(data, getDate))\n            .range([0, chartWidth]);\n\n        yScale = scaleLinear()\n            .domain(extent(data, getValue))\n            .range([chartHeight, 0]);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart sparkline', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values and dates to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {SparklineChartData} originalData    Raw data from the container\n     * @return {SparklineChartData}                 Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce((acc, d) => {\n            d.date = new Date(d[dateLabel]);\n            d.value = +d[valueLabel];\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Creates the gradient on the area below the line\n     * @return {void}\n     */\n    function createGradients() {\n        let metadataGroup = svg.select('.metadata-group');\n\n        if (areaGradientEl || lineGradientEl) {\n            svg.selectAll(`#${areaGradientId}`).remove();\n            svg.selectAll(`#${lineGradientId}`).remove();\n        }\n\n        areaGradientEl = metadataGroup\n            .append('linearGradient')\n            .attr('id', areaGradientId)\n            .attr('class', 'area-gradient')\n            .attr('gradientUnits', 'userSpaceOnUse')\n            .attr('x1', 0)\n            .attr('x2', xScale(data[data.length - 1].date))\n            .attr('y1', 0)\n            .attr('y2', 0)\n            .selectAll('stop')\n            .data([\n                { offset: '0%', color: areaGradient[0] },\n                { offset: '100%', color: areaGradient[1] },\n            ])\n            .enter()\n            .append('stop')\n            .attr('offset', ({ offset }) => offset)\n            .attr('stop-color', ({ color }) => color);\n\n        lineGradientEl = metadataGroup\n            .append('linearGradient')\n            .attr('id', lineGradientId)\n            .attr('class', 'line-gradient')\n            .attr('gradientUnits', 'userSpaceOnUse')\n            .attr('x1', 0)\n            .attr('x2', xScale(data[data.length - 1].date))\n            .attr('y1', 0)\n            .attr('y2', 0)\n            .selectAll('stop')\n            .data([\n                { offset: '0%', color: lineGradient[0] },\n                { offset: '100%', color: lineGradient[1] },\n            ])\n            .enter()\n            .append('stop')\n            .attr('offset', ({ offset }) => offset)\n            .attr('stop-color', ({ color }) => color);\n    }\n\n    /**\n     * Creates a masking clip that would help us fake an animation if the\n     * proper flag is true\n     *\n     * @return {void}\n     */\n    function createMaskingClip() {\n        if (maskingClip) {\n            svg.selectAll(`#${maskingClipId}`).remove();\n        }\n\n        if (isAnimated) {\n            maskingClip = svg\n                .select('.metadata-group')\n                .append('clipPath')\n                .attr('id', maskingClipId)\n                .attr('class', 'clip-path')\n                .append('rect')\n                .attr('width', 0)\n                .attr('height', height);\n\n            select(`#${maskingClipId} rect`)\n                .transition()\n                .ease(ease)\n                .duration(clipDuration)\n                .attr('width', width);\n        }\n    }\n\n    /**\n     * Draws the area that will be placed below the line\n     * @private\n     */\n    function drawArea() {\n        if (areaBelow) {\n            svg.selectAll('.sparkline-area').remove();\n        }\n\n        areaBelow = area()\n            .x(({ date }) => xScale(date))\n            .y0(() => yScale(0) + lineStrokeWidth / 2)\n            .y1(({ value }) => yScale(value))\n            .curve(curveBasis);\n\n        svg.select('.chart-group')\n            .append('path')\n            .datum(data)\n            .attr('class', 'sparkline-area')\n            .attr('fill', `url(#${areaGradientId})`)\n            .attr('d', areaBelow)\n            .attr('clip-path', `url(#${maskingClipId})`);\n    }\n\n    /**\n     * Draws the line element within the chart group\n     * @private\n     */\n    function drawLine() {\n        if (topLine) {\n            svg.selectAll('.line').remove();\n        }\n\n        topLine = line()\n            .curve(curveBasis)\n            .x(({ date }) => xScale(date))\n            .y(({ value }) => yScale(value));\n\n        svg.select('.chart-group')\n            .append('path')\n            .datum(data)\n            .attr('class', 'line')\n            .attr('stroke', `url(#${lineGradientId})`)\n            .attr('d', topLine)\n            .attr('clip-path', `url(#${maskingClipId})`)\n            .attr('fill', 'none');\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(sparkLineLoadingMarkup);\n    }\n\n    /**\n     * Draws the text element within the text group\n     * Is displayed at the top of sparked area\n     * @private\n     */\n    function drawSparklineTitle() {\n        if (titleEl) {\n            svg.selectAll('.sparkline-text').remove();\n        }\n\n        titleEl = svg\n            .selectAll('.text-group')\n            .append('text')\n            .attr('x', chartWidth / 2)\n            .attr('y', chartHeight / 6)\n            .attr('text-anchor', 'middle')\n            .attr('class', 'sparkline-text')\n            .style(\n                'font-size',\n                titleTextStyle['font-size'] ||\n                    DEFAULT_TITLE_TEXT_STYLE['font-size']\n            )\n            .style('fill', titleTextStyle['fill'] || lineGradient[0])\n            .style(\n                'font-family',\n                titleTextStyle['font-family'] ||\n                    DEFAULT_TITLE_TEXT_STYLE['font-family']\n            )\n            .style(\n                'font-weight',\n                titleTextStyle['font-weight'] ||\n                    DEFAULT_TITLE_TEXT_STYLE['font-weight']\n            )\n            .style(\n                'font-style',\n                titleTextStyle['font-style'] ||\n                    DEFAULT_TITLE_TEXT_STYLE['font-style']\n            )\n            .text(titleText);\n    }\n\n    /**\n     * Draws a marker at the end of the sparkline\n     */\n    function drawEndMarker() {\n        if (circle) {\n            svg.selectAll('.sparkline-circle').remove();\n        }\n\n        circle = svg\n            .selectAll('.chart-group')\n            .append('circle')\n            .attr('class', 'sparkline-circle')\n            .attr('cx', xScale(data[data.length - 1].date))\n            .attr('cy', yScale(data[data.length - 1].value))\n            .attr('r', markerSize);\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return clipDuration;\n        }\n        clipDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the areaGradient of the chart\n     * @param  {string[]} _x = ['#F5FDFF', '#F6FEFC']   Desired areaGradient for the graph\n     * @return {areaGradient | module}                  Current areaGradient or Chart module to chain calls\n     * @public\n     */\n    exports.areaGradient = function (_x) {\n        if (!arguments.length) {\n            return areaGradient;\n        }\n        areaGradient = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the dateLabel of the chart\n     * @param  {number} _x          Desired dateLabel for the graph\n     * @return {dateLabel | module} Current dateLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.dateLabel = function (_x) {\n        if (!arguments.length) {\n            return dateLabel;\n        }\n        dateLabel = _x;\n        dataKeyDeprecationMessage('date');\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {string} filename     File title for the resulting picture\n     * @param {string} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {number} _x=30       Desired height for the graph\n     * @return { height | module}   Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * By default this is 'false'\n     *\n     * @param  {boolean} _x=false       Desired animation flag\n     * @return {isAnimated | module}    Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the lineGradient of the chart\n     * @param  {string[]} _x = colorHelper.colorGradients.greenBlue     Desired lineGradient for the graph\n     * @return {lineGradient | module}                                  Current lineGradient or Chart module to chain calls\n     * @public\n     */\n    exports.lineGradient = function (_x) {\n        if (!arguments.length) {\n            return lineGradient;\n        }\n        lineGradient = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {object} _x          Margin object to get/set\n     * @return {object | module}    Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text of the title at the top of sparkline.\n     * To style the title, use the titleTextStyle method below.\n     * @param  {string} _x = null   String to set\n     * @return {string | module}    Current titleText or Chart module to chain calls\n     * @public\n     */\n    exports.titleText = function (_x) {\n        if (!arguments.length) {\n            return titleText;\n        }\n        titleText = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text style object of the title at the top of sparkline.\n     * Using this method, you can set font-family, font-size, font-weight, font-style,\n     * and color (fill). The default text font settings:\n     * @example\n     * <pre>\n     * <code>\n     * {\n     *    'font-family': 'sans-serif',\n     *    'font-size': '22px',\n     *    'font-weight': 0,\n     *    'font-style': 'normal',\n     *    'fill': linearGradient[0]\n     * }\n     * </code>\n     * </pre>\n     *\n     * You can set attributes individually. Setting just 'font-family'\n     * within the object will set custom 'font-family` while the rest\n     * of the attributes will have the default values provided above.\n     * @param  {object} _x          Object with text font configurations\n     * @return {Object | module}    Current titleTextStyle or Chart module to chain calls\n     * @public\n     * @example\n     * sparkline.titleTextStyle({\n     *    'font-family': 'Roboto',\n     *    'font-size': '1.5em',\n     *    'font-weight': 600,\n     *    'font-style': 'italic',\n     *    'fill': 'lightblue'\n     * })\n     */\n    exports.titleTextStyle = function (_x) {\n        if (!arguments.length) {\n            return titleTextStyle;\n        }\n        titleTextStyle = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {number} _x              Desired valueLabel for the graph\n     * @return {valueLabel | module}    Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {number} _x=100      Desired width for the graph\n     * @return {width | module}     Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { min, max, sum, range, extent } from 'd3-array';\nimport { axisRight, axisBottom } from 'd3-axis';\nimport { nest } from 'd3-collection';\nimport { dispatch } from 'd3-dispatch';\nimport { easeQuadInOut } from 'd3-ease';\nimport { scaleLinear, scaleTime, scaleLog } from 'd3-scale';\nimport { line, area, stackOffsetNone, stackOrderNone, stack } from 'd3-shape';\nimport { select, mouse, touch } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport colorHelper from '../helpers/color';\nimport { getTimeSeriesAxis, getSortedNumberAxis } from '../helpers/axis';\nimport { castValueToType } from '../helpers/type';\nimport { axisTimeCombinations, curveMap, motion } from '../helpers/constants';\nimport {\n    formatIntegerValue,\n    formatDecimalValue,\n    isInteger,\n} from '../helpers/number';\nimport {\n    createFilterContainer,\n    createGlowWithMatrix,\n    bounceCircleHighlight,\n} from '../helpers/filter';\nimport { addDays, diffDays } from '../helpers/date';\nimport { stackedAreaLoadingMarkup } from '../helpers/load';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\nconst uniq = (arrArg) =>\n    arrArg.filter((elem, pos, arr) => arr.indexOf(elem) === pos);\n\n/**\n * Stacked Area Chart reusable API module that allows us\n * rendering a multi area and configurable chart.\n *\n * @module Stacked-area\n * @tutorial stacked-area\n * @requires d3-array, d3-axis, d3-collection, d3-dispatch, d3-ease, d3-scale, d3-shape, d3-selection, d3-transition, d3-time-format\n *\n * @example\n * let stackedArea = stackedArea();\n *\n * stackedArea\n *     .width(containerWidth);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset.data)\n *     .call(stackedArea);\n *\n */\n\n/**\n * @typdef D3Layout\n * @type function\n */\n\n/**\n * @typedef AreaChartData\n * @type {Object[]}\n * @property {String} date         Date of the entry in ISO8601 format (required)\n * @property {String} name         Name of the entry (required)\n * @property {Number} value        Value of the entry (required)\n *\n * @example\n * [\n *     {\n *         date: \"2011-01-05T00:00:00Z\",\n *         name: \"Direct\",\n *         value: 0\n *     }\n * ]\n */\nexport default function module() {\n    let margin = {\n            top: 70,\n            right: 30,\n            bottom: 60,\n            left: 70,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        xScale,\n        xAxis,\n        xSubAxis,\n        yScale,\n        yAxis,\n        monthAxisPadding = 30,\n        xAxisValueType = 'date',\n        xAxisScale = 'linear',\n        yTicks = 5,\n        yTickTextYOffset = -8,\n        yAxisBaseline = 0,\n        yAxisLabel,\n        yAxisLabelEl,\n        yAxisLabelOffset = -60,\n        yTickTextXOffset = -20,\n        tickPadding = 5,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        lineGradient = colorHelper.colorGradients.greenBlue,\n        nameToColorMap = null,\n        highlightFilter = null,\n        highlightFilterId = null,\n        highlightCircleSize = 12,\n        highlightCircleRadius = 5,\n        highlightCircleStroke = 1.2,\n        highlightCircleActiveRadius = highlightCircleRadius + 2,\n        highlightCircleActiveStrokeWidth = 5,\n        highlightCircleActiveStrokeOpacity = 0.6,\n        areaOpacity = 0.24,\n        order,\n        topicsOrder,\n        xAxisFormat = null,\n        xTicks = null,\n        xAxisCustomFormat = null,\n        locale,\n        baseLine,\n        areaCurve = 'monotoneX',\n        layers,\n        series,\n        layersInitial,\n        areaShape,\n        areaOutline,\n        // Area Animation\n        maxAreaNumber = 10,\n        areaAnimationDelayStep = 20,\n        areaAnimationDelays = range(\n            areaAnimationDelayStep,\n            maxAreaNumber * areaAnimationDelayStep,\n            areaAnimationDelayStep\n        ),\n        overlay,\n        overlayColor = 'rgba(0, 0, 0, 0)',\n        verticalMarkerContainer,\n        verticalMarkerLine,\n        epsilon,\n        dataPoints = {},\n        pointsSize = 1.5,\n        pointsColor = '#c0c6cc',\n        pointsBorderColor = '#ffffff',\n        isAnimated = false,\n        ease = easeQuadInOut,\n        areaAnimationDuration = motion.duration,\n        hasOutline = true,\n        svg,\n        chartWidth,\n        chartHeight,\n        data,\n        dataSorted,\n        dataSortedFormatted,\n        dataSortedZeroed,\n        grid = null,\n        tooltipThreshold = 480,\n        xAxisPadding = {\n            top: 0,\n            left: 15,\n            bottom: 0,\n            right: 0,\n        },\n        dateLabel = 'date',\n        valueLabel = 'value',\n        keyLabel = 'name',\n        emptyDataConfig = {\n            minDate: new Date(new Date().setDate(new Date().getDate() - 30)),\n            maxDate: new Date(),\n            minY: 0,\n            maxY: 500,\n        },\n        isUsingFakeData = false,\n        // getters\n        getName = ({ name }) => name,\n        getDate = ({ date }) => date,\n        // events\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customDataEntryClick',\n            'customTouchMove'\n        );\n\n    /**\n     * This function creates the graph using the selection and data provided\n     * @param {D3Selection} _selection A d3 selection that represents\n     * the container(s) where the chart(s) will be rendered\n     * @param {AreaChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n            dataSorted = getSortedData(data);\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildLayers();\n            buildScales();\n            buildAxis();\n            drawAxis();\n            drawStackedAreas();\n\n            addTouchEvents();\n\n            if (shouldShowTooltip()) {\n                drawHoverOverlay();\n                drawVerticalMarker();\n                addMouseEvents();\n            }\n        });\n    }\n\n    /**\n     * Adds a filter to the element\n     * @param {DOMElement} el\n     * @private\n     */\n    function addGlowFilter(el) {\n        if (!highlightFilter) {\n            highlightFilter = createFilterContainer(\n                svg.select('.metadata-group')\n            );\n            highlightFilterId = createGlowWithMatrix(highlightFilter);\n        }\n\n        let glowEl = select(el);\n\n        glowEl\n            .style('stroke-width', highlightCircleActiveStrokeWidth)\n            .style('stroke-opacity', highlightCircleActiveStrokeOpacity)\n            .attr('filter', `url(#${highlightFilterId})`);\n\n        bounceCircleHighlight(glowEl, ease, highlightCircleActiveRadius);\n    }\n\n    /**\n     * Adds events to the container group if the environment is not mobile\n     * Adding: mouseover, mouseout and mousemove\n     * @private\n     */\n    function addMouseEvents() {\n        svg.on('mouseover', function (d) {\n            handleMouseOver(this, d);\n        })\n            .on('mouseout', function (d) {\n                handleMouseOut(this, d);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d);\n            });\n    }\n\n    /**\n     * Adds events to the container group for the mobile environment\n     * Adding: touchmove\n     * @private\n     */\n    function addTouchEvents() {\n        svg.on('touchmove', function (d) {\n            handleTouchMove(this, d);\n        });\n    }\n\n    /**\n     * Formats the value depending on its characteristics\n     * @param  {Number} value Value to format\n     * @return {Number}       Formatted value\n     */\n    function getFormattedValue(value) {\n        let format;\n\n        if (isInteger(value)) {\n            format = formatIntegerValue;\n        } else {\n            format = formatDecimalValue;\n        }\n\n        return format(value);\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis() {\n        let minor, major;\n\n        if (xAxisValueType === 'number') {\n            minor = getSortedNumberAxis(dataSorted, width);\n            major = null;\n\n            if (xAxisScale === 'logarithmic') {\n                xAxis = axisBottom(xScale)\n                    .ticks(minor.tick, 'e')\n                    .tickFormat(function (d) {\n                        const log = Math.log(d) / Math.LN10;\n\n                        return Math.abs(Math.round(log) - log) < 1e-6\n                            ? '10^' + Math.round(log)\n                            : '';\n                    });\n            } else {\n                xAxis = axisBottom(xScale)\n                    .ticks(minor.tick)\n                    .tickFormat(getFormattedValue);\n            }\n        } else {\n            if (\n                xAxisFormat === 'custom' &&\n                typeof xAxisCustomFormat === 'string'\n            ) {\n                minor = {\n                    tick: xTicks,\n                    format: timeFormat(xAxisCustomFormat),\n                };\n                major = null;\n            } else {\n                ({ minor, major } = getTimeSeriesAxis(\n                    dataSorted,\n                    width,\n                    xAxisFormat,\n                    locale\n                ));\n\n                xSubAxis = axisBottom(xScale)\n                    .ticks(major.tick)\n                    .tickSize(0, 0)\n                    .tickFormat(major.format);\n            }\n\n            xAxis = axisBottom(xScale)\n                .ticks(minor.tick)\n                .tickSize(10, 0)\n                .tickPadding(tickPadding)\n                .tickFormat(minor.format);\n        }\n\n        yAxis = axisRight(yScale)\n            .ticks(yTicks)\n            .tickSize([0])\n            .tickPadding(tickPadding)\n            .tickFormat(getFormattedValue);\n\n        drawGridLines(minor.tick, yTicks);\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * NOTE: The order of drawing of this group elements is really important,\n     * as everything else will be drawn on top of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('x axis', true);\n        container\n            .selectAll('.x-axis-group')\n            .append('g')\n            .classed('axis sub-x', true);\n        container.append('g').classed('y-axis-group axis', true);\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('y-axis-label', true);\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Builds the stacked layers layout\n     * @return {D3Layout} Layout for drawing the chart\n     * @private\n     */\n    function buildLayers() {\n        dataSortedFormatted = dataSorted\n            .map((d) => Object.assign({}, d, d.values))\n            .map((d) => {\n                Object.keys(d).forEach((k) => {\n                    const entry = d[k];\n\n                    if (entry && entry.name) {\n                        d[entry.name] = entry.value;\n                    }\n                });\n\n                return Object.assign({}, d, {\n                    date: castValueToType(d['key'], xAxisValueType),\n                });\n            });\n\n        dataSortedZeroed = dataSorted\n            .map((d) => Object.assign({}, d, d.values))\n            .map((d) => {\n                Object.keys(d).forEach((k) => {\n                    const entry = d[k];\n\n                    if (entry && entry.name) {\n                        d[entry.name] = 0;\n                    }\n                });\n\n                return Object.assign({}, d, {\n                    date: castValueToType(d['key'], xAxisValueType),\n                });\n            });\n\n        let initialTotalsObject = uniq(data.map(getName)).reduce(\n            (memo, key) => Object.assign({}, memo, { [key]: 0 }),\n            {}\n        );\n\n        let totals = data.reduce(\n            (memo, item) =>\n                Object.assign({}, memo, {\n                    [item.name]: (memo[item.name] += item.value),\n                }),\n            initialTotalsObject\n        );\n\n        order = topicsOrder || formatOrder(totals);\n\n        let stack3 = stack()\n            .keys(order)\n            .order(stackOrderNone)\n            .offset(stackOffsetNone);\n\n        layersInitial = stack3(dataSortedZeroed);\n        layers = moveLayersByBaseline(stack3(dataSortedFormatted));\n    }\n\n    /**\n     * Takes the layers and moves them by the yAxisBaseline\n     * Returns the original layers if yAxisBaseline equals zero, because nothing to do then\n     * @param layers\n     * @return Manipulated Layers\n     */\n    function moveLayersByBaseline(layers) {\n        if (yAxisBaseline === 0) {\n            return layers;\n        }\n\n        layers = layers.map((section) => {\n            section.map((entry) => {\n                entry[0] = yAxisBaseline;\n\n                return entry;\n            });\n\n            return section;\n        });\n\n        return layers;\n    }\n\n    /**\n     * Takes an object with all topics as keys and their aggregate totals as values,\n     * sorts them into a list by descending total value and\n     * moves \"Other\" to the end\n     * @param  {Object} totals  Keys of all the topics and their corresponding totals\n     * @return {Array}          List of topic names in aggregate order\n     */\n    function formatOrder(totals) {\n        let order = Object.keys(totals).sort((a, b) => {\n            if (totals[a] > totals[b]) return -1;\n            if (totals[a] === totals[b]) return 0;\n\n            return 1;\n        });\n\n        let otherIndex = order.indexOf('Other');\n\n        if (otherIndex >= 0) {\n            let other = order.splice(otherIndex, 1);\n\n            order = order.concat(other);\n        }\n\n        return order;\n    }\n\n    /**\n     * Creates the x, y and color scales of the chart\n     * @private\n     */\n    function buildScales() {\n        xScale = buildXAxisScale();\n        yScale = buildYAxisScale();\n\n        nameToColorMap =\n            nameToColorMap ||\n            order.reduce(\n                (memo, topic, index) =>\n                    Object.assign({}, memo, { [topic]: colorSchema[index] }),\n                {}\n            );\n    }\n\n    /**\n     * Creates the xScale depending on the settings of\n     * xAxisValueType and xAxisScale\n     * @private\n     */\n    function buildXAxisScale() {\n        if (xAxisValueType === 'number') {\n            if (xAxisScale === 'logarithmic') {\n                return scaleLog()\n                    .domain(extent(dataSorted, ({ date }) => date))\n                    .rangeRound([0, chartWidth]);\n            } else {\n                return scaleLinear()\n                    .domain(extent(dataSorted, ({ date }) => date))\n                    .rangeRound([0, chartWidth]);\n            }\n        } else {\n            return scaleTime()\n                .domain(extent(dataSorted, ({ date }) => date))\n                .rangeRound([0, chartWidth]);\n        }\n    }\n\n    /**\n     * Creates the yScale\n     * @private\n     */\n    function buildYAxisScale() {\n        const minY = getMinYAxisScale();\n        const maxY = getMaxYAxisScale();\n\n        return scaleLinear()\n            .domain([minY, maxY])\n            .rangeRound([chartHeight, 0])\n            .nice();\n    }\n\n    /**\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart stacked-area', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Creates fake data for when data is an empty array\n     * @return {array}      Fake data built from emptyDataConfig settings\n     */\n    function createFakeData() {\n        const numDays = diffDays(\n            emptyDataConfig.minDate,\n            emptyDataConfig.maxDate\n        );\n        const emptyArray = Array.apply(null, Array(numDays));\n\n        isUsingFakeData = true;\n\n        return [\n            ...emptyArray.map((el, i) => ({\n                [dateLabel]: addDays(emptyDataConfig.minDate, i),\n                [valueLabel]: 0,\n                [keyLabel]: '1',\n            })),\n            ...emptyArray.map((el, i) => ({\n                [dateLabel]: addDays(emptyDataConfig.minDate, i),\n                [valueLabel]: 0,\n                [keyLabel]: '2',\n            })),\n        ];\n    }\n\n    /**\n     * Cleaning data casting the values and dates to the proper type while keeping\n     * the rest of properties on the data. It creates fake data is the data is empty.\n     * @param  {AreaChartData} originalData   Raw data from the container\n     * @return {AreaChartData}                Parsed data with values and dates\n     * @private\n     */\n    function cleanData(originalData) {\n        originalData =\n            originalData.length === 0 ? createFakeData() : originalData;\n\n        return originalData.reduce((acc, d) => {\n            (d.date = castValueToType(d[dateLabel], xAxisValueType)),\n                (d.value = +d[valueLabel]);\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group .axis.x')\n            .attr('transform', `translate( 0, ${chartHeight} )`)\n            .call(xAxis);\n\n        if (xAxisFormat !== 'custom' && xAxisValueType !== 'number') {\n            svg.select('.x-axis-group .axis.sub-x')\n                .attr(\n                    'transform',\n                    `translate(0, ${chartHeight + monthAxisPadding})`\n                )\n                .call(xSubAxis);\n        }\n\n        svg.select('.y-axis-group.axis')\n            .attr('transform', `translate( ${-xAxisPadding.left}, 0)`)\n            .call(yAxis)\n            .call(adjustYTickLabels);\n\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label-text').remove();\n            }\n\n            yAxisLabelEl = svg\n                .select('.y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n\n        // Moving the YAxis tick labels to the right side\n        // selectAll('.y-axis-group .tick text')\n        //     .attr('transform', `translate( ${-chartWidth - yTickTextXOffset}, ${yTickTextYOffset})` );\n    }\n\n    /**\n     * Adjusts the position of the y axis' ticks\n     * @param  {D3Selection} selection Y axis group\n     * @return void\n     */\n    function adjustYTickLabels(selection) {\n        selection\n            .selectAll('.tick text')\n            .attr(\n                'transform',\n                `translate(${yTickTextXOffset}, ${yTickTextYOffset})`\n            );\n    }\n\n    /**\n     * Creates SVG dot elements for each data entry and draws them\n     * TODO: Plug\n     */\n    function drawDataReferencePoints() {\n        // Creates Dots on Data points\n        const points = svg\n            .select('.chart-group')\n            .selectAll('.dots')\n            .data(layers)\n            .enter()\n            .append('g')\n            .attr('class', 'dots')\n            .attr('d', ({ values }) => areaShape(values))\n            .attr('clip-path', 'url(#clip)');\n\n        // Processes the points\n        // TODO: Optimize this code\n        points\n            .selectAll('.dot')\n            .data(({ values }, index) =>\n                values.map((point) => ({ index, point }))\n            )\n            .enter()\n            .append('circle')\n            .attr('class', 'dot')\n            .attr('r', () => pointsSize)\n            .attr('fill', () => pointsColor)\n            .attr('stroke-width', '0')\n            .attr('stroke', pointsBorderColor)\n            .attr('transform', function (d) {\n                let { point } = d;\n                let key = xScale(point.date);\n\n                dataPoints[key] = dataPoints[key] || [];\n                dataPoints[key].push(d);\n\n                let { date, y, y0 } = point;\n\n                return `translate( ${xScale(date)}, ${yScale(y + y0)} )`;\n            });\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * TODO: Refactor into new grid helper\n     * @return void\n     */\n    function drawGridLines() {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        let shouldHighlightXAxis = getMinYAxisScale() < 0;\n\n        if (grid === 'horizontal' || grid === 'full') {\n            drawHorizontalGridLines();\n            if (shouldHighlightXAxis) {\n                drawHorizontalHighlightLine();\n            }\n        }\n\n        if (grid === 'vertical' || grid === 'full') {\n            drawVerticalGridLines();\n        }\n    }\n\n    /**\n     * Draws the grid lines for a vertical bar chart\n     * @return {void}\n     */\n    function drawHorizontalGridLines() {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     */\n    function drawHorizontalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', 0)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Adds highlight class to horizontal grid line at data = 0\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalHighlightLine() {\n        const horizontalGrid = svg\n            .select('.horizontal')\n            .selectAll('.grid-line');\n        horizontalGrid.attr('class', (d) =>\n            d === 0\n                ? 'grid-line horizontal-grid-line--highlighted'\n                : 'grid-line'\n        );\n    }\n\n    /**\n     * Draws the grid lines for an horizontal bar chart\n     * @return {void}\n     */\n    function drawVerticalGridLines() {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(barLoadingMarkup);\n    }\n\n    /**\n     * Draws an overlay element over the graph\n     * @private\n     */\n    function drawHoverOverlay() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (overlay) {\n            svg.selectAll('.overlay').remove();\n        }\n\n        overlay = svg\n            .select('.metadata-group')\n            .append('rect')\n            .attr('class', 'overlay')\n            .attr('y1', 0)\n            .attr('y2', chartHeight)\n            .attr('height', chartHeight)\n            .attr('width', chartWidth)\n            .attr('fill', overlayColor)\n            .style('display', 'none');\n    }\n\n    /**\n     * Draws an empty line when the data is all zero\n     * @private\n     */\n    function drawEmptyDataLine() {\n        let emptyDataLine = line()\n            .x((d) => xScale(d.date))\n            .y(() => yScale(0) - 1);\n\n        let chartGroup = svg.select('.chart-group');\n\n        chartGroup\n            .append('path')\n            .attr('class', 'empty-data-line')\n            .attr('d', emptyDataLine(dataSortedFormatted))\n            .style('stroke', 'url(#empty-data-line-gradient)');\n\n        chartGroup\n            .append('linearGradient')\n            .attr('id', 'empty-data-line-gradient')\n            .attr('gradientUnits', 'userSpaceOnUse')\n            .attr('x1', 0)\n            .attr('x2', xScale(data[data.length - 1].date))\n            .attr('y1', 0)\n            .attr('y2', 0)\n            .selectAll('stop')\n            .data([\n                { offset: '0%', color: lineGradient[0] },\n                { offset: '100%', color: lineGradient[1] },\n            ])\n            .enter()\n            .append('stop')\n            .attr('offset', ({ offset }) => offset)\n            .attr('stop-color', ({ color }) => color);\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(stackedAreaLoadingMarkup);\n    }\n\n    /**\n     * Draws the different areas into the chart-group element\n     * @private\n     */\n    function drawStackedAreas() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (series) {\n            svg.selectAll('.layer-container').remove();\n            svg.selectAll('.layer').remove();\n            svg.selectAll('.area-outline').remove();\n        }\n\n        if (isUsingFakeData) {\n            drawEmptyDataLine();\n\n            return;\n        }\n\n        areaShape = area()\n            .curve(curveMap[areaCurve])\n            .x(({ data }) => xScale(data.date))\n            .y0((d) => yScale(d[0]))\n            .y1((d) => yScale(d[1]));\n\n        areaOutline = line()\n            .curve(areaShape.curve())\n            .x(({ data }) => xScale(data.date))\n            .y((d) => yScale(d[1]));\n\n        if (isAnimated) {\n            series = svg\n                .select('.chart-group')\n                .selectAll('.layer')\n                .data(layersInitial, getName)\n                .enter()\n                .append('g')\n                .classed('layer-container', true);\n\n            series\n                .append('path')\n                .attr('class', 'layer')\n                .attr('d', areaShape)\n                .style('opacity', areaOpacity)\n                .attr('fill', ({ key }) => nameToColorMap[key]);\n\n            series\n                .append('path')\n                .attr('class', 'area-outline')\n                .attr('d', areaOutline)\n                .style('stroke', ({ key }) => nameToColorMap[key])\n                .attr('fill', 'none');\n\n            // Update\n            svg.select('.chart-group')\n                .selectAll('.layer')\n                .data(layers)\n                .transition()\n                .delay((_, i) => areaAnimationDelays[i])\n                .duration(areaAnimationDuration)\n                .ease(ease)\n                .attr('d', areaShape)\n                .style('opacity', areaOpacity)\n                .attr('fill', ({ key }) => nameToColorMap[key]);\n\n            svg.select('.chart-group')\n                .selectAll('.area-outline')\n                .data(layers)\n                .transition()\n                .delay((_, i) => areaAnimationDelays[i])\n                .duration(areaAnimationDuration)\n                .ease(ease)\n                .attr('d', areaOutline)\n                .attr('fill', 'none');\n        } else {\n            series = svg\n                .select('.chart-group')\n                .selectAll('.layer')\n                .data(layers)\n                .enter()\n                .append('g')\n                .classed('layer-container', true);\n\n            series\n                .append('path')\n                .attr('class', 'layer')\n                .attr('d', areaShape)\n                .style('opacity', areaOpacity)\n                .attr('fill', ({ key }) => nameToColorMap[key]);\n\n            series\n                .append('path')\n                .attr('class', 'area-outline')\n                .attr('d', areaOutline)\n                .style('stroke', ({ key }) => nameToColorMap[key]);\n\n            // Update\n            svg.select('.chart-group')\n                .selectAll('.layer')\n                .attr('d', areaShape)\n                .style('opacity', areaOpacity)\n                .attr('fill', ({ key }) => nameToColorMap[key]);\n\n            svg.select('.chart-group')\n                .selectAll('.area-outline')\n                .attr('class', 'area-outline')\n                .attr('d', areaOutline)\n                .style('stroke', ({ key }) => nameToColorMap[key]);\n        }\n\n        if (!hasOutline) {\n            svg.select('.chart-group')\n                .selectAll('.area-outline')\n                .style('display', 'none');\n        }\n\n        // Exit\n        series.exit().transition().style('opacity', 0).remove();\n    }\n\n    /**\n     * Creates the vertical marker\n     * @return void\n     */\n    function drawVerticalMarker() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (verticalMarkerContainer) {\n            svg.selectAll('.vertical-marker-container').remove();\n        }\n\n        verticalMarkerContainer = svg\n            .select('.metadata-group')\n            .append('g')\n            .attr('class', 'vertical-marker-container')\n            .attr('transform', 'translate(9999, 0)');\n\n        verticalMarkerLine = verticalMarkerContainer\n            .selectAll('path')\n            .data([\n                {\n                    x1: 0,\n                    y1: 0,\n                    x2: 0,\n                    y2: 0,\n                },\n            ])\n            .enter()\n            .append('line')\n            .classed('vertical-marker', true)\n            .attr('x1', 0)\n            .attr('y1', chartHeight)\n            .attr('x2', 0)\n            .attr('y2', 0);\n    }\n\n    /**\n     * Removes all the datapoints highlighter circles added to the marker container\n     * @return void\n     * @private\n     */\n    function cleanDataPointHighlights() {\n        verticalMarkerContainer.selectAll('.circle-container').remove();\n    }\n\n    /**\n     * Orders the data by date for consumption on the chart tooltip\n     * @param  {AreaChartData} data    Chart data\n     * @return {Object[]}               Chart data ordered by date\n     * @private\n     */\n    function getSortedData(data) {\n        return nest()\n            .key(getDate)\n            .entries(data.sort((a, b) => a.date - b.date))\n            .map((d) => {\n                return Object.assign({}, d, {\n                    date: castValueToType(d.key, xAxisValueType),\n                });\n            });\n    }\n\n    /**\n     * Computes the minimum value\n     *\n     * @return {Number} Min value\n     */\n    function getMinValue() {\n        return min(data.map((d) => d.value));\n    }\n\n    /**\n     * Computes the minimal sum of values for any date\n     *\n     * @return {Number} Min value\n     */\n    function getMinValueByDate() {\n        let keys = uniq(data.map((o) => o.name));\n        let minValueByDate = min(dataSortedFormatted, function (d) {\n            let vals = keys.map((key) => d[key]);\n\n            return sum(vals);\n        });\n\n        return minValueByDate;\n    }\n\n    /**\n     * Computes the maximum sum of values for any date\n     *\n     * @return {Number} Max value\n     */\n    function getMaxValueByDate() {\n        let keys = uniq(data.map((o) => o.name));\n        let maxValueByDate = max(dataSortedFormatted, function (d) {\n            let vals = keys.map((key) => d[key]);\n\n            return sum(vals);\n        });\n\n        return maxValueByDate;\n    }\n\n    /**\n     * Computes the mininmal value for the Y-axis scale\n     *\n     * @return {Number} minY value\n     */\n    function getMinYAxisScale() {\n        if (isUsingFakeData) {\n            return emptyDataConfig.minY;\n        }\n\n        return min([getMinValue(), getMinValueByDate(), yAxisBaseline, 0]);\n    }\n\n    /**\n     * Computes the maximal value for the Y-axis scale\n     *\n     * @return {Number} maxY value\n     */\n    function getMaxYAxisScale() {\n        if (isUsingFakeData) {\n            return emptyDataConfig.maxY;\n        }\n\n        return max([getMaxValueByDate(), yAxisBaseline]);\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels\n     * @param  {Number} mouseX X position of the mouse\n     * @return {obj}        Data entry that is closer to that x axis position\n     */\n    function getNearestDataPoint(mouseX) {\n        let points = dataSorted.filter(\n            ({ date }) => Math.abs(xScale(date) - mouseX) <= epsilon\n        );\n\n        if (points.length) {\n            return points[0];\n        }\n    }\n\n    /**\n     * Epsilon is the value given to the number representing half of the distance in\n     * pixels between two date data points\n     * @return {Number} half distance between any two points\n     */\n    function setEpsilon() {\n        let dates = dataSorted.map(({ date }) => date);\n\n        epsilon = (xScale(dates[1]) - xScale(dates[0])) / 2;\n    }\n\n    /**\n     * MouseMove handler, calculates the nearest dataPoint to the cursor\n     * and updates metadata related to it\n     * @private\n     */\n    function handleMouseMove(e) {\n        epsilon || setEpsilon();\n\n        let [xPosition, yPosition] = d3Selection.mouse(e),\n            dataPoint = getNearestDataPoint(xPosition - margin.left),\n            dataPointXPosition;\n\n        if (dataPoint) {\n            dataPointXPosition = xScale(castValueToType(dataPoint.key));\n            // Move verticalMarker to that datapoint\n            moveVerticalMarker(dataPointXPosition);\n            // Add data points highlighting\n            highlightDataPoints(dataPoint);\n            // Emit event with xPosition for tooltip or similar feature\n            dispatcher.call(\n                'customMouseMove',\n                e,\n                dataPoint,\n                nameToColorMap,\n                dataPointXPosition,\n                yPosition\n            );\n        }\n    }\n\n    /**\n     * MouseMove handler, calculates the nearest dataPoint to the cursor\n     * and updates metadata related to it\n     * @private\n     */\n    function handleMouseMove(e) {\n        epsilon || setEpsilon();\n\n        let [xPosition, yPosition] = mouse(e),\n            dataPoint = getNearestDataPoint(xPosition - margin.left),\n            dataPointXPosition;\n\n        if (dataPoint) {\n            dataPointXPosition = xScale(new Date(dataPoint.key));\n            // Move verticalMarker to that datapoint\n            moveVerticalMarker(dataPointXPosition);\n            // Add data points highlighting\n            highlightDataPoints(dataPoint);\n            // Emit event with xPosition for tooltip or similar feature\n            dispatcher.call(\n                'customMouseMove',\n                e,\n                dataPoint,\n                nameToColorMap,\n                dataPointXPosition,\n                yPosition\n            );\n        }\n    }\n\n    /**\n     * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n     * It also resets the container of the vertical marker\n     * @private\n     */\n    function handleMouseOut(e, d) {\n        overlay.style('display', 'none');\n        verticalMarkerLine.classed('bc-is-active', false);\n        verticalMarkerContainer.attr('transform', 'translate(9999, 0)');\n\n        dispatcher.call('customMouseOut', e, d, mouse(e));\n    }\n\n    /**\n     * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n     * @private\n     */\n    function handleMouseOver(e, d) {\n        overlay.style('display', 'block');\n        verticalMarkerLine.classed('bc-is-active', true);\n\n        dispatcher.call('customMouseOver', e, d, mouse(e));\n    }\n\n    /**\n     * Touchmove highlighted points\n     * It will only pass the information with the event\n     * @private\n     */\n    function handleTouchMove(e, d) {\n        dispatcher.call('customTouchMove', e, d, touch(e));\n    }\n\n    /**\n     * Mouseclick handler over one of the highlight points\n     * It will only pass the information with the event\n     * @private\n     */\n    function handleHighlightClick(e, d) {\n        dispatcher.call('customDataEntryClick', e, d, mouse(e));\n    }\n\n    /**\n     * Creates coloured circles marking where the exact data y value is for a given data point\n     * @param  {obj} dataPoint Data point to extract info from\n     * @private\n     */\n    function highlightDataPoints({ values }) {\n        let accumulator = 0;\n\n        cleanDataPointHighlights();\n\n        // ensure order stays constant\n        let sortedValues = order.reduce((acc, current) => {\n            return [...acc, values.find(({ name }) => name === current)];\n        }, []);\n\n        sortedValues.forEach((d, index) => {\n            let marker = verticalMarkerContainer\n                .append('g')\n                .classed('circle-container', true)\n                .append('circle')\n                .classed('data-point-highlighter', true)\n                .attr('cx', highlightCircleSize)\n                .attr('cy', 0)\n                .attr('r', highlightCircleRadius)\n                .style('stroke-width', highlightCircleStroke)\n                .style('stroke', nameToColorMap[d.name])\n                .style('cursor', 'pointer')\n                .on('click', function () {\n                    addGlowFilter(this);\n                    handleHighlightClick(this, d);\n                })\n                .on('mouseout', function () {\n                    removeFilter(this);\n                });\n\n            accumulator = accumulator + sortedValues[index][valueLabel];\n\n            marker.attr(\n                'transform',\n                `translate( ${-highlightCircleSize}, ${yScale(accumulator)} )`\n            );\n        });\n    }\n\n    /**\n     * Helper method to update the x position of the vertical marker\n     * @param  {obj} dataPoint Data entry to extract info\n     * @return void\n     */\n    function moveVerticalMarker(verticalMarkerXPosition) {\n        verticalMarkerContainer.attr(\n            'transform',\n            `translate(${verticalMarkerXPosition},0)`\n        );\n    }\n\n    /**\n     * Resets a point filter\n     * @param {DOMElement} point  Point to reset\n     */\n    function removeFilter(point) {\n        select(point).attr('filter', 'none');\n    }\n\n    /**\n     * Determines if we should add the tooltip related logic depending on the\n     * size of the chart and the tooltipThreshold variable value\n     * @return {boolean} Should we build the tooltip?\n     * @private\n     */\n    function shouldShowTooltip() {\n        return width > tooltipThreshold && !isUsingFakeData;\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the area animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return areaAnimationDuration;\n        }\n        areaAnimationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the area curve of the stacked area.\n     * @param {String} [_x='monotoneX']     Desired curve for the stacked area, default 'monotoneX'. Other options are:\n     * basis, natural, linear, monotoneY, step, stepAfter, stepBefore, cardinal, and\n     * catmullRom. Visit https://github.com/d3/d3-shape#curves for more information.\n     * @return {String | module}            Current area curve setting or Chart module to chain calls\n     * @public\n     * @example stackedArea.areaCurve('step')\n     */\n    exports.areaCurve = function (_x) {\n        if (!arguments.length) {\n            return areaCurve;\n        }\n        areaCurve = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the opacity of the stacked areas in the chart (all of them will have the same opacity)\n     * @param  {Number} _x          Opacity to get/set\n     * @return {Number | module}    Current opacity or Area Chart module to chain calls\n     * @public\n     */\n    exports.areaOpacity = function (_x) {\n        if (!arguments.length) {\n            return areaOpacity;\n        }\n        areaOpacity = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the constants to be used to force the x axis to respect a certain granularity\n     * current options: MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR\n     * @example\n     *     area.xAxisCustomFormat(area.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.axisTimeCombinations = axisTimeCombinations;\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example stackedArea.colorMap({name: 'colorHex', name2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x        Desired colorSchema for the graph\n     * @return {String[] | module}  Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the dateLabel of the chart\n     * @param  {String} _x          Desired dateLabel for the graph\n     * @return {String | module}    Current dateLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.dateLabel = function (_x) {\n        if (!arguments.length) {\n            return dateLabel;\n        }\n        dateLabel = _x;\n        dataKeyDeprecationMessage('date');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the emptyDataConfig of the chart\n     * @param  {Object} _x          emptyDataConfig object to get/set\n     * @return {Object | module}    Current config for when chart data is an empty array\n     * @public\n     */\n    exports.emptyDataConfig = function (_x) {\n        if (!arguments.length) {\n            return emptyDataConfig;\n        }\n        emptyDataConfig = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the grid mode\n     * @param  {String} _x          Desired mode for the grid ('vertical'|'horizontal'|'full')\n     * @return {String | module}    Current mode of the grid or Area Chart module to chain calls\n     * @public\n     */\n    exports.grid = function (_x) {\n        if (!arguments.length) {\n            return grid;\n        }\n        grid = _x;\n\n        return this;\n    };\n\n    /**\n     * Enables or disables the outline at the top of the areas\n     * @param {Boolean} _x = true   Whether if the areas in the chart have an outline at the top\n     * @return {Boolean | module}   Current state of the flag\n     * @public\n     */\n    exports.hasOutline = function (_x) {\n        if (!arguments.length) {\n            return hasOutline;\n        }\n        hasOutline = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x          Desired width for the graph\n     * @return {Number | module}    Current height or Area Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * @param  {Boolean} _x = false     Desired animation flag\n     * @return {Boolean | module}       Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the keyLabel of the chart\n     * @param  {Number} _x Desired keyLabel for the graph\n     * @return {Number | module} Current keyLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.keyLabel = function (_x) {\n        if (!arguments.length) {\n            return keyLabel;\n        }\n        keyLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return {Object | module}    Current margin or Area Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the minimum width of the graph in order to show the tooltip\n     * NOTE: This could also depend on the aspect ratio\n     * @param  {Number} _x          Minimum width of the graph\n     * @return {Number | module}    Current tooltipThreshold or Area Chart module to chain calls\n     * @public\n     */\n    exports.tooltipThreshold = function (_x) {\n        if (!arguments.length) {\n            return tooltipThreshold;\n        }\n        tooltipThreshold = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass an override for the ordering of the topics\n     * @param  {String[]} _x          Array of the names of your tooltip items\n     * @return {String[] | module}    Current override order or Chart module to chain calls\n     * @public\n     */\n    exports.topicsOrder = function (_x) {\n        if (!arguments.length) {\n            return topicsOrder;\n        }\n        topicsOrder = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Pass language tag for the tooltip to localize the date.\n     * Feature uses Intl.DateTimeFormat, for compatability and support, refer to\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n     * @param  {String} _x          A language tag (BCP 47) like 'en-US' or 'fr-FR'\n     * @return {String | Module}    Current locale or module to chain calls\n     * @public\n     */\n    exports.locale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut,\n     * customDataEntryClick and customTouchMove\n     * @return {module}     Stacked Area\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {Number} _x          Desired valueLabel for the graph\n     * @return {Number | module}    Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x          Desired width for the graph\n     * @return {Number | module}    Current width or Area Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x format\n     * It requires a `xAxisFormat` of 'custom' in order to work.\n     * NOTE: localization not supported\n     * @param  {String} _x            Desired format for x axis, one of the d3.js date formats [here]{@link https://github.com/d3/d3-time-format#locale_format}\n     * @return {String | Module}      Current format or module to chain calls\n     * @public\n     * @example\n     *     stackedArea.xAxisCustomFormat(stackedArea.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.xAxisCustomFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisCustomFormat;\n        }\n        xAxisCustomFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x axis grouping\n     * @param  {String} _x          Desired format, a combination of axisTimeCombinations (MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR)\n     * Set it to 'custom' to make use of specific formats with xAxisCustomFormat\n     * @return { String|Module }      Current format or module to chain calls\n     * @public\n     * @example\n     *     stackedArea.xAxisCustomFormat(stackedArea.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.xAxisFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisFormat;\n        }\n        xAxisFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the `xAxisValueType`.\n     * Choose between 'date' and 'number'. When set to `number` the values of the x-axis must not\n     * be dates anymore, but can be arbitrary numbers.\n     * @param  {string} [_x='date']     Desired value type of the x-axis\n     * @return {string | module}        Current value type of the x-axis or Chart module to chain calls\n     * @public\n     * @example stackedArea.xAxisValueType('numeric')\n     */\n    exports.xAxisValueType = function (_x) {\n        if (!arguments.length) {\n            return xAxisValueType;\n        }\n        xAxisValueType = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the `xAxisScale`.\n     * Choose between 'linear' and 'logarithmic'. The setting will only work if `xAxisValueType` is set to\n     * 'number' as well, otherwise it won't influence the visualization.\n     * @param  {string} [_x='linear']   Desired value type of the x-axis\n     * @return {string | module}        Current value type of the x-axis or Chart module to chain calls\n     * @public\n     * @example stackedArea.xAxisValueType('numeric').xAxisScale('logarithmic')\n     */\n    exports.xAxisScale = function (_x) {\n        if (!arguments.length) {\n            return xAxisScale;\n        }\n        xAxisScale = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x ticks. It requires a `xAxisFormat` of 'custom' in order to work.\n     * NOTE: This value needs to be a multiple of 2, 5 or 10. They won't always work as expected, as D3 decides at the end\n     * how many and where the ticks will appear.\n     * @param  {Number} _x            Desired number of x axis ticks (multiple of 2, 5 or 10)\n     * @return {Number | Module}      Current number or ticks or module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the y-axis label of the chart\n     * @param  {String} _x Desired label string\n     * @return {String | module} Current yAxisLabel or Chart module to chain calls\n     * @public\n     * @example stackedArea.yAxisLabel('Ticket Sales')\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel of the chart.\n     * The method accepts both positive and negative values.\n     * @param  {Number} [_x=-60]    Desired offset for the label\n     * @return {Number | module}    Current yAxisLabelOffset or Chart module to chain calls\n     * @public\n     * @example stackedArea.yAxisLabelOffset(-55)\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the y axis on the chart\n     * @param  {Number} [_x=5]      Desired vertical ticks\n     * @return {Number | module}    Current vertical ticks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the yAxisBaseline - this is the y-value where the area starts from in y-direction\n     * (default is 0). Change this value if you don't want to start your area from y=0.\n     * @param  {Number} [_x=0]      Desired baseline of the y axis\n     * @return {Number | module}    Current baseline or Chart module to chain calls\n     * @public\n     * @example stackedArea.yAxisBaseline(20)\n     */\n    exports.yAxisBaseline = function (_x) {\n        if (!arguments.length) {\n            return yAxisBaseline;\n        }\n        yAxisBaseline = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { min, max } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { dispatch } from 'd3-dispatch';\nimport { easeCircleIn } from 'd3-ease';\nimport * as d3Format from 'd3-format';\nimport { timeFormat } from 'd3-time-format';\nimport { scaleSqrt, scaleOrdinal, scaleLinear } from 'd3-scale';\nimport { curveBasis, line } from 'd3-shape';\nimport { select, mouse } from 'd3-selection';\nimport { voronoi } from 'd3-voronoi';\nimport { zoom as d3Zoom, zoomTransform } from 'd3-zoom';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport colorHelper from '../helpers/color';\nimport {\n    createFilterContainer,\n    createGlowWithMatrix,\n    bounceCircleHighlight,\n} from '../helpers/filter';\nimport { calcLinearRegression } from '../helpers/number';\nimport { setDefaultLocale } from '../helpers/locale';\nimport { motion } from '../helpers/constants';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\n/**\n * Reusable Scatter Plot API class that renders a\n * simple and configurable scatter chart.\n *\n * @module Scatter-plot\n * @tutorial scatter-plot\n * @requires d3-array, d3-axis, d3-dispatch, d3-format, d3-ease, d3-scale, d3-selection, d3-shape, d3-voronoi\n *\n * @example\n * let scatterPlot = scatterPlot();\n *\n * scatterPlot\n *     .grid('horizontal')\n *     .width(500);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(scatterPlot);\n */\n\n/**\n * @typedef ScatterPlotData\n * @type {Object[]}\n * @property {String} name      Name of the category or topic for data point\n * @property {Number} x         Data point's position value relative to x-axis\n * @property {Number} y         Data point's position value relative to y-axis\n *\n * @example\n * [\n *     {\n *         name: 'topic',\n *         x: 123,\n *         y: 24,\n *     },\n *     {\n *         name: 'topic1',\n *         x: 53,\n *         y: 31,\n *     },\n *     {\n *         name: 'topic2',\n *         x: 631,\n *         y: 321,\n *     },\n *     {\n *         name: 'topic1',\n *         x: 231,\n *         y: 111,\n *     }\n * ]\n */\nexport default function module() {\n    let margin = {\n            top: 20,\n            right: 10,\n            bottom: 20,\n            left: 40,\n        },\n        width = 960,\n        height = 500,\n        nameToColorMap = null,\n        dataPoints,\n        xKey = 'x',\n        yKey = 'y',\n        nameKey = 'name',\n        xTicks = 6,\n        yTicks = null,\n        tickPadding = 5,\n        hollowColor = '#fff',\n        grid = null,\n        baseLine,\n        maskGridLines,\n        voronoiMesh,\n        xAxis,\n        xAxisFormatType = 'number',\n        xAxisFormat = '',\n        xScale,\n        xOriginalScale,\n        yAxis,\n        yAxisFormat = '',\n        yScale,\n        yOriginalScale,\n        areaScale,\n        colorScale,\n        yAxisLabel,\n        yAxisLabelEl,\n        yAxisLabelOffset = -50,\n        xAxisLabel,\n        xAxisLabelEl,\n        xAxisLabelOffset = -50,\n        minZoom = 0.5,\n        maxZoom = 20,\n        trendLinePath,\n        trendLineCurve = curveBasis,\n        trendLineStrokWidth = '2',\n        trendLineDelay = 1500,\n        trendLineDuration = 2000,\n        highlightPointData,\n        highlightFilter,\n        highlightFilterId,\n        highlightStrokeWidth = 10,\n        highlightCrossHairContainer,\n        highlightCrossHairLabelsContainer,\n        highlightTextLegendOffset = -45,\n        xAxisPadding = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        circleOpacity = 0.24,\n        circleStrokeOpacity = 1,\n        circleStrokeWidth = 1,\n        highlightCircle = null,\n        highlightCircleOpacity = circleOpacity,\n        maxCircleArea = 10,\n        maskingRectangle,\n        maskingRectangleId = 'scatter-clip-path',\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        isAnimated = false,\n        hasCrossHairs = false,\n        hasTrendline = false,\n        enableZoom = false,\n        ease = easeCircleIn,\n        delay = 500,\n        duration = motion.duration,\n        hasHollowCircles = false,\n        locale = null,\n        localeFormatter = d3Format,\n        svg,\n        chartWidth,\n        chartHeight,\n        dispatcher = dispatch(\n            'customClick',\n            'customMouseMove',\n            'customMouseOver',\n            'customMouseOut'\n        ),\n        getName = ({ name }) => name,\n        getPointData = ({ data }) => data;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {ScatterPlotData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        if (locale) {\n            localeFormatter = setDefaultLocale(locale);\n        }\n\n        _selection.each(function (_data) {\n            dataPoints = cleanData(_data);\n\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n\n            buildScales();\n            buildSVG(this);\n            buildAxis(localeFormatter);\n            buildVoronoi();\n            drawAxis();\n            drawGridLines();\n            initHighlightComponents();\n            drawDataPoints();\n            drawMaskingClip();\n            initZoom();\n\n            if (hasTrendline) {\n                drawTrendline(calcLinearRegression(dataPoints));\n            }\n\n            addMouseEvents();\n        });\n    }\n\n    /**\n     * Add mouse event handlers over svg\n     * @return {void}\n     * @private\n     */\n    function addMouseEvents() {\n        svg.on('mousemove', function (d) {\n            handleMouseMove(this, d);\n        })\n            .on('mouseover', function (d) {\n                handleMouseOver(this, d);\n            })\n            .on('mouseout', function (d) {\n                handleMouseOut(this, d);\n            })\n            .on('click', function () {\n                handleClick(this);\n            });\n    }\n\n    /**\n     * Creates the x-axis and y-axis with proper orientations\n     * @return {void}\n     * @private\n     */\n    function buildAxis(localeFormatter) {\n        xAxis = axisBottom(xScale)\n            .ticks(xTicks)\n            .tickPadding(tickPadding)\n            .tickFormat(getXAxisFormat());\n\n        yAxis = axisLeft(yScale)\n            .ticks(yTicks)\n            .tickPadding(tickPadding)\n            .tickFormat(localeFormatter.format(yAxisFormat));\n    }\n\n    /**\n     * Builds containers for the chart, including the chart axis,\n     * chart, and metadata groups.\n     * @return {void}\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('axis x', true);\n        container\n            .append('g')\n            .classed('y-axis-group', true)\n            .append('g')\n            .classed('axis y', true);\n        container.append('g').classed('axis-labels-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Draws the voronoi component in the chart.\n     * @return {void}\n     * @private\n     */\n    function buildVoronoi() {\n        voronoiMesh = voronoi()\n            .x((d) => xScale(d.x))\n            .y((d) => yScale(d.y))\n            .extent([\n                [0, 0],\n                [chartWidth, chartHeight],\n            ])(dataPoints);\n    }\n\n    /**\n     * Creates the x and y scales of the chart\n     * @return {void}\n     * @private\n     */\n    function buildScales() {\n        const [minX, minY] = [\n            min(dataPoints, ({ x }) => x),\n            min(dataPoints, ({ y }) => y),\n        ];\n        const [maxX, maxY] = [\n            max(dataPoints, ({ x }) => x),\n            max(dataPoints, ({ y }) => y),\n        ];\n        const yScaleBottomValue = Math.abs(minY) < 0 ? Math.abs(minY) : 0;\n\n        xOriginalScale = xScale = scaleLinear()\n            .domain([minX, maxX])\n            .rangeRound([0, chartWidth])\n            .nice();\n\n        yOriginalScale = yScale = scaleLinear()\n            .domain([yScaleBottomValue, maxY])\n            .rangeRound([chartHeight, 0])\n            .nice();\n\n        colorScale = scaleOrdinal()\n            .domain(dataPoints.map(getName))\n            .range(colorSchema);\n\n        areaScale = scaleSqrt()\n            .domain([yScaleBottomValue, maxY])\n            .range([0, maxCircleArea]);\n\n        const colorRange = colorScale.range();\n\n        /**\n         * Maps data point category name to\n         * each color of the given color scheme\n         * {\n         *     name1: 'color1',\n         *     name2: 'color2',\n         *     name3: 'color3',\n         *     ...\n         * }\n         */\n        nameToColorMap =\n            nameToColorMap ||\n            colorScale.domain().reduce((accum, item, i) => {\n                accum[item] = colorRange[i];\n\n                return accum;\n            }, {});\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param {HTMLElement} container A DOM element that will work as\n     * the container of the chart\n     * @return {void}\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart scatter-plot', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values and names to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {ScatterPlotData} originalData  Raw data as passed to the container\n     * @return  {ScatterPlotData}              Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce((acc, d) => {\n            d.name = String(d[nameKey]);\n            d.x = d[xKey];\n            d.y = d[yKey];\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups along with their axis labels\n     * @return {void}\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group .axis.x')\n            .attr('transform', `translate(0, ${chartHeight})`)\n            .call(xAxis);\n\n        svg.select('.y-axis-group .axis.y').call(yAxis);\n\n        drawAxisLabels();\n    }\n\n    /**\n     * Draws axis labels next to x and y axis to\n     * represent data value labels on the chart\n     * @return {void}\n     * @private\n     */\n    function drawAxisLabels() {\n        // If y-axis label is given, draw it\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label-text').remove();\n            }\n\n            yAxisLabelEl = svg\n                .select('.axis-labels-group')\n                .append('g')\n                .attr('class', 'y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset - xAxisPadding.left)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n\n        // If x-axis label is given, draw it\n        if (xAxisLabel) {\n            if (xAxisLabelEl) {\n                svg.selectAll('.x-axis-label-text').remove();\n            }\n\n            xAxisLabelEl = svg\n                .selectAll('.axis-labels-group')\n                .append('g')\n                .attr('class', 'x-axis-label')\n                .append('text')\n                .classed('x-axis-label-text', true)\n                .attr('x', chartWidth / 2)\n                .attr('y', chartHeight - xAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .text(xAxisLabel);\n        }\n    }\n\n    /**\n     * Draws a masking clip for data points/circles\n     * to refer to. This will allow dots to have lower priority\n     * in the DOM.\n     * @return {void}\n     * @private\n     */\n    function drawMaskingClip() {\n        maskingRectangle = svg\n            .selectAll('.chart-group')\n            .append('clipPath')\n            .attr('id', maskingRectangleId)\n            .append('rect')\n            .attr('width', chartWidth)\n            .attr('height', chartHeight)\n            .attr('x', 0)\n            .attr('y', -1 * maxCircleArea);\n    }\n\n    /**\n     * Add Zoom control and event handling\n     * @return {void}\n     * @private\n     */\n    function initZoom() {\n        if (!enableZoom) {\n            return;\n        }\n\n        const zoom = d3Zoom();\n        zoom.scaleExtent([minZoom, maxZoom]) // This control how much you can unzoom (x0.5) and zoom (x20)\n            .extent([\n                [0, 0],\n                [width, height],\n            ])\n            .on('zoom', updateChartAfterZoom);\n\n        // This add an invisible rect on top of the chart area. This rect can recover pointer events: necessary to understand when the user zoom\n        svg.append('rect')\n            .attr('class', 'zoom')\n            .attr('width', chartWidth)\n            .attr('height', chartHeight)\n            .style('fill', 'none')\n            .style('pointer-events', 'all')\n            .attr('transform', `translate(${margin.left}, ${margin.top})`)\n            .call(zoom);\n    }\n\n    /**\n     * Update chart elements after zoom events\n     * @return {void}\n     * @private\n     */\n    function updateChartAfterZoom(data, index, elements) {\n        //update scale\n        const transform = zoomTransform(elements[0]);\n        xScale = transform.rescaleX(xOriginalScale);\n        yScale = transform.rescaleY(yOriginalScale);\n        //update axes\n        xAxis.scale(xScale);\n        yAxis.scale(yScale);\n        svg.select('.x-axis-group .axis.x').call(xAxis);\n        svg.select('.y-axis-group .axis.y').call(yAxis);\n\n        // update circle position\n        svg.select('.chart-group')\n            .selectAll('circle')\n            .attr('cx', (d) => xScale(d.x))\n            .attr('cy', (d) => yScale(d.y));\n\n        // update highlight location\n        highlightCircle\n            .attr('cx', () => xScale(highlightPointData.x))\n            .attr('cy', () => yScale(highlightPointData.y));\n    }\n\n    /**\n     * Draws a trend line given the data that contains\n     * and y params from calculated y-intercept and slope\n     * using linear regression formula.\n     * @param {Object} linearData\n     * @returns {void}\n     * @private\n     */\n    function drawTrendline(linearData) {\n        if (trendLinePath) {\n            trendLinePath.remove();\n        }\n\n        const params = [\n            {\n                x: linearData.x1,\n                y: linearData.y1,\n            },\n            {\n                x: linearData.x2,\n                y: linearData.y2,\n            },\n        ];\n\n        let trendLine = line()\n            .curve(trendLineCurve)\n            .x(({ x }) => xScale(x))\n            .y(({ y }) => yScale(y));\n\n        trendLinePath = svg\n            .selectAll('.chart-group')\n            .append('path')\n            .attr('class', 'scatter-trendline')\n            .attr('d', trendLine(params))\n            .attr('stroke', colorSchema[0])\n            .attr('stroke-width', trendLineStrokWidth)\n            .attr('fill', 'none');\n\n        const totalLength = trendLinePath.node().pathLength;\n\n        trendLinePath\n            .attr('stroke-dasharray', `${totalLength} ${totalLength}`)\n            .attr('stroke-dashoffset', totalLength)\n            .transition()\n            .delay(trendLineDelay)\n            .duration(trendLineDuration)\n            .ease(ease)\n            .attr('stroke-dashoffset', 0);\n    }\n\n    /**\n     * Draws vertical gridlines of the chart\n     * These gridlines are parallel to y-axis\n     * @return {void}\n     * @private\n     */\n    function drawVerticalGridLines() {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draws the points for each data element on the chart group\n     * @return {void}\n     * @private\n     */\n    function drawDataPoints() {\n        let circles = svg\n            .select('.chart-group')\n            .attr('clip-path', `url(#${maskingRectangleId})`)\n            .selectAll('circle')\n            .data(dataPoints)\n            .enter();\n\n        if (isAnimated) {\n            circles\n                .append('circle')\n                .attr('class', 'data-point')\n                .transition()\n                .delay(delay)\n                .duration(duration)\n                .ease(ease)\n                .attr('stroke-opacity', circleStrokeOpacity)\n                .attr('stroke-width', circleStrokeWidth)\n                .style('stroke', (d) => nameToColorMap[d.name])\n                .attr('fill', (d) =>\n                    hasHollowCircles ? hollowColor : nameToColorMap[d.name]\n                )\n                .attr('fill-opacity', circleOpacity)\n                .attr('r', (d) => areaScale(d.y))\n                .attr('cx', (d) => xScale(d.x))\n                .attr('cy', (d) => yScale(d.y))\n                .style('cursor', 'pointer');\n        } else {\n            circles\n                .append('circle')\n                .attr('class', 'data-point')\n                .attr('stroke-opacity', circleStrokeOpacity)\n                .attr('stroke-width', circleStrokeWidth)\n                .style('stroke', (d) => nameToColorMap[d.name])\n                .attr('fill', (d) =>\n                    hasHollowCircles ? hollowColor : nameToColorMap[d.name]\n                )\n                .attr('fill-opacity', circleOpacity)\n                .attr('r', (d) => areaScale(d.y))\n                .attr('cx', (d) => xScale(d.x))\n                .attr('cy', (d) => yScale(d.y))\n                .style('cursor', 'pointer');\n        }\n\n        // Exit\n        circles.exit().remove();\n    }\n\n    /**\n     * Draws the crosshair lines and label components\n     * given the coordinates and name of the data point\n     * @param {Object} dataPoint\n     * @return {void}\n     * @private\n     */\n    function drawDataPointsValueHighlights(data) {\n        showCrossHairComponentsWithLabels(true);\n\n        // Draw line perpendicular to y-axis\n        highlightCrossHairContainer\n            .selectAll('line.highlight-y-line')\n            .attr('stroke', nameToColorMap[data.name])\n            .attr('class', 'highlight-y-line')\n            .attr('x1', xScale(data.x) - areaScale(data.y))\n            .attr('x2', 0)\n            .attr('y1', yScale(data.y))\n            .attr('y2', yScale(data.y));\n\n        // Draw line perpendicular to x-axis\n        highlightCrossHairContainer\n            .selectAll('line.highlight-x-line')\n            .attr('stroke', nameToColorMap[data.name])\n            .attr('class', 'highlight-x-line')\n            .attr('x1', xScale(data.x))\n            .attr('x2', xScale(data.x))\n            .attr('y1', yScale(data.y) + areaScale(data.y))\n            .attr('y2', chartHeight);\n\n        // Draw data label for y value\n        highlightCrossHairLabelsContainer\n            .selectAll('text.highlight-y-legend')\n            .attr('text-anchor', 'middle')\n            .attr('fill', nameToColorMap[data.name])\n            .attr('class', 'highlight-y-legend')\n            .attr('y', yScale(data.y) + areaScale(data.y) / 2)\n            .attr('x', highlightTextLegendOffset)\n            .text(`${localeFormatter.format(yAxisFormat)(data.y)}`);\n\n        // Draw data label for x value\n        highlightCrossHairLabelsContainer\n            .selectAll('text.highlight-x-legend')\n            .attr('text-anchor', 'middle')\n            .attr('fill', nameToColorMap[data.name])\n            .attr('class', 'highlight-x-legend')\n            .attr(\n                'transform',\n                `translate(0, ${chartHeight - highlightTextLegendOffset})`\n            )\n            .attr('x', xScale(data.x) - areaScale(data.y) / 2)\n            .text(`${getXAxisFormat()(data.x)}`);\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * @return {void}\n     * @private\n     */\n    function drawGridLines() {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        if (grid === 'horizontal' || grid === 'full') {\n            drawHorizontalGridLines();\n        }\n\n        if (grid === 'vertical' || grid === 'full') {\n            drawVerticalGridLines();\n        }\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Draw horizontal gridles of the chart\n     * These gridlines are parallel to x-axis\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalGridLines() {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Finds the closest point to the current mouse position\n     * @param {SVGHtmlElement} svg\n     * @private\n     */\n    function getClosestPoint(svg) {\n        let mousePos = mouse(svg);\n\n        mousePos[0] -= margin.left;\n        mousePos[1] -= margin.top;\n\n        return voronoiMesh.find(mousePos[0], mousePos[1]);\n    }\n\n    /**\n     * Gets the formatter function for x-Axis based on `xAxisFormatType` setter\n     * Applies `timeFormat` formatter function if custom `xAxisFormatType`\n     * that is not equal to 'number' is provided\n     * @return {function(String): String}\n     * @private\n     */\n    function getXAxisFormat() {\n        if (xAxisFormatType === 'number') {\n            return d3Format.format(xAxisFormat);\n        } else {\n            return timeFormat(xAxisFormat);\n        }\n    }\n\n    /**\n     * Handler called on mousemove event\n     * @return {void}\n     * @private\n     */\n    function handleMouseMove(e) {\n        const closestPoint = getClosestPoint(e);\n        const pointData = getPointData(closestPoint);\n\n        if (hasCrossHairs) {\n            drawDataPointsValueHighlights(pointData);\n        }\n\n        highlightDataPoint(pointData);\n\n        dispatcher.call('customMouseMove', e, pointData, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Handler called on mouseover event\n     * @return {void}\n     * @private\n     */\n    function handleMouseOver(e, d) {\n        dispatcher.call('customMouseOver', e, d, mouse(e));\n    }\n\n    /**\n     * Handler called on mouseout event\n     * @return {void}\n     * @private\n     */\n    function handleMouseOut(e, d) {\n        removePointHighlight();\n\n        if (hasCrossHairs) {\n            showCrossHairComponentsWithLabels(false);\n        }\n        dispatcher.call('customMouseOut', e, d, mouse(e));\n    }\n\n    /**\n     * Custom onClick event handler\n     * @return {void}\n     * @private\n     */\n    function handleClick(e) {\n        const closestPoint = getClosestPoint(e);\n        const d = getPointData(closestPoint);\n\n        handleClickAnimation(d);\n\n        dispatcher.call('customClick', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Applies animation on data point click\n     * @param {Object} dataPoint\n     * @return {void}\n     * @private\n     */\n    function handleClickAnimation(dataPoint) {\n        bounceCircleHighlight(\n            highlightCircle,\n            ease,\n            areaScale(dataPoint.y),\n            areaScale(dataPoint.y * 2)\n        );\n    }\n\n    /**\n     * Applies glow to hovered data point\n     * @return {void}\n     * @private\n     */\n    function highlightDataPoint(data) {\n        highlightPointData = data;\n\n        removePointHighlight();\n\n        if (!highlightFilter) {\n            highlightFilter = createFilterContainer(\n                svg.select('.metadata-group')\n            );\n            highlightFilterId = createGlowWithMatrix(highlightFilter);\n        }\n\n        highlightCircle\n            .attr('opacity', 1)\n            .attr('stroke', () => nameToColorMap[data.name])\n            .attr('fill', () => nameToColorMap[data.name])\n            .attr('fill-opacity', circleOpacity)\n            .attr('cx', () => xScale(data.x))\n            .attr('cy', () => yScale(data.y))\n            .attr('r', () => areaScale(data.y))\n            .style('stroke-width', highlightStrokeWidth)\n            .style('stroke-opacity', highlightCircleOpacity);\n\n        // apply glow container overlay\n        highlightCircle.attr('filter', `url(#${highlightFilterId})`);\n    }\n\n    /**\n     * Places the highlighter point to the DOM\n     * to be used once one of the data points is\n     * highlighted\n     * @return {void}\n     * @private\n     */\n    function initHighlightComponents() {\n        highlightCircle = svg\n            .select('.metadata-group')\n            .selectAll('circle.highlight-circle')\n            .data([1])\n            .enter()\n            .append('circle')\n            .attr('class', 'highlight-circle')\n            .attr('cursor', 'pointer');\n\n        if (hasCrossHairs) {\n            // initialize cross hair lines container\n            highlightCrossHairContainer = svg\n                .select('.chart-group')\n                .append('g')\n                .attr('class', 'crosshair-lines-container');\n\n            // initialize corss hair labels container\n            highlightCrossHairLabelsContainer = svg\n                .select('.metadata-group')\n                .append('g')\n                .attr('class', 'crosshair-labels-container');\n\n            highlightCrossHairContainer\n                .selectAll('line.highlight-y-line')\n                .data([1])\n                .enter()\n                .append('line')\n                .attr('class', 'highlight-y-line');\n\n            highlightCrossHairContainer\n                .selectAll('line.highlight-x-line')\n                .data([1])\n                .enter()\n                .append('line')\n                .attr('class', 'highlight-x-line');\n\n            highlightCrossHairLabelsContainer\n                .selectAll('text.highlight-y-legend')\n                .data([1])\n                .enter()\n                .append('text')\n                .attr('class', 'highlight-y-legend');\n\n            highlightCrossHairLabelsContainer\n                .selectAll('text.highlight-x-legend')\n                .data([1])\n                .enter()\n                .append('text')\n                .attr('class', 'highlight-x-legend');\n\n            highlightCrossHairLabelsContainer\n                .selectAll('text.highlight-x-legend')\n                .data([1])\n                .enter()\n                .append('text')\n                .attr('class', 'highlight-x-legend');\n        }\n\n        highlightCircle.exit().remove();\n    }\n\n    /**\n     * Removes higlight data point from chart\n     * @return {void}\n     * @private\n     */\n    function removePointHighlight() {\n        svg.selectAll('circle.highlight-circle').attr('opacity', 0);\n    }\n\n    /**\n     * Sets the visibility of cross hair lines\n     * if 1, it sets lines to visible,\n     * if 0, it hides lines\n     * @param {boolean}\n     * @return {void}\n     * @private\n     */\n    function showCrossHairComponentsWithLabels(status = false) {\n        const opacityIndex = status ? 1 : 0;\n\n        highlightCrossHairContainer.attr('opacity', opacityIndex);\n        highlightCrossHairLabelsContainer.attr('opacity', opacityIndex);\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the circle animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return duration;\n        }\n        duration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets each circle's border opacity value of the chart.\n     * It makes each circle border transparent if it's less than 1.\n     * @param  {Number} _x=1            Desired border opacity of circles of the chart\n     * @return {Number | module}           Current circleStrokeOpacity or Chart module to chain calls\n     * @public\n     * @example\n     * scatterPlot.circleStrokeOpacity(0.6)\n     */\n    exports.circleStrokeOpacity = function (_x) {\n        if (!arguments.length) {\n            return circleStrokeOpacity;\n        }\n        circleStrokeOpacity = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets each circle's border width value of the chart.\n     * It makes each circle border transparent if it's less than 1.\n     * @param  {Number} _x=1            Desired border width of circles of the chart\n     * @return {Number | module}           Current circleStrokeWidth or Chart module to chain calls\n     * @public\n     * @example\n     * scatterPlot.circleStrokeWidth(10)\n     */\n    exports.circleStrokeWidth = function (_x) {\n        if (!arguments.length) {\n            return circleStrokeWidth;\n        }\n        circleStrokeWidth = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the circles opacity value of the chart.\n     * Use this to set opacity of a circle for each data point of the chart.\n     * It makes the area of each data point more transparent if it's less than 1.\n     * @param  {Number} _x=0.24            Desired opacity of circles of the chart\n     * @return {Number | module}    Current circleOpacity or Chart module to chain calls\n     * @public\n     * @example\n     * scatterPlot.circleOpacity(0.6)\n     */\n    exports.circleOpacity = function (_x) {\n        if (!arguments.length) {\n            return circleOpacity;\n        }\n        circleOpacity = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example scatterPlot.colorMap({name: 'colorHex', name2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x         Desired colorSchema for the chart\n     * @return {String[] | module}   Current colorSchema or Chart module to chain calls\n     * @public\n     * @example\n     * scatterPlot.colorSchema(['#fff', '#bbb', '#ccc'])\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the grid mode.\n     * @param  {String} _x          Desired mode for the grid ('vertical'|'horizontal'|'full')\n     * @return {String | module}    Current mode of the grid or Chart module to chain calls\n     * @public\n     */\n    exports.grid = function (_x) {\n        if (!arguments.length) {\n            return grid;\n        }\n        grid = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasCrossHairs status. If true,\n     * the hovered data point will be highlighted with lines\n     * and legend from both x and y axis. The user will see\n     * values for x under x axis line and y under y axis. Lines\n     * will be drawn with respect to highlighted data point\n     * @param  {boolean} _x=false   Desired hasCrossHairs status for chart\n     * @return {boolean | module}   Current hasCrossHairs or Chart module to chain calls\n     * @public\n     */\n    exports.hasCrossHairs = function (_x) {\n        if (!arguments.length) {\n            return hasCrossHairs;\n        }\n        hasCrossHairs = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasHollowCircles value of the chart area\n     * @param  {boolean} _x=false    Choose whether chart's data points/circles should be hollow\n     * @return {boolean | module}    Current hasHollowCircles value or Chart module to chain calls\n     * @public\n     */\n    exports.hasHollowCircles = function (_x) {\n        if (!arguments.length) {\n            return hasHollowCircles;\n        }\n        hasHollowCircles = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasTrendline value of the chart area\n     * If true, the trendline calculated based off linear regression\n     * formula will be drawn\n     * @param  {boolean} _x=false       Choose whether chart's trendline should be drawn\n     * @return {boolean | module}       Current hasTrendline value or Chart module to chain calls\n     * @public\n     */\n    exports.hasTrendline = function (_x) {\n        if (!arguments.length) {\n            return hasTrendline;\n        }\n        hasTrendline = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets weather the chart support zoom controls\n     * If true, zoom event handling will be added to the chart.\n     * @param  {boolean} _x=false       Choose whether chart should support zoom controls\n     * @return {boolean | module}       Current enableZoom value or Chart module to chain calls\n     * @public\n     */\n    exports.enableZoom = function (_x) {\n        if (!arguments.length) {\n            return enableZoom;\n        }\n        enableZoom = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x          Desired height for the chart\n     * @return {Number | module}    Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Sets a custom distance between legend\n     * values with respect to both axises. The legends\n     * show up when hasCrossHairs is true.\n     * @param  {Number} _x          Desired highlightTextLegendOffset for the chart\n     * @return {Number | module}    Current highlightTextLegendOffset or Chart module to chain calls\n     * @public\n     * @example\n     * scatterPlot.highlightTextLegendOffset(-55)\n     */\n    exports.highlightTextLegendOffset = function (_x) {\n        if (!arguments.length) {\n            return highlightTextLegendOffset;\n        }\n        highlightTextLegendOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets isAnimated value. If set to true,\n     * the chart will be initialized or updated with animation.\n     * @param  {boolean} _x=false    Desired isAnimated properties for each side\n     * @return {boolean | module}    Current isAnimated or Chart module to chain calls\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin object of the chart\n     * @param  {Object} _x          Desired margin object properties for each side\n     * @return {Object | module}    Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the maximum value of the chart area\n     * @param  {Number} _x=10       Desired margin object properties for each side\n     * @return {Number | module}    Current maxCircleArea or Chart module to chain calls\n     * @public\n     */\n    exports.maxCircleArea = function (_x) {\n        if (!arguments.length) {\n            return maxCircleArea;\n        }\n        maxCircleArea = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customClick, customMouseOut, customMouseOver, and customMouseMove\n     * @return {module} Scatter Plot\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the locale which our formatting functions use.\n     * Check [the d3-format docs]{@link https://github.com/d3/d3-format#formatLocale} for the required values.\n     * @example\n     * scatterPlot\n     *  .locale({thousands: '.', grouping: [3], currency: [\"$\", \"\"], decimal: \".\"})\n     * @param  {LocaleObject}  [_x=null]  _x        Desired locale object format.\n     * @return {LocaleObject | module}              Current locale object or Chart module to chain calls\n     * @public\n     */\n    exports.valueLocale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x           Desired height for the chart\n     * @return {Number | module}     Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the xAxisLabel of the chart. Adds a\n     * label bellow x-axis for better clarify of data representation.\n     * @param  {String} _x              Desired string for x-axis label of the chart\n     * @return {String | module}        Current xAxisLabel or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabel;\n        }\n        xAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the xAxisLabel of the chart.\n     * The method accepts both positive and negative values.\n     * @param  {Number} _x=-40          Desired offset for the label\n     * @return {Number | module}        Current xAxisLabelOffset or Chart module to chain calls\n     * @public\n     * @example scatterPlot.xAxisLabelOffset(-55)\n     */\n    exports.xAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabelOffset;\n        }\n        xAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes ability to set the format of x-axis values\n     * @param  {String} _x        Desired xAxisFormat for the chart\n     * @return {String | module}  Current xAxisFormat or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisFormat;\n        }\n        xAxisFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes ability to set the formatter of x-axis values\n     * @param  {string} _x          type of x-axis formatter\n     * @value 'number'\n     * @value 'time'\n     * @return {string | module}    current xAxisFormatType or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisFormatType = function (_x) {\n        if (!arguments.length) {\n            return xAxisFormatType;\n        }\n        xAxisFormatType = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the xTicks of the chart\n     * @param  {Number} _x         Desired xTicks for the chart\n     * @return {Number | module}   Current xTicks or Chart module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes ability to set the format of y-axis values\n     * @param  {String} _x          Desired yAxisForma for the chart\n     * @return {String | module}    Current yAxisFormat or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisFormat = function (_x) {\n        if (!arguments.length) {\n            return yAxisFormat;\n        }\n        yAxisFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the y-axis label of the chart\n     * @param  {String} _x          Desired label string\n     * @return {String | module}    Current yAxisLabel or Chart module to chain calls\n     * @public\n     * @example scatterPlot.yAxisLabel('Ice Cream Consmuption Growth')\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel of the chart.\n     * The method accepts both positive and negative values.\n     * @param  {Number} _x=-40      Desired offset for the label\n     * @return {Number | module}    Current yAxisLabelOffset or Chart module to chain calls\n     * @public\n     * @example scatterPlot.yAxisLabelOffset(-55)\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the xTicks of the chart\n     * @param  {Number} _x          Desired height for the chart\n     * @return {Number | module}    Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { max, range, permute, sum } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { color } from 'd3-color';\nimport { nest } from 'd3-collection';\nimport { dispatch } from 'd3-dispatch';\nimport * as d3Format from 'd3-format';\nimport { easeQuadInOut } from 'd3-ease';\nimport { interpolateNumber, interpolateRound } from 'd3-interpolate';\nimport { scaleLinear, scaleBand, scaleOrdinal } from 'd3-scale';\nimport { select, mouse } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport colorHelper from '../helpers/color';\nimport { barLoadingMarkup } from '../helpers/load';\nimport { setDefaultLocale } from '../helpers/locale';\nimport { motion } from '../helpers/constants';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\nconst NUMBER_FORMAT = ',f';\nconst uniq = (arrArg) =>\n    arrArg.filter((elem, pos, arr) => arr.indexOf(elem) == pos);\n\n/**\n * Grouped Bar Chart reusable API module that allows us\n * rendering a multi grouped bar and configurable chart.\n *\n * @module Grouped-bar\n * @tutorial grouped-bar\n * @requires d3-array, d3-axis, d3-color, d3-collection, d3-dispatch, d3-ease,\n *  d3-interpolate, d3-scale, d3-selection, d3-transition\n *\n * @example\n * let groupedBar = GroupedBar();\n *\n * groupedBar\n *     .width(containerWidth);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset.data)\n *     .call(groupedBar);\n *\n */\n\n/**\n * @typdef D3Layout\n * @type function\n */\n\n/**\n * @typedef GroupedBarChartData\n * @type {Object[]}\n * @property {String} name         Name of the entry\n * @property {String} group        group of the entry\n * @property {Number} value        Value of the entry\n *\n * @example\n * [\n *     {\n *         name: \"2011-01\",\n *         group: \"Direct\",\n *         value: 0\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 40,\n            right: 30,\n            bottom: 60,\n            left: 70,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        xScale,\n        xScale2,\n        xAxis,\n        yScale,\n        yScale2,\n        yAxis,\n        yTickTextOffset = {\n            y: -8,\n            x: -20,\n        },\n        yTicks = 5,\n        xTicks = 5,\n        baseLine,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        nameToColorMap = null,\n        colorScale,\n        layers,\n        locale = null,\n        localeFormatter = d3Format,\n        ease = easeQuadInOut,\n        isHorizontal = false,\n        svg,\n        chartWidth,\n        chartHeight,\n        data,\n        groups,\n        layerElements,\n        transformedData,\n        tooltipThreshold = 480,\n        xAxisPadding = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        yAxisLabel,\n        yAxisLabelEl,\n        yAxisLabelOffset = -60,\n        barOpacity = 0.24,\n        animationDelayStep = 20,\n        animationDelays,\n        animationDuration = motion.duration,\n        grid = null,\n        nameLabel = 'name',\n        valueLabel = 'value',\n        groupLabel = 'group',\n        numberFormat = NUMBER_FORMAT,\n        betweenBarsPadding = 0.1,\n        betweenGroupsPadding = 0.1,\n        // getters\n        getName = ({ name }) => name,\n        getValue = ({ value }) => value,\n        getGroup = ({ group }) => group,\n        isAnimated = false,\n        // events\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customClick'\n        );\n\n    /**\n     * This function creates the graph using the selection and data provided\n     * @param {D3Selection} _selection A d3 selection that represents\n     * the container(s) where the chart(s) will be rendered\n     * @param {GroupedBarChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        if (locale) {\n            localeFormatter = setDefaultLocale(locale);\n        }\n\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            prepareData(data);\n            buildScales();\n            buildLayers();\n            cleanLoadingState();\n            drawGridLines();\n            buildAxis(localeFormatter);\n            drawAxis();\n            drawGroupedBar();\n            addMouseEvents();\n        });\n    }\n\n    /**\n     * Adds events to the container group if the environment is not mobile\n     * Adding: mouseover, mouseout and mousemove\n     */\n    function addMouseEvents() {\n        if (shouldShowTooltip()) {\n            svg.select('.chart-group')\n                .on('mouseover', function (d) {\n                    handleMouseOver(this, d);\n                })\n                .on('mouseout', function (d) {\n                    handleMouseOut(this, d);\n                })\n                .on('mousemove', function (d) {\n                    handleMouseMove(this, d);\n                })\n                .on('click', function (d) {\n                    handleCustomClick(this, d);\n                });\n        }\n\n        svg.selectAll('.bar')\n            .on('mouseover', function (d) {\n                handleBarsMouseOver(this, d);\n            })\n            .on('mouseout', function (d) {\n                handleBarsMouseOut(this, d);\n            });\n    }\n\n    /**\n     * Adjusts the position of the y axis' ticks\n     * @param  {D3Selection} selection Y axis group\n     * @return void\n     */\n    function adjustYTickLabels(selection) {\n        selection\n            .selectAll('.tick text')\n            .attr(\n                'transform',\n                `translate(${yTickTextOffset['x']}, ${yTickTextOffset['y']})`\n            );\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis(locale) {\n        if (isHorizontal) {\n            xAxis = axisBottom(xScale).ticks(\n                xTicks,\n                locale.format(numberFormat)\n            );\n            yAxis = axisLeft(yScale);\n        } else {\n            xAxis = axisBottom(xScale);\n            yAxis = axisLeft(yScale).ticks(yTicks, locale.format(numberFormat));\n        }\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * NOTE: The order of drawing of this group elements is really important,\n     * as everything else will be drawn on top of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('x axis', true);\n        container.append('g').classed('y-axis-group axis', true);\n        container.append('g').classed('y-axis-label', true);\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Builds the grouped layers layout\n     * @return {D3Layout} Layout for drawing the chart\n     * @private\n     */\n    function buildLayers() {\n        layers = transformedData.map((item) => {\n            let ret = {};\n\n            groups.forEach((key) => {\n                ret[key] = item[key];\n            });\n\n            return Object.assign({}, item, ret);\n        });\n    }\n\n    /**\n     * Creates the x, y and color scales of the chart\n     * @private\n     */\n    function buildScales() {\n        let yMax = getYMax();\n\n        if (isHorizontal) {\n            xScale = scaleLinear()\n                .domain([0, yMax])\n                .rangeRound([0, chartWidth - 1]);\n            // 1 pix for edge tick\n\n            yScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([chartHeight, 0])\n                .padding(betweenGroupsPadding);\n\n            yScale2 = scaleBand()\n                .domain(data.map(getGroup))\n                .rangeRound([yScale.bandwidth(), 0])\n                .padding(betweenBarsPadding);\n        } else {\n            xScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([0, chartWidth])\n                .padding(betweenGroupsPadding);\n            xScale2 = scaleBand()\n                .domain(data.map(getGroup))\n                .rangeRound([0, xScale.bandwidth()])\n                .padding(betweenGroupsPadding);\n\n            yScale = scaleLinear()\n                .domain([0, yMax])\n                .rangeRound([chartHeight, 0])\n                .nice();\n        }\n\n        colorScale = scaleOrdinal()\n            .range(colorSchema)\n            .domain(data.map(getGroup));\n\n        nameToColorMap =\n            nameToColorMap ||\n            colorScale\n                .domain(data.map(getName))\n                .domain()\n                .reduce((memo, item) => {\n                    data.forEach(({ name, group }) => {\n                        if (name == item) {\n                            memo[group] = colorScale(group);\n                        }\n                    });\n\n                    return memo;\n                }, {});\n    }\n\n    /**\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart grouped-bar', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values, groups, topic names and names to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {GroupedBarChartData} originalData   Raw data from the container\n     * @return {GroupedBarChartData}                Parsed data with values and dates\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce((acc, d) => {\n            d.value = +d[valueLabel];\n            d.group = d[groupLabel];\n\n            // for tooltip\n            d.topicName = d[groupLabel];\n            d.name = d[nameLabel];\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups\n     * @private\n     */\n    function drawAxis() {\n        if (isHorizontal) {\n            svg.select('.x-axis-group .axis.x')\n                .attr('transform', `translate( 0, ${chartHeight} )`)\n                .call(xAxis);\n\n            svg.select('.y-axis-group.axis')\n                .attr('transform', `translate( ${-xAxisPadding.left}, 0)`)\n                .call(yAxis);\n        } else {\n            svg.select('.x-axis-group .axis.x')\n                .attr('transform', `translate( 0, ${chartHeight} )`)\n                .call(xAxis);\n\n            svg.select('.y-axis-group.axis')\n                .attr('transform', `translate( ${-xAxisPadding.left}, 0)`)\n                .call(yAxis)\n                .call(adjustYTickLabels);\n        }\n\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label-text').remove();\n            }\n\n            yAxisLabelEl = svg\n                .select('.y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     */\n    function drawHorizontalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(barLoadingMarkup);\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * @return void\n     */\n    function drawGridLines() {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        if (grid === 'horizontal' || grid === 'full') {\n            drawHorizontalGridLines();\n        }\n\n        if (grid === 'vertical' || grid === 'full') {\n            drawVerticalGridLines();\n        }\n\n        if (isHorizontal) {\n            drawVerticalGridLines();\n        } else {\n            drawHorizontalGridLines();\n        }\n    }\n\n    /**\n     * Draws the bars along the x axis\n     * @param  {D3Selection} layersSelection Selection of layers\n     * @return {void}\n     */\n    function drawHorizontalBars(layersSelection) {\n        let layerJoin = layersSelection.data(layers);\n\n        layerElements = layerJoin\n            .enter()\n            .append('g')\n            .attr('transform', ({ key }) => `translate(0,${yScale(key)})`)\n            .classed('layer', true);\n\n        let barJoin = layerElements\n            .selectAll('.bar')\n            .data(({ values }) => values);\n\n        // Enter + Update\n        let bars = barJoin\n            .enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', 1)\n            .attr('y', (d) => yScale2(getGroup(d)))\n            .attr('height', yScale2.bandwidth())\n            .attr('fill', ({ group }) => nameToColorMap[group]);\n\n        if (isAnimated) {\n            bars.style('opacity', barOpacity)\n                .transition()\n                .delay((_, i) => animationDelays[i])\n                .duration(animationDuration)\n                .ease(ease)\n                .tween('attr.width', horizontalBarsTween);\n        } else {\n            bars.attr('width', (d) => xScale(getValue(d)));\n        }\n    }\n\n    /**\n     * Draws the grid lines for a vertical bar chart\n     * @return {void}\n     */\n    function drawHorizontalGridLines() {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws the bars along the y axis\n     * @param  {D3Selection} layersSelection Selection of layers\n     * @return {void}\n     */\n    function drawVerticalBars(layersSelection) {\n        let layerJoin = layersSelection.data(layers);\n\n        layerElements = layerJoin\n            .enter()\n            .append('g')\n            .attr('transform', ({ key }) => `translate(${xScale(key)},0)`)\n            .classed('layer', true);\n\n        let barJoin = layerElements\n            .selectAll('.bar')\n            .data(({ values }) => values);\n\n        let bars = barJoin\n            .enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', (d) => xScale2(getGroup(d)))\n            .attr('y', ({ value }) => yScale(value))\n            .attr('width', xScale2.bandwidth)\n            .attr('fill', ({ group }) => nameToColorMap[group]);\n\n        if (isAnimated) {\n            bars.style('opacity', barOpacity)\n                .transition()\n                .delay((_, i) => animationDelays[i])\n                .duration(animationDuration)\n                .ease(ease)\n                .tween('attr.height', verticalBarsTween);\n        } else {\n            bars.attr('height', (d) => chartHeight - yScale(getValue(d)));\n        }\n    }\n\n    /**\n     * Draws the grid lines for an horizontal bar chart\n     * @return {void}\n     */\n    function drawVerticalGridLines() {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws the different areas into the chart-group element\n     * @private\n     */\n    function drawGroupedBar() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (layerElements) {\n            svg.selectAll('.layer').remove();\n        }\n        const series = svg.select('.chart-group').selectAll('.layer');\n\n        animationDelays = range(\n            animationDelayStep,\n            (groups.length + 1) * animationDelayStep,\n            animationDelayStep\n        );\n        if (isHorizontal) {\n            drawHorizontalBars(series);\n        } else {\n            drawVerticalBars(series);\n        }\n\n        // Exit\n        series.exit().transition().style('opacity', 0).remove();\n    }\n\n    /**\n     * Extract X position on the chart from a given mouse event\n     * @param  {obj} event D3 mouse event\n     * @return {Number}       Position on the x axis of the mouse\n     * @private\n     */\n    function getMousePosition(event) {\n        return mouse(event);\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels\n     * @param  {Number} mouseX X position of the mouse\n     * @return {obj}        Data entry that is closer to that x axis position\n     */\n    function getNearestDataPoint(mouseX) {\n        let adjustedMouseX = mouseX - margin.left,\n            epsilon = xScale2.bandwidth(),\n            nearest = [];\n\n        layers.forEach(function (data) {\n            let found = data.values.find(\n                (d2) =>\n                    Math.abs(\n                        adjustedMouseX >=\n                            xScale(d2[nameLabel]) + xScale2(d2[groupLabel])\n                    ) &&\n                    Math.abs(\n                        adjustedMouseX -\n                            xScale2(d2[groupLabel]) -\n                            xScale(d2[nameLabel]) <=\n                            epsilon\n                    )\n            );\n\n            if (found) {\n                found.values = data.values;\n                found.key = found.name;\n                nearest.push(found);\n            }\n        });\n\n        return nearest.length ? nearest[0] : undefined;\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels\n     * @param  {Number} mouseX X position of the mouse\n     * @return {obj}        Data entry that is closer to that x axis position\n     */\n    function getNearestDataPoint2(mouseY) {\n        let adjustedMouseY = mouseY - margin.bottom,\n            epsilon = yScale.bandwidth(),\n            nearest = [];\n\n        layers.map(function (data) {\n            let found = data.values.find(\n                (d2) =>\n                    Math.abs(adjustedMouseY >= yScale(d2[nameLabel])) &&\n                    Math.abs(\n                        adjustedMouseY - yScale(d2[nameLabel]) <= epsilon * 2\n                    )\n            );\n\n            if (found) {\n                found.values = data.values;\n                found.key = found.name;\n                nearest.push(found);\n            }\n        });\n\n        return nearest.length ? nearest[0] : undefined;\n    }\n\n    /**\n     * Handles a mouseover event on top of a bar\n     * @param  {obj} e the fired event\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function handleBarsMouseOver(e, d) {\n        select(e).attr('fill', () => color(nameToColorMap[d.group]).darker());\n    }\n\n    /**\n     * Handles a mouseout event out of a bar\n     * @param  {obj} e the fired event\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function handleBarsMouseOut(e, d) {\n        select(e).attr('fill', () => nameToColorMap[d.group]);\n    }\n\n    /**\n     * MouseMove handler, calculates the nearest dataPoint to the cursor\n     * and updates metadata related to it\n     * @param  {obj} e the fired event\n     * @private\n     */\n    function handleMouseMove(e) {\n        let [mouseX, mouseY] = getMousePosition(e),\n            dataPoint = isHorizontal\n                ? getNearestDataPoint2(mouseY)\n                : getNearestDataPoint(mouseX),\n            x,\n            y;\n\n        if (dataPoint) {\n            // Move verticalMarker to that datapoint\n            if (isHorizontal) {\n                x = mouseX - margin.left;\n                y = yScale(dataPoint.key) + yScale.bandwidth() / 2;\n            } else {\n                x = xScale(dataPoint.key) + xScale2(dataPoint[groupLabel]);\n                y = mouseY - margin.bottom;\n            }\n            moveTooltipOriginXY(x, y);\n\n            // Emit event with xPosition for tooltip or similar feature\n            dispatcher.call(\n                'customMouseMove',\n                e,\n                dataPoint,\n                nameToColorMap,\n                x,\n                y\n            );\n        }\n    }\n\n    /**\n     * Click handler, shows data that was clicked and passes to the user\n     * @private\n     */\n    function handleCustomClick(e) {\n        let [mouseX, mouseY] = getMousePosition(e);\n        let dataPoint = isHorizontal\n            ? getNearestDataPoint2(mouseY)\n            : getNearestDataPoint(mouseX);\n\n        dispatcher.call('customClick', e, dataPoint, mouse(e));\n    }\n\n    /**\n     * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n     * It also resets the container of the vertical marker\n     * @private\n     */\n    function handleMouseOut(e, d) {\n        svg.select('.metadata-group').attr('transform', 'translate(9999, 0)');\n        dispatcher.call('customMouseOut', e, d, mouse(e));\n    }\n\n    /**\n     * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n     * @private\n     */\n    function handleMouseOver(e, d) {\n        dispatcher.call('customMouseOver', e, d, mouse(e));\n    }\n\n    /**\n     * Animation tween of horizontal bars\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function horizontalBarsTween(d) {\n        const node = select(this);\n        const i = interpolateRound(0, xScale(getValue(d)));\n        const j = interpolateNumber(0, 1);\n\n        return function (t) {\n            node.attr('width', i(t)).style('opacity', j(t));\n        };\n    }\n\n    /**\n     * Gets the yMax, sets it to 1 if all data points are 0\n     * @return {number} Calculated yMax\n     * @private\n     */\n    function getYMax() {\n        const uniqueDataPoints = new Set(data.map(getValue));\n        const isAllZero =\n            uniqueDataPoints.size === 1 && uniqueDataPoints.has(0);\n\n        if (isAllZero) {\n            return 1;\n        } else {\n            return max(data.map(getValue));\n        }\n    }\n\n    /**\n     * Helper method to update the x position of the vertical marker\n     * @param  {obj} dataPoint Data entry to extract info\n     * @return void\n     */\n    function moveTooltipOriginXY(originXPosition, originYPosition) {\n        svg.select('.metadata-group').attr(\n            'transform',\n            `translate(${originXPosition},${originYPosition})`\n        );\n    }\n\n    /**\n     * Prepare data for create chart.\n     * @private\n     */\n    function prepareData(data) {\n        groups = uniq(data.map(getGroup));\n\n        transformedData = nest()\n            .key(getName)\n            .rollup(function (values) {\n                let ret = {};\n\n                values.forEach((entry) => {\n                    if (entry && entry[groupLabel]) {\n                        ret[entry[groupLabel]] = getValue(entry);\n                    }\n                });\n                //for tooltip\n                ret.values = values;\n\n                return ret;\n            })\n            .entries(data)\n            .map(function (data) {\n                return Object.assign(\n                    {},\n                    {\n                        total: sum(permute(data.value, groups)),\n                        key: data.key,\n                    },\n                    data.value\n                );\n            });\n    }\n\n    /**\n     * Determines if we should add the tooltip related logic depending on the\n     * size of the chart and the tooltipThreshold variable value\n     * @return {boolean} Should we build the tooltip?\n     * @private\n     */\n    function shouldShowTooltip() {\n        return width > tooltipThreshold;\n    }\n\n    /**\n     * Animation tween of vertical bars\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function verticalBarsTween(d) {\n        let node = select(this),\n            i = interpolateRound(0, chartHeight - yScale(getValue(d))),\n            y = interpolateRound(chartHeight, yScale(getValue(d))),\n            j = interpolateNumber(0, 1);\n\n        return function (t) {\n            node.attr('y', y(t)).attr('height', i(t)).style('opacity', j(t));\n        };\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the padding between bars.\n     * @param  {Number} [_x = 0.1] Padding value to get/set\n     * @return {Number | module} Current padding or Chart module to chain calls\n     * @public\n     */\n    exports.betweenBarsPadding = function (_x) {\n        if (!arguments.length) {\n            return betweenBarsPadding;\n        }\n        betweenBarsPadding = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the padding between groups of bars.\n     * @param  {Number} [_x = 0.1] Padding value to get/set\n     * @return {Number | module} Current group padding or Chart module to chain calls\n     * @public\n     */\n    exports.betweenGroupsPadding = function (_x) {\n        if (!arguments.length) {\n            return betweenGroupsPadding;\n        }\n        betweenGroupsPadding = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example groupedBar.colorMap({groupName: 'colorHex', groupName2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x            Desired colorSchema for the graph\n     * @return { colorSchema | module}  Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the groupLabel of the chart\n     * @param  {String} _x              Desired groupLabel for the graph\n     * @return { groupLabel | module}   Current groupLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.groupLabel = function (_x) {\n        if (!arguments.length) {\n            return groupLabel;\n        }\n        groupLabel = _x;\n        dataKeyDeprecationMessage('group');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the grid mode.\n     * @param  {String} [_x=null]   Desired mode for the grid ('vertical'|'horizontal'|'full')\n     * @return { String | module}   Current mode of the grid or Area Chart module to chain calls\n     * @public\n     */\n    exports.grid = function (_x) {\n        if (!arguments.length) {\n            return grid;\n        }\n        grid = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} [_x=500] Desired width for the graph\n     * @return { height | module} Current height or Area Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the horizontal direction of the chart\n     * @param  {number} [_x=false]          Desired horizontal direction for the graph\n     * @return { isHorizontal | module}     If it is horizontal or Bar Chart module to chain calls\n     * @public\n     */\n    exports.isHorizontal = function (_x) {\n        if (!arguments.length) {\n            return isHorizontal;\n        }\n        isHorizontal = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * By default this is 'false'\n     *\n     * @param  {Boolean} [_x=false]     Desired animation flag\n     * @return { isAnimated | module}   Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return { margin | module}   Current margin or Area Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the nameLabel of the chart\n     * @param  {Number} _x              Desired dateLabel for the graph\n     * @return { nameLabel | module}    Current nameLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the numberFormat of the chart\n     * @param  {string[]} _x = ',f'     Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string[] | module}      Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut, and customClick\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the minimum width of the graph in order to show the tooltip\n     * NOTE: This could also depend on the aspect ratio\n     *\n     * @param  {Number} [_x=480]    Minimum width of chart to show the tooltip\n     * @return {Number | module}    Current tooltipThreshold or Area Chart module to chain calls\n     * @public\n     */\n    exports.tooltipThreshold = function (_x) {\n        if (!arguments.length) {\n            return tooltipThreshold;\n        }\n        tooltipThreshold = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {Number} _x          Desired valueLabel for the graph\n     * @return {Number | module}    Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the locale which our formatting functions use.\n     * Check [the d3-format docs]{@link https://github.com/d3/d3-format#formatLocale} for the required values.\n     * @example\n     *  groupedBarChart\n     *  .locale({thousands: '.', grouping: [3], currency: [\"$\", \"\"], decimal: \".\"})\n     *\n     * @param  {LocaleObject}  [_x=null]  _x     Desired locale object format.\n     * @return {LocaleObject | module}           Current locale object or Chart module to chain calls\n     * @public\n     */\n    exports.valueLocale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} [_x=960]    Desired width for the graph\n     * @return {Number | module}    Current width or Area Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the x axis on the chart\n     * @param  {Number} [_x=5]      Desired xTicks\n     * @return {Number | module}    Current xTicks or Chart module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the y-axis label of the chart\n     * @param  {String} _x          Desired label string\n     * @return {String | module}    Current yAxisLabel or Chart module to chain calls\n     * @public\n     * @example groupedBar.yAxisLabel('Ticket Sales')\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel of the chart.\n     * The method accepts both positive and negative values.\n     * @param  {Number} [_x=-60]    Desired offset for the label\n     * @return {Number | module}    Current yAxisLabelOffset or Chart module to chain calls\n     * @public\n     * @example groupedBar.yAxisLabelOffset(-55)\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the y axis on the chart\n     * @param  {Number} [_x=5]      Desired vertical ticks\n     * @return {Number | module}    Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the x and y offset of ticks of the y axis on the chart\n     * @param  {Object} [_x={ y: -8, x: -20 }]      Desired offset\n     * @return {Object | module}                    Current offset or Chart module to chain calls\n     * @public\n     */\n    exports.yTickTextOffset = function (_x) {\n        if (!arguments.length) {\n            return yTickTextOffset;\n        }\n        yTickTextOffset = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { max, sum, range, permute } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { color } from 'd3-color';\nimport { nest } from 'd3-collection';\nimport { dispatch } from 'd3-dispatch';\nimport * as d3Format from 'd3-format';\nimport { easeQuadInOut } from 'd3-ease';\nimport { interpolateNumber, interpolateRound } from 'd3-interpolate';\nimport { scaleOrdinal, scaleBand, scaleLinear } from 'd3-scale';\nimport { stack } from 'd3-shape';\nimport { select, mouse } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport colorHelper from '../helpers/color';\nimport { barLoadingMarkup } from '../helpers/load';\nimport { setDefaultLocale } from '../helpers/locale';\nimport { motion } from '../helpers/constants';\nimport { gridHorizontal, gridVertical } from '../helpers/grid';\n\nconst PERCENTAGE_FORMAT = '%';\nconst NUMBER_FORMAT = ',f';\nconst uniq = (arrArg) =>\n    arrArg.filter((elem, pos, arr) => arr.indexOf(elem) == pos);\n\n/**\n * Stacked Area Chart reusable API module that allows us\n * rendering a multi area and configurable chart.\n *\n * @module Stacked-bar\n * @tutorial stacked-bar\n * @requires d3-array, d3-axis, d3-color, d3-collection, d3-dispatch, d3-ease,\n *  d3-interpolate, d3-scale, d3-shape, d3-selection, d3-transition\n *\n * @example\n * let stackedBar = stackedBar();\n *\n * stackedBar\n *     .width(containerWidth);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset.data)\n *     .call(stackedBar);\n *\n */\n\n/**\n * @typdef D3Layout\n * @type function\n */\n\n/**\n * @typedef StackedBarData\n * @type {Object[]}\n * @property {String} name         Name of the entry\n * @property {String} stack        Stack of the entry\n * @property {Number} value        Value of the entry\n *\n * @example\n * [\n *     {\n *         name: \"2011-01\",\n *         stack: \"Direct\",\n *         value: 0\n *     }\n * ]\n */\nexport default function module() {\n    let margin = {\n            top: 40,\n            right: 30,\n            bottom: 60,\n            left: 70,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        xScale,\n        xAxis,\n        yScale,\n        yAxis,\n        betweenBarsPadding = 0.1,\n        yTickTextYOffset = -8,\n        yTickTextXOffset = -20,\n        locale = null,\n        localeFormatter = d3Format,\n        yTicks = 5,\n        xTicks = 5,\n        percentageAxisToMaxRatio = 1,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        nameToColorMap = null,\n        colorScale,\n        layers,\n        ease = easeQuadInOut,\n        isHorizontal = false,\n        svg,\n        chartWidth,\n        chartHeight,\n        data,\n        transformedData,\n        stacks,\n        layerElements,\n        hasReversedStacks = false,\n        tooltipThreshold = 480,\n        yAxisLabel,\n        yAxisLabelEl,\n        yAxisLabelOffset = -60,\n        baseLine,\n        xAxisPadding = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        barOpacity = 0.24,\n        animationDelayStep = 20,\n        animationDuration = motion.duration,\n        animationDelays,\n        grid = null,\n        nameLabel = 'name',\n        valueLabel = 'value',\n        stackLabel = 'stack',\n        numberFormat = NUMBER_FORMAT,\n        // getters\n        getName = (data) => data[nameLabel],\n        getValue = (data) => data[valueLabel],\n        getStack = (data) => data[stackLabel],\n        getValOrDefaultToZero = (val) => (isNaN(val) || val < 0 ? 0 : val),\n        isAnimated = false,\n        // events\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customClick'\n        );\n\n    /**\n     * This function creates the graph using the selection and data provided\n     * @param {D3Selection} _selection A d3 selection that represents\n     * the container(s) where the chart(s) will be rendered\n     * @param {StackedBarData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        if (locale) {\n            localeFormatter = setDefaultLocale(locale);\n        }\n\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            prepareData(data);\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n            buildScales();\n            buildLayers();\n            drawGridLines();\n            buildAxis(localeFormatter);\n            drawAxis();\n            drawStackedBar();\n            addMouseEvents();\n        });\n    }\n\n    /**\n     * Adds events to the container group if the environment is not mobile\n     * Adding: mouseover, mouseout and mousemove\n     */\n    function addMouseEvents() {\n        if (shouldShowTooltip()) {\n            svg.select('.chart-group')\n                .on('mouseover', function (d) {\n                    handleMouseOver(this, d);\n                })\n                .on('mouseout', function (d) {\n                    handleMouseOut(this, d);\n                })\n                .on('mousemove', function (d) {\n                    handleMouseMove(this, d);\n                })\n                .on('click', function (d) {\n                    handleClick(this, d);\n                });\n        }\n\n        svg.selectAll('.bar')\n            .on('mouseover', handleBarsMouseOver)\n            .on('mouseout', handleBarsMouseOut);\n    }\n\n    /**\n     * Adjusts the position of the y axis' ticks\n     * @param  {D3Selection} selection Y axis group\n     * @return void\n     */\n    function adjustYTickLabels(selection) {\n        selection\n            .selectAll('.tick text')\n            .attr(\n                'transform',\n                `translate(${yTickTextXOffset}, ${yTickTextYOffset})`\n            );\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis(locale) {\n        if (isHorizontal) {\n            xAxis = axisBottom(xScale).ticks(\n                xTicks,\n                locale.format(numberFormat)\n            );\n            yAxis = axisLeft(yScale);\n        } else {\n            xAxis = axisBottom(xScale);\n            yAxis = axisLeft(yScale).ticks(yTicks, locale.format(numberFormat));\n        }\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * NOTE: The order of drawing of this group elements is really important,\n     * as everything else will be drawn on top of them\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('x axis', true);\n        container.append('g').classed('y-axis-group axis', true);\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('y-axis-label', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Builds the stacked layers layout\n     * @return {D3Layout} Layout for drawing the chart\n     * @private\n     */\n    function buildLayers() {\n        let stack3 = stack().keys(stacks),\n            dataInitial = transformedData.map((item) => {\n                let ret = {};\n\n                stacks.forEach((key) => {\n                    ret[key] = item[key];\n                });\n\n                return Object.assign({}, item, ret);\n            });\n\n        layers = stack3(dataInitial);\n    }\n\n    /**\n     * Creates the x, y and color scales of the chart\n     * @private\n     */\n    function buildScales() {\n        let yMax = getYMax();\n\n        if (isHorizontal) {\n            xScale = scaleLinear()\n                .domain([0, yMax])\n                .rangeRound([0, chartWidth - 1]);\n            // 1 pix for edge tick\n\n            yScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([chartHeight, 0])\n                .padding(betweenBarsPadding);\n        } else {\n            xScale = scaleBand()\n                .domain(data.map(getName))\n                .rangeRound([0, chartWidth])\n                .padding(betweenBarsPadding);\n\n            yScale = scaleLinear()\n                .domain([0, yMax])\n                .rangeRound([chartHeight, 0])\n                .nice();\n        }\n\n        colorScale = scaleOrdinal()\n            .range(colorSchema)\n            .domain(data.map(getStack));\n\n        nameToColorMap =\n            nameToColorMap ||\n            colorScale\n                .domain(data.map(getStack))\n                .domain()\n                .reduce((memo, item) => {\n                    memo[item] = colorScale(item);\n\n                    return memo;\n                }, {});\n    }\n\n    /**\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart stacked-bar', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values, stacks, names and topic names to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {StackedBarData} originalData   Raw data from the container\n     * @return {StackedBarData}                Parsed data with values and dates\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce((acc, d) => {\n            d.value = +d[valueLabel];\n            d.stack = d[stackLabel];\n\n            // for tooltip\n            d.topicName = d[stackLabel];\n            d.name = d[nameLabel];\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups\n     * @private\n     */\n    function drawAxis() {\n        if (isHorizontal) {\n            svg.select('.x-axis-group .axis.x')\n                .attr('transform', `translate( 0, ${chartHeight} )`)\n                .call(xAxis);\n\n            svg.select('.y-axis-group.axis')\n                .attr('transform', `translate( ${-xAxisPadding.left}, 0)`)\n                .call(yAxis);\n        } else {\n            svg.select('.x-axis-group .axis.x')\n                .attr('transform', `translate( 0, ${chartHeight} )`)\n                .call(xAxis);\n\n            svg.select('.y-axis-group.axis')\n                .attr('transform', `translate( ${-xAxisPadding.left}, 0)`)\n                .call(yAxis)\n                .call(adjustYTickLabels);\n        }\n\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label-text').remove();\n            }\n\n            yAxisLabelEl = svg\n                .select('.y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(barLoadingMarkup);\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * @return void\n     */\n    function drawGridLines() {\n        svg.select('.grid-lines-group').selectAll('grid').remove();\n\n        if (grid === 'horizontal' || grid === 'full') {\n            drawHorizontalGridLines();\n        }\n\n        if (grid === 'vertical' || grid === 'full') {\n            drawVerticalGridLines();\n        }\n\n        if (isHorizontal) {\n            drawVerticalGridLines();\n        } else {\n            drawHorizontalGridLines();\n        }\n    }\n\n    /**\n     * Draws the bars along the x axis\n     * @param  {D3Selection} layersSelection Selection of bars\n     * @return {void}\n     */\n    function drawHorizontalBars(layersSelection) {\n        let layerJoin = layersSelection.data(layers);\n\n        layerElements = layerJoin\n            .enter()\n            .append('g')\n            .attr('fill', ({ key }) => nameToColorMap[key])\n            .classed('layer', true);\n\n        let barJoin = layerElements\n            .selectAll('.bar')\n            .data((d) => filterOutUnkownValues(d));\n\n        // Enter + Update\n        let bars = barJoin\n            .enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', (d) => xScale(d[0]))\n            .attr('y', (d) => yScale(d.data.key))\n            .attr('height', yScale.bandwidth());\n\n        if (isAnimated) {\n            bars.style('opacity', barOpacity)\n                .transition()\n                .delay((_, i) => animationDelays[i])\n                .duration(animationDuration)\n                .ease(ease)\n                .tween('attr.width', horizontalBarsTween);\n        } else {\n            bars.attr('width', (d) => xScale(d[1] - d[0]));\n        }\n    }\n\n    /**\n     * Draws the grid lines for a vertical bar chart\n     * @return {void}\n     */\n    function drawHorizontalGridLines() {\n        const grid = gridHorizontal(yScale)\n            .range([0, chartWidth])\n            .hideEdges('first')\n            .ticks(yTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     */\n    function drawHorizontalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Draws the bars along the y axis\n     * @param  {D3Selection} layersSelection Selection of bars\n     * @return {void}\n     */\n    function drawVerticalBars(layersSelection) {\n        let layerJoin = layersSelection.data(layers);\n\n        layerElements = layerJoin\n            .enter()\n            .append('g')\n            .attr('fill', ({ key }) => nameToColorMap[key])\n            .classed('layer', true);\n\n        let barJoin = layerElements\n            .selectAll('.bar')\n            .data((d) => filterOutUnkownValues(d));\n\n        // Enter + Update\n        let bars = barJoin\n            .enter()\n            .append('rect')\n            .classed('bar', true)\n            .attr('x', (d) => xScale(d.data.key))\n            .attr('y', (d) => yScale(d[1]))\n            .attr('width', xScale.bandwidth);\n\n        if (isAnimated) {\n            bars.style('opacity', barOpacity)\n                .transition()\n                .delay((_, i) => animationDelays[i])\n                .duration(animationDuration)\n                .ease(ease)\n                .tween('attr.height', verticalBarsTween);\n        } else {\n            bars.attr('height', (d) => yScale(d[0]) - yScale(d[1]));\n        }\n    }\n\n    /**\n     * Draws the grid lines for an horizontal bar chart\n     * @return {void}\n     */\n    function drawVerticalGridLines() {\n        const grid = gridVertical(xScale)\n            .range([0, chartHeight])\n            .hideEdges('first')\n            .ticks(xTicks);\n\n        grid(svg.select('.grid-lines-group'));\n\n        drawVerticalExtendedLine();\n    }\n\n    /**\n     * Draws a vertical line to extend y-axis till the edges\n     * @return {void}\n     */\n    function drawVerticalExtendedLine() {\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-y-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-y-line')\n            .attr('y1', xAxisPadding.bottom)\n            .attr('y2', chartHeight)\n            .attr('x1', 0)\n            .attr('x2', 0);\n    }\n\n    /**\n     * Draws the different areas into the chart-group element\n     * @private\n     */\n    function drawStackedBar() {\n        // Not ideal, we need to figure out how to call exit for nested elements\n        if (layerElements) {\n            svg.selectAll('.layer').remove();\n        }\n\n        let series = svg.select('.chart-group').selectAll('.layer');\n\n        animationDelays = range(\n            animationDelayStep,\n            (layers[0].length + 1) * animationDelayStep,\n            animationDelayStep\n        );\n\n        if (isHorizontal) {\n            drawHorizontalBars(series);\n        } else {\n            drawVerticalBars(series);\n        }\n        // Exit\n        series.exit().transition().style('opacity', 0).remove();\n    }\n\n    /**\n     * Filter out unkown stacks/values in the bar layers\n     * @param {Object[]} d\n     * @return {Object[]} filteredData\n     * @private\n     */\n    function filterOutUnkownValues(d) {\n        return d.map((layerEls) => {\n            for (let i = 0; i < layerEls.length; i++) {\n                layerEls[i] = getValOrDefaultToZero(layerEls[i]);\n            }\n\n            return layerEls;\n        });\n    }\n\n    /**\n     * Extract X position on the chart from a given mouse event\n     * @param  {obj} event D3 mouse event\n     * @return {Number}       Position on the x axis of the mouse\n     * @private\n     */\n    function getMousePosition(event) {\n        return mouse(event);\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels\n     * @param  {Number} mouseX  X position of the mouse\n     * @return {obj}            Data entry that is closer to that x axis position\n     */\n    function getNearestDataPoint(mouseX) {\n        const adjustedMouseX = mouseX - margin.left;\n\n        const nearest = transformedData.find(({ key }) => {\n            const barStart = xScale(key);\n            const barEnd = barStart + xScale.bandwidth();\n\n            // If mouseX is between barStart & barEnd\n            return adjustedMouseX >= barStart && adjustedMouseX < barEnd;\n        });\n\n        return nearest;\n    }\n\n    /**\n     * Finds out the data entry that is closer to the given position on pixels (horizontal)\n     * @param  {Number} mouseY  Y position of the mouse\n     * @return {obj}            Data entry that is closer to that y axis position\n     */\n    function getNearestDataPoint2(mouseY) {\n        const adjustedMouseY = mouseY - margin.top;\n\n        const nearest = transformedData.find(({ key }) => {\n            const barStart = yScale(key);\n            const barEnd = barStart + yScale.bandwidth();\n\n            // If mouseY is between barStart & barEnd\n            return adjustedMouseY >= barStart && adjustedMouseY < barEnd;\n        });\n\n        return nearest;\n    }\n\n    /**\n     * Gets the yMax, sets it to 1 if all data points are 0\n     * @return {number} Calculated yMax\n     * @private\n     */\n    function getYMax() {\n        const uniqueDataPoints = new Set(\n            transformedData.map(({ total }) => total)\n        );\n        const isAllZero =\n            uniqueDataPoints.size === 1 && uniqueDataPoints.has(0);\n\n        if (isAllZero) {\n            return 1;\n        } else {\n            return max(transformedData.map(({ total }) => total));\n        }\n    }\n\n    /**\n     * Handles a mouseover event on top of a bar\n     * @return {void}\n     */\n    function handleBarsMouseOver() {\n        select(this).attr('fill', () =>\n            color(select(this.parentNode).attr('fill')).darker()\n        );\n    }\n\n    /**\n     * Handles a mouseout event out of a bar\n     * @return {void}\n     */\n    function handleBarsMouseOut() {\n        select(this).attr('fill', () => select(this.parentNode).attr('fill'));\n    }\n\n    /**\n     * MouseMove handler, calculates the nearest dataPoint to the cursor\n     * and updates metadata related to it\n     * @private\n     */\n    function handleMouseMove(e) {\n        let [mouseX, mouseY] = getMousePosition(e),\n            dataPoint = isHorizontal\n                ? getNearestDataPoint2(mouseY)\n                : getNearestDataPoint(mouseX),\n            x,\n            y;\n\n        if (dataPoint) {\n            // Move verticalMarker to that datapoint\n            if (isHorizontal) {\n                x = mouseX - margin.left;\n                y = yScale(dataPoint.key) + yScale.bandwidth() / 2;\n            } else {\n                x = xScale(dataPoint.key) + margin.left;\n                y = mouseY - margin.bottom;\n            }\n            moveTooltipOriginXY(x, y);\n\n            // Emit event with xPosition for tooltip or similar feature\n            dispatcher.call(\n                'customMouseMove',\n                e,\n                dataPoint,\n                nameToColorMap,\n                x,\n                y\n            );\n        }\n    }\n\n    /**\n     * Click handler, passes the data point of the clicked bar\n     * (or it's nearest point)\n     * @private\n     */\n    function handleClick(e) {\n        let [mouseX, mouseY] = getMousePosition(e);\n        let dataPoint = isHorizontal\n            ? getNearestDataPoint2(mouseY)\n            : getNearestDataPoint(mouseX);\n\n        dispatcher.call('customClick', e, dataPoint, mouse(e));\n    }\n\n    /**\n     * MouseOut handler, hides overlay and removes active class on verticalMarkerLine\n     * It also resets the container of the vertical marker\n     * @private\n     */\n    function handleMouseOut(e, d) {\n        svg.select('.metadata-group').attr('transform', 'translate(9999, 0)');\n        dispatcher.call('customMouseOut', e, d, mouse(e));\n    }\n\n    /**\n     * Mouseover handler, shows overlay and adds active class to verticalMarkerLine\n     * @private\n     */\n    function handleMouseOver(e, d) {\n        dispatcher.call('customMouseOver', e, d, mouse(e));\n    }\n\n    /**\n     * Animation tween of horizontal bars\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function horizontalBarsTween(d) {\n        let node = select(this),\n            i = interpolateRound(0, xScale(d[1] - d[0])),\n            j = interpolateNumber(0, 1);\n\n        return function (t) {\n            node.attr('width', i(t)).style('opacity', j(t));\n        };\n    }\n\n    /**\n     * Helper method to update the x position of the vertical marker\n     * @param  {obj} dataPoint Data entry to extract info\n     * @return void\n     */\n    function moveTooltipOriginXY(originXPosition, originYPosition) {\n        svg.select('.metadata-group').attr(\n            'transform',\n            `translate(${originXPosition},${originYPosition})`\n        );\n    }\n\n    /**\n     * Prepare data for create chart.\n     * @private\n     */\n    function prepareData(data) {\n        stacks = uniq(data.map(({ stack }) => stack));\n\n        if (hasReversedStacks) {\n            stacks = stacks.reverse();\n        }\n\n        transformedData = nest()\n            .key(getName)\n            .rollup(function (values) {\n                let ret = {};\n\n                values.forEach((entry) => {\n                    if (entry && entry[stackLabel]) {\n                        ret[entry[stackLabel]] = getValue(entry);\n                    }\n                });\n                //for tooltip\n                ret.values = values;\n\n                return ret;\n            })\n            .entries(data)\n            .map(function (data) {\n                return Object.assign(\n                    {},\n                    {\n                        total: sum(permute(data.value, stacks)),\n                        key: data.key,\n                    },\n                    data.value\n                );\n            });\n    }\n\n    /**\n     * Determines if we should add the tooltip related logic depending on the\n     * size of the chart and the tooltipThreshold variable value\n     * @return {boolean} Should we build the tooltip?\n     * @private\n     */\n    function shouldShowTooltip() {\n        return width > tooltipThreshold;\n    }\n\n    /**\n     * Animation tween of vertical bars\n     * @param  {obj} d data of bar\n     * @return {void}\n     */\n    function verticalBarsTween(d) {\n        const vertDiff = yScale(d[0]) - yScale(d[1]);\n\n        let node = select(this),\n            i = interpolateRound(0, getValOrDefaultToZero(vertDiff)),\n            j = interpolateNumber(0, 1);\n\n        return function (t) {\n            node.attr('height', i(t)).style('opacity', j(t));\n        };\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the padding of the stacked bar chart\n     * @param  {Number} _x = 0.1    Padding value to get/set\n     * @return {Number | module}    Current padding or Chart module to chain calls\n     * @public\n     */\n    exports.betweenBarsPadding = function (_x) {\n        if (!arguments.length) {\n            return betweenBarsPadding;\n        }\n        betweenBarsPadding = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Chart module to chain calls\n     * @example stackedBar.colorMap({groupName: 'colorHex', groupName2: 'colorString'})\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x = colorSchemas.britecharts     Desired colorSchema for the graph\n     * @return {String[] | module}                          Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the grid mode\n     * @param  {String} _x          Desired mode for the grid ('vertical'|'horizontal'|'full')\n     * @return {String | module}    Current mode of the grid or Area Chart module to chain calls\n     * @public\n     */\n    exports.grid = function (_x) {\n        if (!arguments.length) {\n            return grid;\n        }\n        grid = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasPercentage status\n     * @param  {Boolean} _x         Should use percentage as value format\n     * @return {Boolean | module}   Is percentage used or Chart module to chain calls\n     * @public\n     */\n    exports.hasPercentage = function (_x) {\n        if (!arguments.length) {\n            return numberFormat === PERCENTAGE_FORMAT;\n        }\n        if (_x) {\n            numberFormat = PERCENTAGE_FORMAT;\n        } else {\n            numberFormat = NUMBER_FORMAT;\n        }\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x          Desired width for the graph\n     * @return {Number | module}    Current height or Area Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the hasReversedStacks property of the chart, reversing the order of stacks\n     * @param  {Boolean} _x = false     Desired hasReversedStacks flag\n     * @return {Boolean | module}       Current hasReversedStacks or Chart module to chain calls\n     * @public\n     */\n    exports.hasReversedStacks = function (_x) {\n        if (!arguments.length) {\n            return hasReversedStacks;\n        }\n        hasReversedStacks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * By default this is 'false'\n     *\n     * @param  {Boolean} _x = false     Desired animation flag\n     * @return {Boolean | module} Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the horizontal direction of the chart\n     * @param  {Boolean} _x = false     Desired horizontal direction for the graph\n     * @return {Boolean | module}       If it is horizontal or Bar Chart module to chain calls\n     * @public\n     */\n    exports.isHorizontal = function (_x) {\n        if (!arguments.length) {\n            return isHorizontal;\n        }\n        isHorizontal = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return {Object | module}    Current margin or Area Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the nameLabel of the chart\n     * @param  {Number} _x          Desired dateLabel for the graph\n     * @return {Number | module}    Current nameLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the numberFormat of the chart\n     * @param  {String} _x = ',f'     Desired numberFormat for the graph. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {String | module}      Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut, and customClick\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Configurable extension of the x axis\n     * If your max point was 50% you might want to show x axis to 60%, pass 1.2\n     * @param  {Number} _x          Ratio to max data point to add to the x axis\n     * @return {Number | module}    Current ratio or Bar Chart module to chain calls\n     * @public\n     */\n    exports.percentageAxisToMaxRatio = function (_x) {\n        if (!arguments.length) {\n            return percentageAxisToMaxRatio;\n        }\n        percentageAxisToMaxRatio = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the stackLabel of the chart\n     * @param  {String} _x          Desired stackLabel for the graph\n     * @return {String | module}    Current stackLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.stackLabel = function (_x) {\n        if (!arguments.length) {\n            return stackLabel;\n        }\n        stackLabel = _x;\n        dataKeyDeprecationMessage('stack');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the minimum width of the graph in order to show the tooltip\n     * NOTE: This could also depend on the aspect ratio\n     * @param  {Number} [_x=480]    Minimum width of the graph\n     * @return {Number | module}    Current tooltipThreshold or Area Chart module to chain calls\n     * @public\n     */\n    exports.tooltipThreshold = function (_x) {\n        if (!arguments.length) {\n            return tooltipThreshold;\n        }\n        tooltipThreshold = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the chart\n     * @param  {Number} _x          Desired valueLabel for the graph\n     * @return {Number | module}    Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the locale which our formatting functions use.\n     * Check [the d3-format docs]{@link https://github.com/d3/d3-format#formatLocale} for the required values.\n     * @example\n     *  stackedBarChart\n     *  .valueLocale({thousands: '.', grouping: [3], currency: [\"$\", \"\"], decimal: \".\"})\n     * @param  {LocaleObject}  [_x=null]  _x    Desired locale object format.\n     * @return {LocaleObject | module}          Current locale object or Chart module to chain calls\n     * @public\n     */\n    exports.valueLocale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x = 960    Desired width for the graph\n     * @return {Number | module}    Current width or Area Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the x axis on the chart\n     * @param  {Number} _x = 5      Desired horizontal ticks\n     * @return {Number | module}    Current xTicks or Chart module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the y-axis label of the chart\n     * @param  {String} _x          Desired label string\n     * @return {String | module}    Current yAxisLabel or Chart module to chain calls\n     * @public\n     * @example stackedBar.yAxisLabel('Ticket Sales')\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel of the chart.\n     * The method accepts both positive and negative values.\n     * @param  {Number} _x = -60        Desired offset for the label\n     * @return {Number | module}        Current yAxisLabelOffset or Chart module to chain calls\n     * @public\n     * @example stackedBar.yAxisLabelOffset(-55)\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of vertical ticks of the axis on the chart\n     * @param  {Number} _x = 5      Desired vertical ticks\n     * @return {Number | module}    Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { extent } from 'd3-array';\nimport { select, mouse } from 'd3-selection';\nimport { scaleLinear } from 'd3-scale';\nimport { interpolateHcl } from 'd3-interpolate';\nimport { dispatch } from 'd3-dispatch';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport colorHelper from '../helpers/color';\nimport { hoursHuman, motion } from '../helpers/constants';\n\n/**\n * Reusable Heatmap API module that renders a\n * simple and configurable heatmap chart.\n *\n * @module Heatmap\n * @tutorial heatmap\n * @requires d3-array, d3-selection, d3-scale, d3-interpolate, d3-transition\n *\n * @example\n * let heatmap = heatmap();\n *\n * heatmap\n *     .width(500);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(heatmap);\n */\n\n/**\n * @typedef HeatmapData\n * @type {Array[]}\n * @property {Number} week\n * @property {Number} day\n * @property {Number} value\n *\n * @example\n * [\n *     {\n *         day: 0,\n *         hour: 0,\n *         value: 7\n *     },\n *     {\n *         day: 0,\n *         hour: 1,\n *         value: 10\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 40,\n            right: 20,\n            bottom: 20,\n            left: 40,\n        },\n        width = 780,\n        height = 270,\n        svg,\n        data,\n        chartWidth,\n        chartHeight,\n        boxes,\n        boxSize = 30,\n        boxBorderSize = 2,\n        boxInitialOpacity = 0.2,\n        boxFinalOpacity = 1,\n        boxInitialColor = '#BBBBBB',\n        boxBorderColor = '#FFFFFF',\n        colorScale,\n        colorSchema = colorHelper.colorSchemas.red,\n        animationDuration = motion.duration,\n        isAnimated = false,\n        yAxisLabels,\n        dayLabels,\n        daysHuman = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n        dayLabelWidth = 30,\n        hourLabels,\n        hourLabelHeight = 20,\n        // Dispatcher object to broadcast the mouse events\n        // Ref: https://github.com/mbostock/d3/wiki/Internals#d3_dispatch\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove',\n            'customClick'\n        ),\n        getValue = ({ value }) => value;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {HeatmapData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            data = cleanData(_data);\n\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n\n            buildScales();\n            buildSVG(this);\n            drawDayLabels();\n            drawHourLabels();\n            drawBoxes();\n        });\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @return {void}\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart heatmap', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * Also applies the Margin convention\n     * @return {void}\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('day-labels-group', true);\n        container.append('g').classed('hour-labels-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Cleaning data casting the values to the proper\n     * type while keeping the rest of properties on the data. It\n     * also creates a set of zeroed data (for animation purposes)\n     * @param   {HeatmapData} originalData  Raw data as passed to the container\n     * @return  {HeatmapData}               Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce(\n            (acc, { day, hour, value }) => [\n                ...acc,\n                {\n                    day: +day,\n                    hour: +hour,\n                    value: +value,\n                },\n            ],\n            []\n        );\n    }\n\n    /**\n     * Creates the scales for the heatmap chart\n     * @return void\n     */\n    function buildScales() {\n        colorScale = scaleLinear()\n            .range([colorSchema[0], colorSchema[colorSchema.length - 1]])\n            .domain(extent(data, getValue))\n            .interpolate(interpolateHcl);\n    }\n\n    /**\n     * Draws the boxes of the heatmap\n     */\n    function drawBoxes() {\n        boxes = svg.select('.chart-group').selectAll('.box').data(data);\n\n        const boxElements = boxes\n            .enter()\n            .append('rect')\n            .classed('box', true)\n            .attr('width', boxSize)\n            .attr('height', boxSize)\n            .attr('x', ({ hour }) => hour * boxSize)\n            .attr('y', ({ day }) => day * boxSize)\n            .style('opacity', boxInitialOpacity)\n            .style('fill', boxInitialColor)\n            .style('stroke', boxBorderColor)\n            .style('stroke-width', boxBorderSize)\n            .on('mouseover', function (d, index, boxList) {\n                handleMouseOver(this, d, boxList, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d, index, boxList) {\n                handleMouseOut(this, d, boxList, chartWidth, chartHeight);\n            })\n            .on('click', function (d) {\n                handleClick(this, d, chartWidth, chartHeight);\n            });\n\n        if (isAnimated) {\n            boxElements\n                .transition()\n                .duration(animationDuration)\n                .style('fill', ({ value }) => colorScale(value))\n                .style('opacity', boxFinalOpacity);\n        } else {\n            boxElements\n                .style('fill', ({ value }) => colorScale(value))\n                .style('opacity', boxFinalOpacity);\n        }\n\n        boxElements.exit().remove();\n    }\n\n    /**\n     * Draws the day labels\n     */\n    function drawDayLabels() {\n        const dayLabelsGroup = svg.select('.day-labels-group');\n        const arrayForYAxisLabels = yAxisLabels || daysHuman;\n\n        dayLabels = svg\n            .select('.day-labels-group')\n            .selectAll('.day-label')\n            .data(arrayForYAxisLabels);\n\n        dayLabels\n            .enter()\n            .append('text')\n            .text((label) => label)\n            .attr('x', 0)\n            .attr('y', (d, i) => i * boxSize)\n            .style('text-anchor', 'start')\n            .style('dominant-baseline', 'central')\n            .attr('class', 'day-label y-axis-label');\n\n        dayLabelsGroup.attr(\n            'transform',\n            `translate(-${dayLabelWidth}, ${boxSize / 2})`\n        );\n    }\n\n    /**\n     * Draws the hour labels\n     */\n    function drawHourLabels() {\n        let hourLabelsGroup = svg.select('.hour-labels-group');\n\n        hourLabels = svg\n            .select('.hour-labels-group')\n            .selectAll('.hour-label')\n            .data(hoursHuman);\n\n        hourLabels\n            .enter()\n            .append('text')\n            .text((label) => label)\n            .attr('y', 0)\n            .attr('x', (d, i) => i * boxSize)\n            .style('text-anchor', 'middle')\n            .style('dominant-baseline', 'central')\n            .attr('class', 'hour-label');\n\n        hourLabelsGroup.attr(\n            'transform',\n            `translate(${boxSize / 2}, -${hourLabelHeight})`\n        );\n    }\n\n    function handleMouseOver(e, d, boxList, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOver', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    function handleMouseMove(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseMove', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    function handleMouseOut(e, d, boxList, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOut', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    function handleClick(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customClick', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the boxSize of the chart\n     * @param  {Number} _x=30       Desired boxSize for the heatmap boxes\n     * @return {Number | module}    Current boxSize or Chart module to chain calls\n     * @public\n     */\n    exports.boxSize = function (_x) {\n        if (!arguments.length) {\n            return boxSize;\n        }\n        boxSize = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {String[]} _x=britecharts-red  Desired colorSchema for the heatma boxes\n     * @return {String[] | module}            Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x=270          Desired height for the chart\n     * @return {Number | module}    Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated value of the chart\n     * @param  {Boolean} _x=false         Decide whether to show chart animation\n     * @return {Boolean | module}         Current isAnimated value or Chart module to chain calls\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return {margin | module}    Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove, customMouseOut, and customClick\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the y-axis labels of the chart\n     * @param  {String[]} _x=['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']     An array of string labels across the y-axis\n     * @return {yAxisLabels | module}                                       Current yAxisLabels array or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabels = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabels;\n        }\n        yAxisLabels = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x=780           Desired width for the chart\n     * @return {Number | module}         Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { max } from 'd3-array';\nimport { axisLeft, axisBottom } from 'd3-axis';\nimport { dispatch } from 'd3-dispatch';\nimport { easeQuadInOut } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { scaleLinear, scaleBand } from 'd3-scale';\nimport { select, mouse } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport { barLoadingMarkup } from '../helpers/load';\n\n/**\n * Step Chart reusable API class that renders a\n * simple and configurable step chart.\n * NOTE: We will be deprecating this chart soon\n *\n * @module Step\n * @tutorial step\n * @requires d3-array, d3-axis, d3-dispatch, d3-ease, d3-format, d3-scale, d3-selection, d3-transition\n * @deprecated\n * @example\n * const stepChart= step();\n *\n * stepChart\n *     .height(500)\n *     .width(800);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(stepChart);\n *\n */\n\n/**\n * @typedef StepChartData\n * @type Object[]\n *\n * @property {String} key      Key we measure (required)\n * @property {Number} value    value of the key (required)\n *\n * @example\n * [\n *     {\n *         value: 1,\n *         key: 'glittering'\n *     },\n *     {\n *         value: 1,\n *         key: 'luminous'\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 20,\n            right: 20,\n            bottom: 30,\n            left: 40,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        ease = easeQuadInOut,\n        data,\n        chartWidth,\n        chartHeight,\n        xScale,\n        yScale,\n        yTicks = 6,\n        xAxis,\n        xAxisLabel,\n        xAxisLabelEl,\n        yAxis,\n        yAxisLabel,\n        yAxisLabelEl,\n        xAxisLabelOffset = 80,\n        yAxisLabelOffset = -20,\n        xAxisPadding = {\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n        },\n        yTickPadding = 8,\n        svg,\n        valueLabel = 'value',\n        nameLabel = 'key',\n        maskGridLines,\n        baseLine,\n        // Dispatcher object to broadcast the mouse events\n        // Ref: https://github.com/mbostock/d3/wiki/Internals#d3_dispatch\n        dispatcher = dispatch(\n            'customMouseOver',\n            'customMouseOut',\n            'customMouseMove'\n        ),\n        // Formats\n        yAxisTickFormat = format('.3'),\n        // extractors\n        getKey = ({ key }) => key,\n        getValue = ({ value }) => value;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {StepChartData} _data The data to attach and generate the chart\n     * @deprecated\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            // Make space on the left of the graph for the y axis label\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            // eslint-disable-next-line no-console\n            console.warn(\n                'The Step Chart is being deprecated! Please use a line chart with lineCurve \"step\" for your visualization!'\n            );\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            cleanLoadingState();\n\n            buildScales();\n            buildAxis();\n            drawGridLines();\n            drawSteps();\n            drawAxis();\n        });\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis() {\n        xAxis = axisBottom(xScale);\n\n        yAxis = axisLeft(yScale)\n            .ticks(yTicks)\n            .tickPadding(yTickPadding)\n            .tickFormat(yAxisTickFormat);\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container.append('g').classed('grid-lines-group', true);\n        container.append('g').classed('chart-group', true);\n        container\n            .append('g')\n            .classed('x-axis-group axis', true)\n            .append('g')\n            .classed('x-axis-label', true);\n        container\n            .append('g')\n            .classed('y-axis-group axis', true)\n            .append('g')\n            .classed('y-axis-label', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Creates the x and y scales of the graph\n     * @private\n     */\n    function buildScales() {\n        xScale = scaleBand()\n            .domain(data.map(getKey))\n            .rangeRound([0, chartWidth])\n            .paddingInner(0);\n\n        yScale = scaleLinear()\n            .domain([0, max(data, getValue)])\n            .rangeRound([chartHeight, 0]);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart step-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values and keys to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {StepChartData} originalData Data as provided on the container\n     * @private\n     */\n    function cleanData(originalData) {\n        return originalData.reduce((acc, d) => {\n            d.value = +d[valueLabel];\n            d.key = String(d[nameLabel]);\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group.axis')\n            .attr('transform', `translate(0, ${chartHeight})`)\n            .call(xAxis);\n\n        svg.selectAll('.x-axis-group .tick text')\n            .style('text-anchor', 'start')\n            .attr('transform', 'rotate(45 -1 10)');\n\n        if (xAxisLabel) {\n            if (xAxisLabelEl) {\n                svg.selectAll('.x-axis-label-text').remove();\n            }\n            xAxisLabelEl = svg\n                .select('.x-axis-label')\n                .append('text')\n                .attr('y', xAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .classed('x-axis-label-text', true)\n                .attr('x', chartWidth / 2)\n                .text(xAxisLabel);\n        }\n\n        svg.select('.y-axis-group.axis').call(yAxis);\n\n        if (yAxisLabel) {\n            if (yAxisLabelEl) {\n                svg.selectAll('.y-axis-label-text').remove();\n            }\n            yAxisLabelEl = svg\n                .select('.y-axis-label')\n                .append('text')\n                .classed('y-axis-label-text', true)\n                .attr('x', -chartHeight / 2)\n                .attr('y', yAxisLabelOffset)\n                .attr('text-anchor', 'middle')\n                .attr('transform', 'rotate(270 0 0)')\n                .text(yAxisLabel);\n        }\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(barLoadingMarkup);\n    }\n\n    /**\n     * Draws the step elements within the chart group\n     * @private\n     */\n    function drawSteps() {\n        let steps = svg.select('.chart-group').selectAll('.step').data(data);\n\n        // Enter\n        steps\n            .enter()\n            .append('rect')\n            .classed('step', true)\n            .attr('x', chartWidth) // Initially drawing the steps at the end of Y axis\n            .attr('y', ({ value }) => yScale(value))\n            .attr('width', xScale.bandwidth())\n            .attr('height', (d) => chartHeight - yScale(d.value))\n            .on('mouseover', function (d) {\n                handleMouseOver(this, d, chartWidth, chartHeight);\n            })\n            .on('mousemove', function (d) {\n                handleMouseMove(this, d, chartWidth, chartHeight);\n            })\n            .on('mouseout', function (d) {\n                handleMouseOut(this, d, chartWidth, chartHeight);\n            })\n            .merge(steps)\n            .transition()\n            .ease(ease)\n            .attr('x', ({ key }) => xScale(key))\n            .attr('y', function (d) {\n                return yScale(d.value);\n            })\n            .attr('width', xScale.bandwidth())\n            .attr('height', function (d) {\n                return chartHeight - yScale(d.value);\n            });\n\n        // Exit\n        steps.exit().transition().style('opacity', 0).remove();\n    }\n\n    /**\n     * Draws grid lines on the background of the chart\n     * @return void\n     */\n    function drawGridLines() {\n        if (maskGridLines) {\n            svg.selectAll('.horizontal-grid-line').remove();\n        }\n        if (baseLine) {\n            svg.selectAll('.extended-x-line').remove();\n        }\n\n        maskGridLines = svg\n            .select('.grid-lines-group')\n            .selectAll('line.horizontal-grid-line')\n            .data(yScale.ticks(yTicks))\n            .enter()\n            .append('line')\n            .attr('class', 'horizontal-grid-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', (d) => yScale(d))\n            .attr('y2', (d) => yScale(d));\n\n        if (baseLine) {\n            svg.selectAll('.extended-x-line').remove();\n        }\n\n        //draw a horizontal line to extend x-axis till the edges\n        baseLine = svg\n            .select('.grid-lines-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', xAxisPadding.left)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    // API\n\n    /**\n     * Custom OnMouseOver event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseOver(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOver', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Custom OnMouseMove event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseMove(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseMove', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Custom OnMouseOver event handler\n     * @return {void}\n     * @private\n     */\n    function handleMouseOut(e, d, chartWidth, chartHeight) {\n        dispatcher.call('customMouseOut', e, d, mouse(e), [\n            chartWidth,\n            chartHeight,\n        ]);\n    }\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename) {\n        return exportChart.call(exports, svg, filename);\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {object} _x Margin object to get/set\n     * @return { margin | module} Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of vertical ticks on the chart\n     * (Default is 6)\n     * @param  {Number} _x          Desired number of vertical ticks for the graph\n     * @return {Number | module}    Current yTicks or Chart module to chain calls\n     * @public\n     */\n    exports.yTicks = function (_x) {\n        if (!arguments.length) {\n            return yTicks;\n        }\n        yTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {number} _x Desired width for the graph\n     * @return { height | module} Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Exposes an 'on' method that acts as a bridge with the event dispatcher\n     * We are going to expose this events:\n     * customMouseOver, customMouseMove and customMouseOut\n     *\n     * @return {module} Bar Chart\n     * @public\n     */\n    exports.on = function (...args) {\n        let value = dispatcher.on(...args);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {number} _x Desired width for the graph\n     * @return { width | module} Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text of the xAxisLabel on the chart\n     * @param  {String} _x Desired text for the label\n     * @return {String | module} label or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabel;\n        }\n        xAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the xAxisLabel on the chart\n     * @param  {Number} _x Desired offset for the label\n     * @return {Number | module} label or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return xAxisLabelOffset;\n        }\n        xAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the text of the yAxisLabel on the chart\n     * @param  {String} _x Desired text for the label\n     * @return {String | module} label or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabel = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabel;\n        }\n        yAxisLabel = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the offset of the yAxisLabel on the chart\n     * @param  {Number} _x Desired offset for the label\n     * @return {Number | module} label or Chart module to chain calls\n     * @public\n     */\n    exports.yAxisLabelOffset = function (_x) {\n        if (!arguments.length) {\n            return yAxisLabelOffset;\n        }\n        yAxisLabelOffset = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { extent, max } from 'd3-array';\nimport { axisBottom } from 'd3-axis';\nimport { brushX } from 'd3-brush';\nimport { scaleLinear, scaleTime } from 'd3-scale';\nimport { area } from 'd3-shape';\nimport { dispatch } from 'd3-dispatch';\nimport { select, event } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport 'd3-transition';\n\nimport colorHelper from '../helpers/color';\nimport timeAxisHelper from '../helpers/axis';\nimport {\n    axisTimeCombinations,\n    timeIntervals,\n    motion,\n    curveMap,\n} from '../helpers/constants';\nimport { uniqueId } from '../helpers/number';\nimport { brushLoadingMarkup } from '../helpers/load';\n\n/**\n * Brush Chart reusable API class that renders a\n * simple and configurable brush chart.\n *\n * @module Brush\n * @tutorial brush\n * @requires d3-array\n * @requires d3-axis\n * @requires d3-brush\n * @requires d3-ease\n * @requires d3-scale\n * @requires d3-shape\n * @requires d3-dispatch\n * @requires d3-selection\n * @requires d3-time\n * @requires d3-transition\n * @requires d3-time-format\n *\n * @example\n * let brushChart = brush();\n *\n * brushChart\n *     .height(500)\n *     .width(800);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(brushChart);\n */\n\n/**\n * @typedef BrushChartData\n * @type {Object[]}\n * @property {Number} value        Value to chart (required)\n * @property {Date} date           Date of the value in ISO8601 format (required)\n *\n * @example\n * [\n *     {\n *         value: 1,\n *         date: '2011-01-06T00:00:00Z'\n *     },\n *     {\n *         value: 2,\n *         date: '2011-01-07T00:00:00Z'\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 20,\n            right: 20,\n            bottom: 30,\n            left: 20,\n        },\n        width = 960,\n        height = 500,\n        isLoading = false,\n        data,\n        dataZeroed,\n        svg,\n        isAnimated = false,\n        animationDuration = motion.duration,\n        dateLabel = 'date',\n        valueLabel = 'value',\n        dateRange = [null, null],\n        isLocked = false,\n        chartWidth,\n        chartHeight,\n        xScale,\n        yScale,\n        xAxis,\n        xSubAxis,\n        xAxisFormat = null,\n        xTicks = null,\n        monthAxisPadding = 30,\n        xAxisCustomFormat = null,\n        locale,\n        brush,\n        chartBrush,\n        brushArea,\n        areaCurve = 'monotoneX',\n        handle,\n        tickPadding = 5,\n        chartGradientEl,\n        gradient = colorHelper.colorGradients.greenBlue,\n        gradientId = uniqueId('brush-area-gradient'),\n        roundingTimeInterval = 'timeDay',\n        // Dispatcher object to broadcast the mouse events\n        // @see {@link https://github.com/d3/d3/blob/master/API.md#dispatches-d3-dispatch}\n        dispatcher = dispatch('customBrushStart', 'customBrushEnd'),\n        // extractors\n        getValue = ({ value }) => value,\n        getDate = ({ date }) => date;\n\n    const acceptNullValue = (value) => (value === null ? null : +value);\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {BrushChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(cloneData(_data));\n\n            buildSVG(this);\n            if (isLoading) {\n                drawLoadingState();\n\n                return;\n            }\n            buildScales();\n            buildAxis();\n            cleanLoadingState();\n            buildGradient();\n            buildBrush();\n            drawArea();\n            drawAxis();\n            drawBrush();\n            drawHandles();\n        });\n    }\n\n    /**\n     * Creates the d3 x axis, setting orientation\n     * @private\n     */\n    function buildAxis() {\n        let minor, major;\n\n        if (xAxisFormat === 'custom' && typeof xAxisCustomFormat === 'string') {\n            minor = {\n                tick: xTicks,\n                format: timeFormat(xAxisCustomFormat),\n            };\n            major = null;\n        } else {\n            ({ minor, major } = timeAxisHelper.getTimeSeriesAxis(\n                data,\n                width,\n                xAxisFormat\n            ));\n\n            xSubAxis = axisBottom(xScale)\n                .ticks(major.tick)\n                .tickSize(0, 0)\n                .tickFormat(major.format);\n        }\n\n        xAxis = axisBottom(xScale)\n            .ticks(minor.tick)\n            .tickSize(10, 0)\n            .tickPadding([tickPadding])\n            .tickFormat(minor.format);\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Creates the brush element and attaches a listener\n     * @return {void}\n     */\n    function buildBrush() {\n        brush = brushX()\n            .extent([\n                [0, 0],\n                [chartWidth, chartHeight],\n            ])\n            .on('brush', handleBrushStart)\n            .on('end', handleBrushEnd);\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        const container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n        svg.append('g').classed('loading-state-group', true);\n\n        container.append('g').classed('chart-group', true);\n        container\n            .append('g')\n            .classed('x-axis-group', true)\n            .append('g')\n            .classed('x axis', true);\n        container\n            .selectAll('.x-axis-group')\n            .append('g')\n            .classed('axis sub-x', true);\n        container.append('g').classed('brush-group', true);\n        container.append('g').classed('metadata-group', true);\n    }\n\n    /**\n     * Creates the gradient on the area\n     * @return {void}\n     */\n    function buildGradient() {\n        if (!chartGradientEl) {\n            chartGradientEl = svg\n                .select('.metadata-group')\n                .append('linearGradient')\n                .attr('id', gradientId)\n                .attr('gradientUnits', 'userSpaceOnUse')\n                .attr('x1', 0)\n                .attr('x2', xScale(data[data.length - 1].date))\n                .attr('y1', 0)\n                .attr('y2', 0)\n                .selectAll('stop')\n                .data([\n                    { offset: '0%', color: gradient[0] },\n                    { offset: '100%', color: gradient[1] },\n                ])\n                .enter()\n                .append('stop')\n                .attr('offset', ({ offset }) => offset)\n                .attr('stop-color', ({ color }) => color);\n        }\n    }\n\n    /**\n     * Creates the x and y scales of the graph\n     * @private\n     */\n    function buildScales() {\n        xScale = scaleTime()\n            .domain(extent(data, getDate))\n            .range([0, chartWidth]);\n\n        yScale = scaleLinear()\n            .domain([0, max(data, getValue)])\n            .range([chartHeight, 0]);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart brush-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Cleaning data casting the values and dates to the proper type while keeping\n     * the rest of properties on the data\n     * @param  {BrushChartData} originalData        Raw data from the container\n     * @return {BrushChartData}                     Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        const cleanData = originalData.reduce((acc, d) => {\n            d.date = new Date(d[dateLabel]);\n            d.value = acceptNullValue(d[valueLabel]);\n\n            return [...acc, d];\n        }, []);\n\n        dataZeroed = cleanData.map((d) => {\n            return { ...d, value: d.value === null ? null : 0 };\n        });\n\n        return cleanData;\n    }\n\n    /**\n     * Cleans the loading state\n     * @private\n     */\n    function cleanLoadingState() {\n        svg.select('.loading-state-group svg').remove();\n    }\n\n    /**\n     * Clones the passed array of data\n     * @param  {Object[]} dataToClone Data to clone\n     * @return {Object[]}             Cloned data\n     */\n    function cloneData(dataToClone) {\n        return JSON.parse(JSON.stringify(dataToClone));\n    }\n\n    /**\n     * Draws the x axis on the svg object within its group\n     *\n     * @private\n     */\n    function drawAxis() {\n        svg.select('.x-axis-group .axis.x')\n            .attr('transform', `translate(0, ${chartHeight})`)\n            .call(xAxis);\n\n        if (xAxisFormat !== 'custom') {\n            svg.select('.x-axis-group .axis.sub-x')\n                .attr(\n                    'transform',\n                    `translate(0, ${chartHeight + monthAxisPadding})`\n                )\n                .call(xSubAxis);\n        }\n    }\n\n    /**\n     * Draws the area that is going to represent the data\n     *\n     * @return {void}\n     */\n    function drawArea() {\n        if (brushArea) {\n            svg.selectAll('.brush-area').remove();\n            svg.selectAll('.missing-brush-area').remove();\n        }\n\n        // Create and configure the area generator\n        brushArea = area()\n            .defined(({ value }) => !isNaN(parseInt(value, 10)))\n            .x(({ date }) => xScale(date))\n            .y0(chartHeight)\n            .y1(({ value }) => yScale(value))\n            .curve(curveMap[areaCurve]);\n\n        if (isAnimated) {\n            // Add a missing brush area when there is missing data\n            if (\n                dataZeroed.filter(brushArea.defined()).length !==\n                dataZeroed.length\n            ) {\n                svg.select('.chart-group')\n                    .append('path')\n                    .datum(dataZeroed.filter(brushArea.defined()))\n                    .attr('class', 'missing-brush-area')\n                    .attr('d', brushArea);\n\n                svg.select('.chart-group')\n                    .selectAll('.missing-brush-area')\n                    .datum(data.filter(brushArea.defined()))\n                    .transition()\n                    .duration(animationDuration)\n                    .attr('d', brushArea);\n            }\n\n            // Create the area path with zeroed data\n            svg.select('.chart-group')\n                .append('path')\n                .datum(dataZeroed)\n                .attr('class', 'brush-area')\n                .attr('d', brushArea);\n\n            // Create the area path\n            svg.select('.chart-group')\n                .selectAll('.brush-area')\n                .datum(data)\n                .transition()\n                .duration(animationDuration)\n                .attr('d', brushArea);\n        } else {\n            // Add a missing brush area when there is missing data\n            if (data.filter(brushArea.defined()).length !== data.length) {\n                svg.select('.chart-group')\n                    .append('path')\n                    .datum(data.filter(brushArea.defined()))\n                    .attr('class', 'missing-brush-area')\n                    .attr('d', brushArea);\n            }\n\n            // Create the area path\n            svg.select('.chart-group')\n                .append('path')\n                .datum(data)\n                .attr('class', 'brush-area')\n                .attr('d', brushArea);\n        }\n    }\n\n    /**\n     * Draws the Brush components on its group\n     * @return {void}\n     */\n    function drawBrush() {\n        chartBrush = svg.select('.brush-group').call(brush);\n\n        if (isAnimated) {\n            chartBrush.style('opacity', 0);\n\n            setTimeout(() => {\n                chartBrush\n                    .transition()\n                    .duration(animationDuration)\n                    .style('opacity', 1);\n            }, 0);\n        }\n\n        // Update the height of the brushing rectangle\n        chartBrush\n            .selectAll('rect')\n            .classed('brush-rect', true)\n            .attr('height', chartHeight);\n\n        chartBrush.selectAll('.selection').attr('fill', `url(#${gradientId})`);\n    }\n\n    /**\n     * Draws a handle for the Brush section\n     * @return {void}\n     */\n    function drawHandles() {\n        let handleFillColor = colorHelper.colorSchemasHuman.grey[1];\n\n        // Styling\n        handle = chartBrush\n            .selectAll('.handle.brush-rect')\n            .style('fill', handleFillColor);\n    }\n\n    /**\n     * Draws a horizontal line to extend x-axis till the edges\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalExtendedLine() {\n        svg.select('.x-axis-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', 0)\n            .attr('x2', chartWidth)\n            .attr('y1', chartHeight)\n            .attr('y2', chartHeight);\n    }\n\n    /**\n     * Draws the loading state\n     * @private\n     */\n    function drawLoadingState() {\n        svg.select('.loading-state-group').html(brushLoadingMarkup);\n    }\n\n    /**\n     * When a brush event starts, we can extract info from the extension\n     * of the brush.\n     *\n     * @return {void}\n     */\n    function handleBrushStart() {\n        const selection = event.selection;\n        let newSelection;\n\n        if (!selection) {\n            return;\n        }\n\n        if (isLocked) {\n            const lockedSelectionSize = Math.floor(\n                xScale(new Date(dateRange[1])) - xScale(new Date(dateRange[0]))\n            );\n            const selectedRange = Math.floor(selection[1] - selection[0]);\n\n            if (\n                selectedRange < lockedSelectionSize ||\n                selectedRange > lockedSelectionSize\n            ) {\n                // We round values so we don't get into an infinite loop\n                newSelection = [\n                    Math.floor(selection[0]),\n                    Math.floor(selection[0]) + lockedSelectionSize,\n                ];\n                brush.move(chartBrush, newSelection);\n            } else {\n                newSelection = selection;\n            }\n        } else {\n            newSelection = selection;\n        }\n        dispatcher.call(\n            'customBrushStart',\n            this,\n            newSelection.map(xScale.invert)\n        );\n    }\n\n    /**\n     * Processes the end brush event, snapping the boundaries to days\n     * as showed on the example on https://bl.ocks.org/mbostock/6232537\n     * @return {void}\n     * @private\n     */\n    function handleBrushEnd() {\n        if (!event.sourceEvent) {\n            return; // Only transition after input.\n        }\n\n        let dateExtentRounded = [null, null];\n        const selection = event.selection;\n\n        if (selection) {\n            let dateExtent = selection.map(xScale.invert);\n\n            dateExtentRounded = dateExtent.map(\n                timeIntervals[roundingTimeInterval].round\n            );\n\n            // If empty when rounded, use floor & ceil instead.\n            if (dateExtentRounded[0] >= dateExtentRounded[1]) {\n                dateExtentRounded[0] = timeIntervals[\n                    roundingTimeInterval\n                ].floor(dateExtent[0]);\n                dateExtentRounded[1] = timeIntervals[\n                    roundingTimeInterval\n                ].offset(dateExtentRounded[0]);\n            }\n\n            select(this)\n                .transition()\n                .call(event.target.move, dateExtentRounded.map(xScale));\n        } else {\n            // When no selection (clicked on brush without dragging)\n            if (isLocked) {\n                setBrushByDates(...dateRange);\n            }\n        }\n\n        dispatcher.call('customBrushEnd', this, dateExtentRounded);\n    }\n\n    /**\n     * Sets a new brush extent within the passed dates\n     * @param {String | Date} dateA Initial Date\n     * @param {String | Date} dateB End Date\n     */\n    function setBrushByDates(dateA, dateB) {\n        let selection = null;\n\n        if (dateA !== null) {\n            if (new Date(dateA) < new Date(dateB)) {\n                selection = [xScale(new Date(dateA)), xScale(new Date(dateB))];\n            } else {\n                // eslint-disable-next-line no-console\n                console.error(\n                    'dateRange Error: End date should be posterior to startDate!'\n                );\n            }\n        }\n\n        brush.move(chartBrush, selection);\n    }\n\n    // API\n    /**\n     * Gets or Sets the duration of the area animation\n     * @param  {Number} _x=1200         Desired animation duration for the graph\n     * @return {duration | module}      Current animation duration or Chart module to chain calls\n     * @public\n     */\n    exports.animationDuration = function (_x) {\n        if (!arguments.length) {\n            return animationDuration;\n        }\n        animationDuration = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the area curve of the stacked area.\n     * @param {String} [_x='basis']     Desired curve for the area. Other options are:\n     * monotoneX, natural, linear, monotoneY, step, stepAfter, stepBefore, cardinal, and\n     * catmullRom. Visit https://github.com/d3/d3-shape#curves for more information.\n     * @return {String | module}            Current area curve setting or Chart module to chain calls\n     * @public\n     * @example brushChart.areaCurve('step')\n     */\n    exports.areaCurve = function (_x) {\n        if (!arguments.length) {\n            return areaCurve;\n        }\n        areaCurve = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the constants to be used to force the x axis to respect a certain granularity\n     * current options: MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR\n     * @example\n     *     brush.xAxisCustomFormat(brush.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.axisTimeCombinations = axisTimeCombinations;\n\n    /**\n     * Gets or Sets the dateRange for the selected part of the brush\n     * @param  {String[]} [_x=[null, null]]     Desired dateRange for the graph\n     * @return { dateRange | module}            Current dateRange or Chart module to chain calls\n     * @public\n     */\n    exports.dateRange = function (_x) {\n        if (!arguments.length) {\n            return dateRange;\n        }\n        dateRange = _x;\n\n        if (Array.isArray(dateRange)) {\n            setBrushByDates(...dateRange);\n        }\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the gradient of the chart\n     * @param  {String[]} [_x=colorHelper.colorGradients.greenBlue]    Desired gradient for the graph\n     * @return {String | Module}    Current gradient or Chart module to chain calls\n     * @public\n     */\n    exports.gradient = function (_x) {\n        if (!arguments.length) {\n            return gradient;\n        }\n        gradient = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x          Desired width for the graph\n     * @return {Number | Module}    Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isAnimated property of the chart, making it to animate when render.\n     * @param  {Boolean} _x = false     Desired animation flag\n     * @return {Boolean | module}       Current isAnimated flag or Chart module\n     * @public\n     */\n    exports.isAnimated = function (_x) {\n        if (!arguments.length) {\n            return isAnimated;\n        }\n        isAnimated = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the loading state of the chart\n     * @param  {boolean} flag       Desired value for the loading state\n     * @return {boolean | module}   Current loading state flag or Chart module to chain calls\n     * @public\n     */\n    exports.isLoading = function (_flag) {\n        if (!arguments.length) {\n            return isLoading;\n        }\n        isLoading = _flag;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isLocked property of the brush, enforcing the initial brush size set with dateRange\n     * @param  {Boolean} _x = false     Whether the brush window is locked, requires a value set with '.dateRange` when true\n     * @return {Boolean | module}       Current isLocked flag or Chart module\n     * @public\n     */\n    exports.isLocked = function (_x) {\n        if (!arguments.length) {\n            return isLocked;\n        }\n        isLocked = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass language tag for the tooltip to localize the date.\n     * Feature uses Intl.DateTimeFormat, for compatability and support, refer to\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n     * @param  {String} _x              Must be a language tag (BCP 47) like 'en-US' or 'fr-FR'\n     * @return { (String|Module) }      Current locale or module to chain calls\n     */\n    exports.locale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return {Object | Module}    Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Date range\n     * @typedef DateExtent\n     * @type {Date[]}\n     * @property {Date} 0 Lower bound date selection\n     * @property {Date} 1 Upper bound date selection\n     * @see {@link https://github.com/d3/d3-brush#brushSelection|d3-brush:brushSelection}\n     */\n\n    /**\n     * Event indicating when the brush moves\n     * @event customBrushStart\n     * @type {module:Brush~DateExtent}\n     * @see {@link https://github.com/d3/d3-brush#brush_on|d3-brush:on(brush)}\n     */\n\n    /**\n     * Event indicating the end of a brush gesture\n     * @event customBrushEnd\n     * @type {module:Brush~DateExtent}\n     * @see {@link https://github.com/d3/d3-brush#brush_on|d3-brush:on(end)}\n     */\n\n    /**\n     * @callback eventCallback\n     * @param {module:Brush~DateExtent} dateExtent Date range\n     */\n\n    /**\n     * Adds, removes, or gets the callback for the specified typenames.\n     * @param {String} typenames One or more event type names, delimited by a space\n     * @param {module:Brush~eventCallback} [callback] Callback to register\n     * @return {module:Brush}\n     * @listens customBrushStart\n     * @listens customBrushEnd\n     * @see {@link https://github.com/d3/d3-dispatch/blob/master/README.md#dispatch_on|d3-dispatch:on}\n     * @public\n     */\n    exports.on = function () {\n        let value = dispatcher.on.apply(dispatcher, arguments);\n\n        return value === dispatcher ? exports : value;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x          Desired width for the graph\n     * @return {Number | Module}    Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x format\n     * It requires a `xAxisFormat` of 'custom' in order to work.\n     * @param  {String} _x              Desired format for x axis, one of the d3.js date formats [here]{@link https://github.com/d3/d3-time-format#locale_format}\n     * @return {String | Module}        Current format or module to chain calls\n     * @public\n     */\n    exports.xAxisCustomFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisCustomFormat;\n        }\n        xAxisCustomFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x axis grouping\n     * @param  {String} _x          Desired format, a combination of axisTimeCombinations (MINUTE_HOUR, HOUR_DAY, DAY_MONTH, MONTH_YEAR)\n     * Set it to 'custom' to make use of specific formats with xAxisCustomFormat\n     * @return { String|Module }      Current format or module to chain calls\n     * @public\n     * @example\n     *     brushChart.xAxisCustomFormat(brushChart.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.xAxisFormat = function (_x) {\n        if (!arguments.length) {\n            return xAxisFormat;\n        }\n        xAxisFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to force the chart to show a certain x ticks. It requires a `xAxisCustomFormat` of 'custom' in order to work.\n     * NOTE: This value needs to be a multiple of 2, 5 or 10. They won't always work as expected, as D3 decides at the end\n     * how many and where the ticks will appear.\n     *\n     * @param  {Number} [_x=null]       Desired number of x axis ticks (multiple of 2, 5 or 10)\n     * @return {Number | Module}        Current number or ticks or module to chain calls\n     * @public\n     */\n    exports.xTicks = function (_x) {\n        if (!arguments.length) {\n            return xTicks;\n        }\n        xTicks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the rounding time interval of the selection boundary\n     * @param  {roundingTimeInterval} [_x='timeDay'] Desired time interval for the selection, default 'timeDay'.\n     * @return { (roundingTimeInterval | Module) } Current time interval or module to chain calls\n     * @see {@link https://github.com/d3/d3-time#intervals}\n     * @public\n     * @example\n     * All options are:\n     * timeMillisecond, utcMillisecond, timeSecond, utcSecond, timeMinute, utcMinute, timeHour, utcHour, timeDay, utcDay\n     * timeWeek, utcWeek, timeSunday, utcSunday, timeMonday, utcMonday, timeTuesday, utcTuesday, timeWednesday,\n     * utcWednesday, timeThursday, utcThursday, timeFriday, utcFriday, timeSaturday, utcSaturday, timeMonth, utcMonth,\n     * timeYear and utcYear.\n     */\n    exports.roundingTimeInterval = function (_x) {\n        if (!arguments.length) {\n            return roundingTimeInterval;\n        }\n        roundingTimeInterval = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import { axisBottom } from 'd3-axis';\nimport { format } from 'd3-format';\nimport { scaleLinear } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\n\nimport { exportChart } from '../helpers/export';\nimport colorHelper from '../helpers/color';\n\n/**\n * Reusable Bullet Chart API class that renders a\n * simple and configurable Bullet Chart.\n *\n * @module Bullet\n * @tutorial bullet-chart\n * @requires d3-axis, d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * let bulletChart = bullet();\n *\n * bulletChart\n *     .width(containerWidth);\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(bulletChart);\n */\n\n/**\n * @typedef BulletChartData\n * @type {Object}\n * @property {Number[]} ranges      Range that encodes the qualitative measure\n * @property {Number[]} measures    Range that encodes the performance measure\n * @property {Number[]} markers     Marker lines that encode the comparative measure\n * @property {String}   [title]     String that sets identification for the measure\n * @property {String}   [subtitle]  String that provides more details on measure identification\n *\n * @example\n * {\n *      ranges: [130, 160, 250],\n *      measures: [150, 180],\n *      markers: [175],\n *      title: 'Title for Bullet',\n *      subtitle: 'Subtitle'\n * }\n *\n */\n\nexport default function module() {\n    let margin = {\n            top: 20,\n            right: 20,\n            bottom: 30,\n            left: 20,\n        },\n        width = 960,\n        height = 150,\n        chartWidth,\n        chartHeight,\n        xScale,\n        rangeOpacityScale,\n        rangeOpacifyDiff = 0.2,\n        measureOpacityScale,\n        measureOpacifyDiff = 0.3,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        rangeColor,\n        measureColor,\n        markerColor,\n        numberFormat = '',\n        baseLine,\n        ticks = 6,\n        tickPadding = 5,\n        axis,\n        paddingBetweenAxisAndChart = 5,\n        startMaxRangeOpacity = 0.5,\n        markerStrokeWidth = 5,\n        barWidth,\n        isReverse = false,\n        legendGroup,\n        titleEl,\n        subtitleEl,\n        rangesEl,\n        measuresEl,\n        markersEl,\n        legendSpacing = 100,\n        title,\n        customTitle,\n        subtitle,\n        customSubtitle,\n        subtitleSpacing = 15,\n        ranges = [],\n        markers = [],\n        measures = [],\n        svg,\n        hasTitle = () => title || customTitle,\n        getMeasureBarHeight = () => chartHeight / 3;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {BulletChartData} _data   The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            ({ title, subtitle, ranges, measures, markers } = cleanData(_data));\n\n            if (hasTitle()) {\n                chartWidth -= legendSpacing;\n            }\n\n            buildScales();\n            buildSVG(this);\n            buildAxis();\n            drawBullet();\n            drawTitles();\n            drawAxis();\n        });\n    }\n\n    /**\n     * Creates the d3 x and y axis, setting orientations\n     * @private\n     */\n    function buildAxis() {\n        axis = axisBottom(xScale)\n            .ticks(ticks)\n            .tickPadding(tickPadding)\n            .tickFormat(format(numberFormat));\n    }\n\n    /**\n     * Builds containers for the chart, the axis and a wrapper for all of them\n     * Also applies the Margin convention\n     * @return {void}\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('container-group', true)\n            .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('chart-group', true);\n        container.append('g').classed('axis-group', true);\n        container.append('g').classed('metadata-group', true);\n\n        if (hasTitle()) {\n            container\n                .selectAll('.chart-group')\n                .attr('transform', `translate(${legendSpacing}, 0)`);\n        }\n    }\n\n    /**\n     * Creates the x scales of the chart\n     * @return {void}\n     * @private\n     */\n    function buildScales() {\n        const decidedRange = isReverse ? [chartWidth, 0] : [0, chartWidth];\n        const domain = [0, Math.max(...ranges, ...markers, ...measures)];\n\n        xScale = scaleLinear().domain(domain).rangeRound(decidedRange).nice();\n\n        // Derive width scales from x scales\n        barWidth = bulletWidth(xScale);\n\n        // set up opacity scale based on ranges and measures\n        rangeOpacityScale = ranges\n            .map((d, i) => startMaxRangeOpacity - i * rangeOpacifyDiff)\n            .reverse();\n        measureOpacityScale = ranges\n            .map((d, i) => 0.9 - i * measureOpacifyDiff)\n            .reverse();\n\n        // initialize range and measure bars and marker line colors\n        rangeColor = colorSchema[0];\n        measureColor = colorSchema[1];\n        markerColor = colorSchema[2];\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @return {void}\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart bullet-chart', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Calculates width for each bullet using scale\n     * @return {void}\n     * @private\n     */\n    function bulletWidth(x) {\n        const x0 = x(0);\n\n        return function (d) {\n            return Math.abs(x(d) - x0);\n        };\n    }\n\n    /**\n     * Cleaning data casting the values and names to the proper\n     * type while keeping the rest of properties on the data. It\n     * also creates a set of zeroed data (for animation purposes)\n     * @param   {BulletChartData} originalData  Raw data as passed to the container\n     * @return  {BulletChartData}               Clean data\n     * @private\n     */\n    function cleanData(originalData) {\n        const newData = {\n            ranges: [...originalData.ranges].sort().reverse(),\n            measures: [...originalData.measures].sort().reverse(),\n            markers: originalData.markers.length\n                ? [...originalData.markers].sort().reverse()\n                : [],\n            subtitle: originalData.subtitle,\n            title: originalData.title,\n        };\n\n        return newData;\n    }\n\n    /**\n     * Draws the x and y axis on the svg object within their\n     * respective groups along with their axis labels\n     * @return {void}\n     * @private\n     */\n    function drawAxis() {\n        let translateX = hasTitle() ? legendSpacing : 0;\n\n        svg.select('.axis-group')\n            .attr(\n                'transform',\n                `translate(${translateX}, ${\n                    chartHeight + paddingBetweenAxisAndChart\n                })`\n            )\n            .call(axis);\n\n        drawHorizontalExtendedLine();\n    }\n\n    /**\n     * Draws the measures of the bullet chart\n     * @return {void}\n     * @private\n     */\n    function drawBullet() {\n        if (rangesEl) {\n            rangesEl.remove();\n        }\n        if (measuresEl) {\n            measuresEl.remove();\n        }\n        if (markersEl) {\n            markersEl.remove();\n        }\n\n        rangesEl = svg\n            .select('.chart-group')\n            .selectAll('rect.range')\n            .data(ranges)\n            .enter()\n            .append('rect')\n            .attr('fill', rangeColor)\n            .attr('opacity', (d, i) => rangeOpacityScale[i])\n            .attr('class', (d, i) => `range r${i}`)\n            .attr('width', barWidth)\n            .attr('height', chartHeight)\n            .attr('x', isReverse ? xScale : 0);\n\n        measuresEl = svg\n            .select('.chart-group')\n            .selectAll('rect.measure')\n            .data(measures)\n            .enter()\n            .append('rect')\n            .attr('fill', measureColor)\n            .attr('fill-opacity', (d, i) => measureOpacityScale[i])\n            .attr('class', (d, i) => `measure m${i}`)\n            .attr('width', barWidth)\n            .attr('height', getMeasureBarHeight)\n            .attr('x', isReverse ? xScale : 0)\n            .attr('y', getMeasureBarHeight);\n\n        if (markers.length) {\n            markersEl = svg\n                .select('.chart-group')\n                .selectAll('line.marker-line')\n                .data(markers)\n                .enter()\n                .append('line')\n                .attr('class', 'marker-line')\n                .attr('stroke', markerColor)\n                .attr('stroke-width', markerStrokeWidth)\n                .attr('opacity', measureOpacityScale[0])\n                .attr('x1', xScale)\n                .attr('x2', xScale)\n                .attr('y1', 0)\n                .attr('y2', chartHeight);\n        }\n    }\n\n    /**\n     * Draws a vertical line to extend x-axis till the edges\n     * @return {void}\n     * @private\n     */\n    function drawHorizontalExtendedLine() {\n        if (baseLine) {\n            baseLine.remove();\n        }\n\n        baseLine = svg\n            .select('.axis-group')\n            .selectAll('line.extended-x-line')\n            .data([0])\n            .enter()\n            .append('line')\n            .attr('class', 'extended-x-line')\n            .attr('x1', 0)\n            .attr('x2', chartWidth);\n    }\n\n    /**\n     * Draws the title and subtitle components of chart\n     * @return {void}\n     * @private\n     */\n    function drawTitles() {\n        if (hasTitle()) {\n            // either use title provided from the data\n            // or customTitle provided via API method call\n            if (legendGroup) {\n                legendGroup.remove();\n            }\n\n            legendGroup = svg\n                .select('.metadata-group')\n                .append('g')\n                .classed('legend-group', true)\n                .attr('transform', `translate(0, ${chartHeight / 2})`);\n\n            // override title with customTitle if given\n            if (customTitle) {\n                title = customTitle;\n            }\n\n            if (titleEl) {\n                titleEl.remove();\n            }\n\n            titleEl = legendGroup\n                .selectAll('text.bullet-title')\n                .data([1])\n                .enter()\n                .append('text')\n                .attr('class', 'bullet-title x-axis-label')\n                .text(title);\n\n            // either use subtitle provided from the data\n            // or customSubtitle provided via API method call\n            if (subtitle || customSubtitle) {\n                // override subtitle with customSubtitle if given\n                if (customSubtitle) {\n                    subtitle = customSubtitle;\n                }\n\n                if (subtitleEl) {\n                    subtitleEl.remove();\n                }\n\n                subtitleEl = legendGroup\n                    .selectAll('text.bullet-subtitle')\n                    .data([1])\n                    .enter()\n                    .append('text')\n                    .attr('class', 'bullet-subtitle x-axis-label')\n                    .attr('y', subtitleSpacing)\n                    .text(subtitle);\n            }\n        }\n    }\n\n    // API\n    /**\n     * Gets or Sets the colorSchema of the chart.\n     * The first color from the array will be applied to range bars (the wider bars).\n     * The second color from the array will be applied to measure bars (the narrow bars) and\n     * the third color will be applied to the marker lines.\n     * @param  {String[]} _x        Desired colorSchema for the graph\n     * @return {String[] | module}  Current colorSchema or Chart module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the title for measure identifier\n     * range.\n     * @param  {String} _x              Desired customTitle for chart\n     * @return {String | module}        Current customTitle or Chart module to chain calls\n     * @public\n     * @example bulletChart.customTitle('CPU Usage')\n     */\n    exports.customTitle = function (_x) {\n        if (!arguments.length) {\n            return customTitle;\n        }\n        customTitle = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the subtitle for measure identifier range.\n     * @param  {String} _x              Desired customSubtitle for chart\n     * @return {String | module}        current customSubtitle or Chart module to chain calls\n     * @public\n     * @example bulletChart.customSubtitle('GHz')\n     */\n    exports.customSubtitle = function (_x) {\n        if (!arguments.length) {\n            return customSubtitle;\n        }\n        customSubtitle = _x;\n\n        return this;\n    };\n\n    /**\n     * Chart exported to png and a download action is fired\n     * @param {String} filename     File title for the resulting picture\n     * @param {String} title        Title to add at the top of the exported picture\n     * @return {Promise}            Promise that resolves if the chart image was loaded and downloaded successfully\n     * @public\n     */\n    exports.exportChart = function (filename, title) {\n        return exportChart.call(exports, svg, filename, title);\n    };\n\n    /**\n     * Gets or Sets the height of the chart\n     * @param  {Number} _x          Desired height for the chart\n     * @return {Number | module}    Current height or Chart module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the isReverse status of the chart. If true,\n     * the elements will be rendered in reverse order.\n     * @param  {Boolean} _x=false       Desired height for the chart\n     * @return {Boolean | module}       Current height or Chart module to chain calls\n     * @public\n     */\n    exports.isReverse = function (_x) {\n        if (!arguments.length) {\n            return isReverse;\n        }\n        isReverse = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the chart\n     * @param  {Object} _x          Margin object to get/set\n     * @return {margin | module}    Current margin or Chart module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the bar chart\n     * @param  {string} _x = ',f'       Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Space between axis and chart\n     * @param  {Number} _x=5            Space between y axis and chart\n     * @return {Number| module}         Current value of paddingBetweenAxisAndChart or Chart module to chain calls\n     * @public\n     */\n    exports.paddingBetweenAxisAndChart = function (_x) {\n        if (!arguments.length) {\n            return paddingBetweenAxisAndChart;\n        }\n        paddingBetweenAxisAndChart = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the starting point of the capacity range.\n     * @param  {Number} _x=0.5          Desired startMaxRangeOpacity for chart\n     * @return {Number | module}        current startMaxRangeOpacity or Chart module to chain calls\n     * @public\n     * @example bulletChart.startMaxRangeOpacity(0.8)\n     */\n    exports.startMaxRangeOpacity = function (_x) {\n        if (!arguments.length) {\n            return startMaxRangeOpacity;\n        }\n        startMaxRangeOpacity = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number of ticks of the x axis on the chart\n     * @param  {Number} _x = 5      Desired horizontal ticks\n     * @return {Number | module}    Current ticks or Chart module to chain calls\n     * @public\n     */\n    exports.ticks = function (_x) {\n        if (!arguments.length) {\n            return ticks;\n        }\n        ticks = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the chart\n     * @param  {Number} _x           Desired width for the chart\n     * @return {Number | module}     Current width or Chart module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","import bar from './charts/bar/bar.js';\nimport donut from './charts/donut/donut.js';\nimport legend from './charts/legend/legend.js';\nimport line from './charts/line/line.js';\nimport loadingStates from './charts/helpers/load.js';\nimport tooltip from './charts/tooltip/tooltip.js';\nimport miniTooltip from './charts/mini-tooltip/mini-tooltip.js';\nimport sparkline from './charts/sparkline/sparkline.js';\nimport stackedArea from './charts/stacked-area/stacked-area.js';\nimport scatterPlot from './charts/scatter-plot/scatter-plot.js';\nimport groupedBar from './charts/grouped-bar/grouped-bar.js';\nimport stackedBar from './charts/stacked-bar/stacked-bar.js';\nimport heatmap from './charts/heatmap/heatmap.js';\nimport step from './charts/step/step.js';\nimport brush from './charts/brush/brush.js';\nimport bullet from './charts/bullet/bullet.js';\nimport colors from './charts/helpers/color.js';\n\nexport {\n    bar,\n    donut,\n    legend,\n    line,\n    loadingStates,\n    tooltip,\n    miniTooltip,\n    sparkline,\n    stackedArea,\n    scatterPlot,\n    groupedBar,\n    stackedBar,\n    heatmap,\n    step,\n    brush,\n    bullet,\n    colors,\n};\n\nconst britecharts = {\n    bar,\n    donut,\n    legend,\n    line,\n    loadingStates,\n    tooltip,\n    miniTooltip,\n    sparkline,\n    stackedArea,\n    scatterPlot,\n    groupedBar,\n    stackedBar,\n    heatmap,\n    step,\n    brush,\n    bullet,\n    colors,\n};\n\nexport default britecharts;\n"],"sourceRoot":""}
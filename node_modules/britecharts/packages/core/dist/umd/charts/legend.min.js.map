{"version":3,"sources":["webpack://core.[name]/webpack/universalModuleDefinition","webpack://core.[name]/webpack/bootstrap","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://core.[name]/external \"d3-selection\"","webpack://core.[name]/external \"d3-transition\"","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/iterableToArray.js","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/nonIterableSpread.js","webpack://core.[name]/external \"d3-format\"","webpack://core.[name]/./src/charts/helpers/text.js","webpack://core.[name]/./src/charts/legend/legend.js","webpack://core.[name]/external \"d3-scale\"","webpack://core.[name]/./src/charts/helpers/color.js","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/defineProperty.js","webpack://core.[name]//home/golodhros/src/britecharts/node_modules/@babel/runtime/helpers/toConsumableArray.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__6__","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arr","len","length","arr2","Array","arrayLikeToArray","minLen","toString","slice","constructor","from","test","isArray","iter","iterator","TypeError","wrapConfig","wrapText","xOffset","fontSize","availableWidth","node","word","text","select","words","split","reverse","line","lineNumber","smallLineHeight","y","attr","dy","parseFloat","smallFontSize","tspan","append","classed","style","pop","push","join","getComputedTextLength","wrapTextWithEllipses","width","xpos","limit","each","this","getTextWidth","fontFace","a","document","createElement","b","getContext","font","measureText","getApproximateNumberOfLines","title","maxLength","approximateLineNumber","colorScale","entries","chartWidth","chartHeight","data","svg","margin","top","right","bottom","left","height","markerSize","marginRatio","numberFormat","unit","isHorizontal","highlightedEntryId","hasQuantities","nameToColorMap","colorSchema","colorHelper","colorSchemas","britecharts","getId","id","getName","getFormattedQuantity","quantity","format","getMarkerFill","hasQuantity","_selection","_data","legendEntries","numberOfEntries","lineHeight","newLine","lastEntry","legendGroupSize","emptySpace","newXPosition","lineWidth","filter","reduce","acc","undefined","String","cleanData","scaleOrdinal","range","container","buildSVG","selectAll","remove","enter","horizontalOffset","verticalOffset","labelWidth","textHelper","getLineElementMargin","merge","exit","transition","getBoundingClientRect","size","centerVerticalLegendOnSVG","drawVerticalLegend","cleanFadedLines","fadeLinesBut","exceptionItemId","entryLine","nodes","clearHighlight","colorMap","_x","arguments","highlight","entryId","highlightEntryById","colorGradients","greenBlue","orangePink","bluePurple","colorGradientsHuman","grey","orange","blueGreen","teal","green","yellow","pink","purple","red","colorSchemasHuman","aloeGreen","greenColor","blueColor","yellowColor","orangeColor","singleColors","pinkColor","purpleColor","singleColorsHuman","obj","configurable","writable","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread"],"mappings":"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","file":"legend.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3-selection\"), require(\"d3-format\"), require(\"d3-scale\"), require(\"d3-transition\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3-selection\", \"d3-format\", \"d3-scale\", \"d3-transition\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"legend\"] = factory(require(\"d3-selection\"), require(\"d3-format\"), require(\"d3-scale\"), require(\"d3-transition\"));\n\telse\n\t\troot[\"core\"] = root[\"core\"] || {}, root[\"core\"][\"legend\"] = factory(root[\"d3-selection\"], root[\"d3-format\"], root[\"d3-scale\"], root[\"d3-transition\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__6__, __WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 54);\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","import { select } from 'd3-selection';\n\nconst wrapConfig = {\n    lineHeight: 1.2,\n    smallTextOffset: 10,\n    smallTextLineHeightRatio: 0.9,\n    smallTextRatio: 0.6,\n    valueClassName: 'value',\n    labelClassName: 'label',\n};\n\nconst defaultTextSize = 12;\nconst defaultFontFace = 'Arial';\n\n/**\n * Wraps a selection of text within the available width\n * @param  {Number} xOffset        X axis offset for the text\n * @param  {Number} fontSize       Size of the base font\n * @param  {Number} availableWidth Width of the container where the text needs to wrap on\n * @param  {D3Selection} node      SVG text element that contains the text to wrap\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapText = function (xOffset, fontSize, availableWidth, node) {\n    let text = select(node),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        smallLineHeight =\n            wrapConfig.lineHeight * wrapConfig.smallTextLineHeightRatio,\n        y = text.attr('y'),\n        dy = parseFloat(text.attr('dy')),\n        smallFontSize = fontSize * wrapConfig.smallTextRatio,\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xOffset)\n            .attr('y', y - 5)\n            .attr('dy', dy + 'em')\n            .classed(wrapConfig.valueClassName, true)\n            .style('font-size', fontSize + 'px');\n\n    tspan.text(words.pop());\n    tspan = text\n        .append('tspan')\n        .classed(wrapConfig.labelClassName, true)\n        .attr('x', xOffset)\n        .attr('y', y + wrapConfig.smallTextOffset)\n        .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n        .style('font-size', smallFontSize + 'px');\n\n    while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(' '));\n        if (\n            tspan.node() &&\n            tspan.node().getComputedTextLength() > availableWidth - 50\n        ) {\n            line.pop();\n            tspan.text(line.join(' '));\n            line = [word];\n            tspan = text\n                .append('tspan')\n                .classed(wrapConfig.labelClassName, true)\n                .attr('x', xOffset)\n                .attr('y', y + wrapConfig.smallTextOffset)\n                .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n                .text(word)\n                .style('font-size', smallFontSize + 'px');\n        }\n    }\n};\n\n/**\n * Wraps a selection of text within the available width, also adds class .adjust-upwards\n * to configure a y offset for entries with multiple rows\n * @param  {D3Selection} text       D3 text element\n * @param  {Number} width           Width of the container where the text needs to wrap on\n * @param  {Number} [xpos=0]        Number passed to determine the x offset\n * @param  {Number} [limit=2]       Number of lines before an ellipses is added and the rest of the text is cut off\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapTextWithEllipses = function (\n    text,\n    width,\n    xpos = 0,\n    limit = 2\n) {\n    text.each(function () {\n        let words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\n        text = select(this);\n\n        words = text.text().split(/\\s+/).reverse();\n        line = [];\n        lineNumber = 0;\n        lineHeight = 1.2;\n        y = text.attr('y');\n        dy = parseFloat(text.attr('dy'));\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xpos)\n            .attr('y', y)\n            .attr('dy', dy + 'em');\n\n        while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(' '));\n\n            if (tspan.node() && tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n\n                if (lineNumber < limit - 1) {\n                    line = [word];\n                    tspan = text\n                        .append('tspan')\n                        .attr('x', xpos)\n                        .attr('y', y)\n                        .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                        .text(word);\n                    // if we need two lines for the text, move them both up to center them\n                    text.classed('adjust-upwards', true);\n                } else {\n                    line.push('...');\n                    tspan.text(line.join(' '));\n                    break;\n                }\n            }\n        }\n    });\n};\n\n/**\n * Figures out an approximate of the text width by using a canvas element\n * This avoids having to actually render the text to measure it from the DOM itself\n * @param  {String} text                Text to measure\n * @param  {Number} [fontSize=12]       Font size (or default)\n * @param  {String} [fontFace='Arial']  Font family to use in the calculation (or default)\n * @return {String}                     Approximated width of the text\n * @private\n */\nexport const getTextWidth = function (\n    text,\n    fontSize = defaultTextSize,\n    fontFace = defaultFontFace\n) {\n    const a = document.createElement('canvas');\n    const b = a.getContext('2d');\n\n    b.font = fontSize + 'px ' + fontFace;\n\n    return b.measureText(text).width;\n};\n\n/**\n * Gets the font size of the passed node using getComputedStyle\n * or falls back to the default font size\n * @param {HTMLElement} node The node to get the computed font size for\n * @return {number}\n * @private\n */\nexport const getFontSize = function (node) {\n    if (typeof window.getComputedStyle === 'function') {\n        return parseFloat(window.getComputedStyle(node).fontSize);\n    }\n\n    return defaultTextSize;\n};\n\n/**\n * Heuristic which gets the number of lines needed to display the title of the tooltip\n * If shouldShowDateInTitle is set to true, it takes the formatted Date.now() as additional influencer\n * for the approximation of the needed number of lines.\n * @param  {String}  text  Text which shall be tested for the necessary number of lines\n * @param  {Number}  fontSize  Fontsize to use for the heuristic\n * @param  {Number}  maxLength  Maximal length per line\n * @return  {Number}  approximateLineNumber  Approximative number of lines needed to display the title\n * @private\n */\nexport const getApproximateNumberOfLines = function (\n    title,\n    fontSize,\n    maxLength\n) {\n    const words = title.split(/\\s+/).reverse();\n    let line = [],\n        approximateLineNumber = 1;\n\n    for (let word of words) {\n        line.push(word);\n\n        const textWidth = getTextWidth(\n            line.join(' '),\n            fontSize,\n            'Karla, sans-serif'\n        );\n\n        if (textWidth > maxLength) {\n            line.pop();\n            line = [word];\n            ++approximateLineNumber;\n        }\n    }\n\n    return approximateLineNumber;\n};\n\nexport default {\n    getApproximateNumberOfLines,\n    getFontSize,\n    getTextWidth,\n    wrapText,\n    wrapTextWithEllipses,\n};\n","import { format } from 'd3-format';\nimport { scaleOrdinal } from 'd3-scale';\nimport { select } from 'd3-selection';\nimport 'd3-transition';\n\nimport * as textHelper from '../helpers/text';\nimport colorHelper from '../helpers/color';\n\n/**\n * @fileOverview Legend Component reusable API class that renders a\n * simple and configurable legend element.\n *\n * @module Legend\n * @tutorial legend\n * @exports charts/legend\n * @requires d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * const donutChart = donut(),\n *     legendBox = legend();\n *\n * donutChart\n *     .externalRadius(500)\n *     .internalRadius(200)\n *     .on('customMouseOver', function(data) {\n *         legendBox.highlight(data.data.id);\n *     })\n *     .on('customMouseOut', function() {\n *         legendBox.clearHighlight();\n *     });\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(donutChart);\n *\n * d3Selection.select('.other-css-selector')\n *     .datum(dataset)\n *     .call(legendBox);\n *\n */\n\n/**\n * @typedef LegendChartData\n * @type {Object[]}\n * @property {Number} id        Id of the group (required)\n * @property {String} name      Name of the group (required)\n * @property {Number} quantity  Quantity of the group (optional)\n *\n * @example\n * [\n *     {\n *         id: 1,\n *         quantity: 2,\n *         name: 'glittering'\n *     },\n *     {\n *         id: 2,\n *         quantity: 3,\n *         name: 'luminous'\n *     }\n * ]\n */\n\nexport default function module() {\n    let margin = {\n            top: 5,\n            right: 5,\n            bottom: 5,\n            left: 5,\n        },\n        width = 320,\n        height = 180,\n        textSize = 12,\n        textLetterSpacing = 0.5,\n        markerSize = 16,\n        markerYOffset = -(textSize - 2) / 2,\n        marginRatio = 1.5,\n        valueReservedSpace = 40,\n        numberLetterSpacing = 0.8,\n        numberFormat = 's',\n        unit = '',\n        isFadedClassName = 'is-faded',\n        isHorizontal = false,\n        highlightedEntryId = null,\n        hasQuantities = true,\n        // colors\n        colorScale,\n        nameToColorMap = null,\n        colorSchema = colorHelper.colorSchemas.britecharts,\n        getId = ({ id }) => id,\n        getName = ({ name }) => name,\n        getFormattedQuantity = ({ quantity }) =>\n            format(numberFormat)(quantity) + unit,\n        getMarkerFill = ({ name }) => {\n            if (nameToColorMap !== null) {\n                return nameToColorMap[name]\n                    ? nameToColorMap[name]\n                    : colorScale(name);\n            }\n\n            return colorScale(name);\n        },\n        hasQuantity = ({ quantity }) =>\n            typeof quantity === 'number' || typeof quantity === 'string',\n        entries,\n        chartWidth,\n        chartHeight,\n        data,\n        svg;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param  {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {LegendChartData} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = cleanData(_data);\n\n            buildColorScale();\n            buildSVG(this);\n\n            if (isHorizontal) {\n                drawHorizontalLegend();\n            } else {\n                drawVerticalLegend();\n            }\n\n            if (highlightedEntryId) {\n                cleanFadedLines();\n                fadeLinesBut(highlightedEntryId);\n            }\n        });\n    }\n\n    /**\n     * Depending on the size of the horizontal legend, we are going to add a new\n     * line with the last entry of the legend\n     * @return {void}\n     * @private\n     */\n    function adjustLines() {\n        let lineWidth =\n            svg.select('.legend-line').node().getBoundingClientRect().width +\n            markerSize;\n        let lineWidthSpace = chartWidth - lineWidth;\n\n        if (lineWidthSpace <= 0) {\n            splitInLines();\n        }\n\n        centerInlineLegendOnSVG();\n    }\n\n    /**\n     * Builds containers for the legend\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        let container = svg\n            .append('g')\n            .classed('legend-container-group', true)\n            .attr('transform', `translate(${margin.left},${margin.top})`);\n\n        container.append('g').classed('legend-group', true);\n    }\n\n    /**\n     * Builds color scale for chart\n     * @private\n     */\n    function buildColorScale() {\n        colorScale = scaleOrdinal().range(colorSchema);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('svg')\n                .classed('britechart britechart-legend', true);\n\n            buildContainerGroups();\n        }\n\n        svg.attr('viewBox', [0, 0, width, height])\n            .attr('style', 'max-width: 100%; height: auto; height: intrinsic;')\n            .attr('width', width)\n            .attr('height', height);\n    }\n\n    /**\n     * Centers the legend on the chart given that is a single line of labels\n     * @return {void}\n     * @private\n     */\n    function centerInlineLegendOnSVG() {\n        let legendGroupSize =\n            svg\n                .select('g.legend-container-group')\n                .node()\n                .getBoundingClientRect().width + getLineElementMargin();\n        let emptySpace = width - legendGroupSize;\n        let newXPosition = emptySpace / 2;\n\n        if (emptySpace > 0) {\n            svg.select('g.legend-container-group').attr(\n                'transform',\n                `translate(${newXPosition},0)`\n            );\n        }\n    }\n\n    /**\n     * Centers the legend on the chart given that is a stack of labels\n     * @return {void}\n     * @private\n     */\n    function centerVerticalLegendOnSVG() {\n        let legendGroupSize = svg\n            .select('g.legend-container-group')\n            .node()\n            .getBoundingClientRect().width;\n        let emptySpace = width - legendGroupSize;\n        let newXPosition = emptySpace / 2 - legendGroupSize / 2;\n\n        if (emptySpace > 0) {\n            svg.select('g.legend-container-group').attr(\n                'transform',\n                `translate(${newXPosition},0)`\n            );\n        }\n    }\n\n    /**\n     * Makes sure the types of the data are right and checks if it has quantities\n     * @param {LegendChartData} data\n     * @private\n     */\n    function cleanData(data) {\n        hasQuantities = data.filter(hasQuantity).length === data.length;\n\n        return data.reduce((acc, d) => {\n            if (d.quantity !== undefined && d.quantity !== null) {\n                d.quantity = +d.quantity;\n            }\n            d.name = String(d.name);\n            d.id = +d.id;\n\n            return [...acc, d];\n        }, []);\n    }\n\n    /**\n     * Removes the faded class from all the entry lines\n     * @private\n     */\n    function cleanFadedLines() {\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .classed(isFadedClassName, false);\n    }\n\n    /**\n     * Draws the entries of the legend within a single line\n     * @private\n     */\n    function drawHorizontalLegend() {\n        let xOffset = markerSize;\n\n        svg.select('.legend-group').selectAll('g').remove();\n\n        // We want a single line\n        svg.select('.legend-group').append('g').classed('legend-line', true);\n\n        // And one entry per data item\n        entries = svg\n            .select('.legend-line')\n            .selectAll('g.legend-entry')\n            .data(data);\n\n        // Enter\n        entries\n            .enter()\n            .append('g')\n            .classed('legend-entry', true)\n            .attr('data-item', getId)\n            .attr('transform', function ({ name }) {\n                let horizontalOffset = xOffset,\n                    lineHeight = chartHeight / 2,\n                    verticalOffset = lineHeight,\n                    labelWidth = textHelper.getTextWidth(name, textSize);\n\n                xOffset += markerSize + 2 * getLineElementMargin() + labelWidth;\n\n                return `translate(${horizontalOffset},${verticalOffset})`;\n            })\n            .merge(entries)\n            .append('circle')\n            .classed('legend-circle', true)\n            .attr('cx', markerSize / 2)\n            .attr('cy', markerYOffset)\n            .attr('r', markerSize / 2)\n            .style('fill', getMarkerFill)\n            .style('stroke-width', 1);\n\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-name', true)\n            .text(getName)\n            .attr('x', getLineElementMargin())\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${textLetterSpacing}px`);\n\n        // Exit\n        svg.select('.legend-group')\n            .selectAll('g.legend-entry')\n            .exit()\n            .transition()\n            .style('opacity', 0)\n            .remove();\n\n        adjustLines();\n    }\n\n    /**\n     * Draws the entries of the legend\n     * @private\n     */\n    function drawVerticalLegend() {\n        svg.select('.legend-group').selectAll('g').remove();\n\n        entries = svg\n            .select('.legend-group')\n            .selectAll('g.legend-line')\n            .data(data);\n\n        // Enter\n        entries\n            .enter()\n            .append('g')\n            .classed('legend-line', true)\n            .append('g')\n            .classed('legend-entry', true)\n            .attr('data-item', getId)\n            .attr('transform', function (d, i) {\n                let horizontalOffset = markerSize + getLineElementMargin(),\n                    lineHeight = chartHeight / (data.length + 1),\n                    verticalOffset = (i + 1) * lineHeight;\n\n                return `translate(${horizontalOffset},${verticalOffset})`;\n            })\n            .merge(entries)\n            .append('circle')\n            .classed('legend-circle', true)\n            .attr('cx', markerSize / 2)\n            .attr('cy', markerYOffset)\n            .attr('r', markerSize / 2)\n            .style('fill', getMarkerFill)\n            .style('stroke-width', 1);\n\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-name', true)\n            .text(getName)\n            .attr('x', getLineElementMargin())\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${textLetterSpacing}px`);\n\n        if (hasQuantities) {\n            writeEntryValues();\n        } else {\n            centerVerticalLegendOnSVG();\n        }\n\n        // Exit\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .exit()\n            .transition()\n            .style('opacity', 0)\n            .remove();\n    }\n\n    /**\n     * Applies the faded class to all lines but the one that has the given id\n     * @param  {number} exceptionItemId Id of the line that needs to stay the same\n     * @private\n     */\n    function fadeLinesBut(exceptionItemId) {\n        let classToFade = 'g.legend-entry';\n        let entryLine = svg.select(`[data-item=\"${exceptionItemId}\"]`);\n\n        if (entryLine.nodes().length) {\n            svg.select('.legend-group')\n                .selectAll(classToFade)\n                .classed(isFadedClassName, true);\n\n            entryLine.classed(isFadedClassName, false);\n        }\n    }\n\n    /**\n     * Calculates the margin between elements of the legend\n     * @return {Number} Margin to apply between elements\n     * @private\n     */\n    function getLineElementMargin() {\n        return marginRatio * markerSize;\n    }\n\n    /**\n     * Simple method to move the last item of an overflowing legend into the next line\n     * @return {void}\n     * @private\n     */\n    function splitInLines() {\n        let legendEntries = svg.selectAll('.legend-entry');\n        let numberOfEntries = legendEntries.size();\n        let lineHeight = (chartHeight / 2) * 1.7;\n        let newLine = svg\n            .select('.legend-group')\n            .append('g')\n            .classed('legend-line', true)\n            .attr('transform', `translate(0, ${lineHeight})`);\n        let lastEntry = legendEntries.filter(`:nth-child(${numberOfEntries})`);\n\n        lastEntry.attr('transform', `translate(${markerSize},0)`);\n        newLine.append(() => lastEntry.node());\n    }\n\n    /**\n     * Draws the data entry quantities within the legend-entry lines\n     * @return {void}\n     * @private\n     */\n    function writeEntryValues() {\n        svg.select('.legend-group')\n            .selectAll('g.legend-line')\n            .selectAll('g.legend-entry')\n            .append('text')\n            .classed('legend-entry-value', true)\n            .text(getFormattedQuantity)\n            .attr('x', chartWidth - valueReservedSpace)\n            .style('font-size', `${textSize}px`)\n            .style('letter-spacing', `${numberLetterSpacing}px`)\n            .style('text-anchor', 'end')\n            .style('startOffset', '100%');\n    }\n\n    // API\n\n    /**\n     * Command that clears all highlighted entries on a legend instance\n     * @public\n     */\n    exports.clearHighlight = function () {\n        cleanFadedLines();\n    };\n\n    /**\n     * Gets or Sets the colorMap of the chart\n     * @param  {object} [_x=null]    Color map\n     * @return {object | module}     Current colorMap or Legend module to chain calls\n     * @public\n     */\n    exports.colorMap = function (_x) {\n        if (!arguments.length) {\n            return nameToColorMap;\n        }\n        nameToColorMap = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the colorSchema of the chart\n     * @param  {array} [_x=colorHelper.colorSchemas.britecharts]    Color scheme array to get/set\n     * @return {number | module}                                    Current colorSchema or Legend module to chain calls\n     * @public\n     */\n    exports.colorSchema = function (_x) {\n        if (!arguments.length) {\n            return colorSchema;\n        }\n        colorSchema = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the height of the legend chart\n     * @param  {number} [_x=180]        Desired width for the chart in pixels\n     * @return {height | module}    Current height or Legend module to chain calls\n     * @public\n     */\n    exports.height = function (_x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = _x;\n\n        return this;\n    };\n\n    /**\n     * Command that highlights a line entry by fading the rest of lines on a legend instance\n     * @param  {number} entryId     ID of the entry line\n     * @public\n     */\n    exports.highlight = function (entryId) {\n        cleanFadedLines();\n        fadeLinesBut(entryId);\n    };\n\n    /**\n     * Gets or Sets the id of the entry to highlight\n     * @param  {Number} [_x=null]           Entry id\n     * @return { (Number | Module) }        Current highlighted slice id or Donut Chart module to chain calls\n     * @public\n     */\n    exports.highlightEntryById = function (_x) {\n        if (!arguments.length) {\n            return highlightedEntryId;\n        }\n        highlightedEntryId = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the horizontal mode on the legend\n     * @param  {Boolean} [_x=false]     Desired horizontal mode for the graph\n     * @return {Boolean | module}   If it is horizontal or Legend module to chain calls\n     * @public\n     */\n    exports.isHorizontal = function (_x) {\n        if (!arguments.length) {\n            return isHorizontal;\n        }\n        isHorizontal = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin of the legend chart\n     * @param  {object} _x          Margin object to get/set\n     * @return {object | module}    Current margin or Legend module to chain calls\n     * @public\n     */\n    exports.margin = function (_x) {\n        if (!arguments.length) {\n            return margin;\n        }\n        margin = {\n            ...margin,\n            ..._x,\n        };\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the margin ratio of the legend chart.\n     * Used to determine spacing between legend elements.\n     * @param  {number} [_x=1.5]    Margin Ratio to get/set\n     * @return {number | module}    Current marginRatio or Legend module to chain calls\n     * @public\n     */\n    exports.marginRatio = function (_x) {\n        if (!arguments.length) {\n            return marginRatio;\n        }\n        marginRatio = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the markerSize of the legend chart.\n     * This markerSize will determine the horizontal and vertical size of the colored marks\n     * added as color identifiers for the chart's categories.\n     *\n     * @param  {object} [_x=16]         Margin object to get/set\n     * @return {object | module}    Current markerSize or Legend module to chain calls\n     * @public\n     */\n    exports.markerSize = function (_x) {\n        if (!arguments.length) {\n            return markerSize;\n        }\n        markerSize = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format of the legend chart\n     * @param  {string[]} _x = 's'      Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current number format or Legend module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the unit of the value\n     * @param  {String} [_x='']     Desired unit\n     * @return {String | module}    Current unit or Legend module to chain calls\n     * @public\n     */\n    exports.unit = function (_x) {\n        if (!arguments.length) {\n            return unit;\n        }\n        unit = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the width of the legend chart\n     * @param  {number} [_x=320]    Desired width for the graph in pixels\n     * @return {number | module}    Current width or Legend module to chain calls\n     * @public\n     */\n    exports.width = function (_x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__6__;","// Color Gradients\nexport const colorGradients = {\n    greenBlue: ['#39C7EA', '#4CDCBA'],\n    orangePink: ['#FBC670', '#F766B8'],\n    bluePurple: ['#3DC3C9', '#824a9e'],\n};\nexport const colorGradientsHuman = {\n    greenBlue: 'Green to Blue',\n    orangePink: 'Orange to Pink',\n    bluePurple: 'Blue to Purple',\n};\n\n// Color Schemas\n// Standard Color Schema for Britecharts\nexport const britecharts = [\n    '#6aedc7', //green\n    '#39c2c9', //blue\n    '#ffce00', //yellow\n    '#ffa71a', //orange\n    '#f866b9', //pink\n    '#998ce3', //purple\n];\n// Grey Palette\nexport const grey = [\n    '#F8F8FA',\n    '#EFF2F5',\n    '#D2D6DF',\n    '#C3C6CF',\n    '#ADB0B6',\n    '#666A73',\n    '#45494E',\n    '#363A43',\n    '#282C35',\n];\n// Orange Palette\nexport const orange = [\n    '#fcc870',\n    '#ffa71a',\n    '#fb8825',\n    '#f6682f',\n    '#db5a2c',\n    '#bf4c28',\n    '#a43b1c',\n    '#892a10',\n    '#f9e9c5',\n];\n// Blue Palette\nexport const blueGreen = [\n    '#ccf7f6',\n    '#70e4e0',\n    '#00d8d2',\n    '#00acaf',\n    '#007f8c',\n    '#005e66',\n    '#003c3f',\n    '#002d2f',\n    '#0d2223',\n];\n// LightBlue Palette\nexport const teal = [\n    '#ccfffe',\n    '#94f7f4',\n    '#00fff8',\n    '#1de1e1',\n    '#39c2c9',\n    '#2e9a9d',\n    '#227270',\n    '#1a5957',\n    '#133f3e',\n];\n// Green Palette\nexport const green = [\n    '#edfff7',\n    '#d7ffef',\n    '#c0ffe7',\n    '#95f5d7',\n    '#6aedc7',\n    '#59c3a3',\n    '#479980',\n    '#34816a',\n    '#206953',\n];\n// Yellow Palette\nexport const yellow = [\n    '#f9f2b3',\n    '#fbe986',\n    '#fce05a',\n    '#fed72d',\n    '#ffce00',\n    '#fcc11c',\n    '#f9b438',\n    '#eda629',\n    '#e09819',\n];\n// Pink Palette\nexport const pink = [\n    '#fdd1ea',\n    '#fb9cd2',\n    '#f866b9',\n    '#fc40b6',\n    '#ff1ab3',\n    '#e3239d',\n    '#c62c86',\n    '#a62073',\n    '#85135f',\n];\n// Purple Palette\nexport const purple = [\n    '#ddd6fc',\n    '#bbb1f0',\n    '#998ce3',\n    '#8e6bc1',\n    '#824a9e',\n    '#77337f',\n    '#6b1c60',\n    '#591650',\n    '#470f3f',\n];\n// Red Palette\nexport const red = [\n    '#ffd8d4',\n    '#ffb5b0',\n    '#ff938c',\n    '#ff766c',\n    '#ff584c',\n    '#f04b42',\n    '#e03d38',\n    '#be2e29',\n    '#9c1e19',\n];\n\nexport const colorSchemas = {\n    britecharts,\n    grey,\n    orange,\n    blueGreen,\n    teal,\n    green,\n    yellow,\n    pink,\n    purple,\n    red,\n};\nexport const colorSchemasHuman = {\n    britecharts: 'Britecharts Default',\n    grey: 'Britecharts Grey',\n    orange: 'Orange',\n    blueGreen: 'Blue',\n    teal: 'Light Blue',\n    green: 'Green',\n    yellow: 'Yellow',\n    pink: 'Pink',\n    purple: 'Purple',\n    red: 'Red',\n};\n\n// Single Colors\nexport const aloeGreen = ['#7bdcc0']; // To Deprecate\nexport const greenColor = ['#6aedc7'];\nexport const blueColor = ['#39c2c9'];\nexport const yellowColor = ['#ffce00'];\nexport const orangeColor = ['#ffa71a'];\nconst pinkColor = ['#f866b9'];\nconst purpleColor = ['#998ce3'];\n\nconst singleColors = {\n    aloeGreen,\n    greenColor,\n    blueColor,\n    yellowColor,\n    orangeColor,\n    pinkColor,\n    purpleColor,\n};\nconst singleColorsHuman = {\n    aloeGreen: 'Aloe Green',\n    greenColor: 'Green',\n    blueColor: 'Blue',\n    yellowColor: 'Yellow',\n    orangeColor: 'Orange',\n    pinkColor: 'Pink',\n    purpleColor: 'Purple',\n};\n\nexport default {\n    colorSchemas,\n    colorSchemasHuman,\n    colorGradients,\n    colorGradientsHuman,\n    singleColors,\n    singleColorsHuman,\n};\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"sourceRoot":""}
{"version":3,"sources":["webpack://britecharts.[name]/webpack/universalModuleDefinition","webpack://britecharts.[name]/webpack/bootstrap","webpack://britecharts.[name]/external \"d3-time\"","webpack://britecharts.[name]/external \"d3-shape\"","webpack://britecharts.[name]/external \"d3-selection\"","webpack://britecharts.[name]/external \"d3-format\"","webpack://britecharts.[name]/external \"d3-array\"","webpack://britecharts.[name]/./src/charts/helpers/constants.js","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/typeof.js","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/arrayLikeToArray.js","webpack://britecharts.[name]/./src/charts/helpers/project.js","webpack://britecharts.[name]/external \"d3-time-format\"","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/slicedToArray.js","webpack://britecharts.[name]/external \"d3-ease\"","webpack://britecharts.[name]/./src/charts/helpers/number.js","webpack://britecharts.[name]/external \"d3-transition\"","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/arrayWithHoles.js","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","webpack://britecharts.[name]/./node_modules/@babel/runtime/helpers/nonIterableRest.js","webpack://britecharts.[name]/./src/charts/helpers/text.js","webpack://britecharts.[name]/./src/charts/tooltip/tooltip.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__2__","__WEBPACK_EXTERNAL_MODULE__3__","__WEBPACK_EXTERNAL_MODULE__4__","__WEBPACK_EXTERNAL_MODULE__14__","__WEBPACK_EXTERNAL_MODULE__17__","__WEBPACK_EXTERNAL_MODULE__22__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","axisTimeCombinations","MINUTE_HOUR","HOUR_DAY","DAY_MONTH","MONTH_YEAR","CUSTOM","timeBenchmarks","ONE_AND_A_HALF_YEARS","ONE_YEAR","ONE_DAY","hoursHuman","motion","duration","curveMap","linear","curveLinear","basis","curveBasis","cardinal","curveCardinal","catmullRom","curveCatmullRom","monotoneX","curveMonotoneX","monotoneY","curveMonotoneY","natural","curveNatural","step","curveStep","stepAfter","curveStepAfter","stepBefore","curveStepBefore","emptyDonutData","quantity","percentage","timeIntervals","timeMillisecond","utcMillisecond","timeSecond","utcSecond","timeMinute","utcMinute","timeHour","utcHour","timeDay","utcDay","timeWeek","utcWeek","timeSunday","utcSunday","timeMonday","utcMonday","timeTuesday","utcTuesday","timeWednesday","utcWednesday","timeThursday","utcThursday","timeFriday","utcFriday","timeSaturday","utcSaturday","timeMonth","utcMonth","timeYear","utcYear","_typeof","obj","iterator","constructor","arr","len","length","arr2","Array","dataKeyDeprecationMessage","keyName","console","warn","arrayLikeToArray","minLen","toString","slice","from","test","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","idCounter","integerValueFormats","small","limit","format","medium","large","decimalValueFormats","getValueSize","limits","size","calcLinearRegression","dataPoints","x","y","xy","x2","forEach","denominator","intercept","slope","minX","min","maxX","max","x1","y1","y2","calculatePercent","total","decimals","percent","isInteger","formatDecimalValue","formatIntegerValue","uniqueId","prefix","id","isArray","_i","_s","_e","_arr","_n","_d","next","done","push","err","TypeError","wrapConfig","wrapText","xOffset","fontSize","availableWidth","node","word","text","select","words","split","reverse","line","lineNumber","smallLineHeight","attr","dy","parseFloat","smallFontSize","tspan","append","classed","style","pop","join","getComputedTextLength","wrapTextWithEllipses","width","xpos","each","this","getTextWidth","fontFace","a","document","createElement","b","getContext","font","measureText","getApproximateNumberOfLines","title","maxLength","approximateLineNumber","tooltipBackground","tooltipTextContainer","tooltipBody","tooltipTitle","textHeight","tooltipRightWidth","colorMap","locale","svg","margin","shouldShowDateInTitle","tooltipOffset","tooltipHeight","ttTextX","ttTextY","additionalTooltipTitleHeight","ease","easeQuadInOut","dateLabel","valueLabel","nameLabel","topicLabel","defaultAxisSettings","xAxisValueType","dateFormat","dateCustomFormat","topicsOrder","numberFormat","valueFormatter","monthDayYearFormat","timeFormat","monthDayHourFormat","_selection","_data","container","selectAll","getTooltipTitleXPosition","tooltipContentPadding","approximateTitle","getTooltipTitle","Date","now","approximateNumberOfTitleLines","transition","hide","buildSVG","getValueText","data","missingValue","chosenValueFormatter","getFormattedValue","updateTopicContent","topic","tooltipRight","tooltipLeftText","tooltipRightText","elementText","topicName","textWrap","getBBox","height","tooltipWidth","updatePositionAndSize","xPosition","yPosition","mouseX","tooltipX","tooltipY","formatKey","Number","date","settings","localeOptions","month","day","year","hour","Intl","DateTimeFormat","formatDate","textTitle","formattedDate","entryLineLimit","updateContent","dataPoint","topics","order","map","orderName","filter","_sortByTopicsOrder","sort","_sortByAlpha","remove","updateTitle","updateTooltip","_x","arguments","show","update","colorMapping"],"mappings":"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","file":"tooltip.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"d3-time\"), require(\"d3-shape\"), require(\"d3-selection\"), require(\"d3-format\"), require(\"d3-array\"), require(\"d3-time-format\"), require(\"d3-ease\"), require(\"d3-transition\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"d3-time\", \"d3-shape\", \"d3-selection\", \"d3-format\", \"d3-array\", \"d3-time-format\", \"d3-ease\", \"d3-transition\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tooltip\"] = factory(require(\"d3-time\"), require(\"d3-shape\"), require(\"d3-selection\"), require(\"d3-format\"), require(\"d3-array\"), require(\"d3-time-format\"), require(\"d3-ease\"), require(\"d3-transition\"));\n\telse\n\t\troot[\"britecharts\"] = root[\"britecharts\"] || {}, root[\"britecharts\"][\"tooltip\"] = factory(root[\"d3-time\"], root[\"d3-shape\"], root[\"d3-selection\"], root[\"d3-format\"], root[\"d3-array\"], root[\"d3-time-format\"], root[\"d3-ease\"], root[\"d3-transition\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__2__, __WEBPACK_EXTERNAL_MODULE__3__, __WEBPACK_EXTERNAL_MODULE__4__, __WEBPACK_EXTERNAL_MODULE__14__, __WEBPACK_EXTERNAL_MODULE__17__, __WEBPACK_EXTERNAL_MODULE__22__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","module.exports = __WEBPACK_EXTERNAL_MODULE__2__;","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","module.exports = __WEBPACK_EXTERNAL_MODULE__4__;","import {\n    curveLinear,\n    curveBasis,\n    curveCardinal,\n    curveCatmullRom,\n    curveMonotoneX,\n    curveMonotoneY,\n    curveNatural,\n    curveStep,\n    curveStepAfter,\n    curveStepBefore,\n} from 'd3-shape';\nimport {\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeDay,\n    utcDay,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n} from 'd3-time';\n\nexport const axisTimeCombinations = {\n    MINUTE_HOUR: 'minute-hour',\n    HOUR_DAY: 'hour-daymonth',\n    DAY_MONTH: 'day-month',\n    MONTH_YEAR: 'month-year',\n    CUSTOM: 'custom',\n};\n\nexport const timeBenchmarks = {\n    ONE_AND_A_HALF_YEARS: 47304000000,\n    ONE_YEAR: 31536000365,\n    ONE_DAY: 86400001,\n};\n\nexport const hoursHuman = [\n    '00h',\n    '01h',\n    '02h',\n    '03h',\n    '04h',\n    '05h',\n    '06h',\n    '07h',\n    '08h',\n    '09h',\n    '10h',\n    '11h',\n    '12h',\n    '13h',\n    '14h',\n    '15h',\n    '16h',\n    '17h',\n    '18h',\n    '19h',\n    '20h',\n    '21h',\n    '22h',\n    '23h',\n];\n\nexport const motion = {\n    duration: 1200,\n};\n\nexport const curveMap = {\n    linear: curveLinear,\n    basis: curveBasis,\n    cardinal: curveCardinal,\n    catmullRom: curveCatmullRom,\n    monotoneX: curveMonotoneX,\n    monotoneY: curveMonotoneY,\n    natural: curveNatural,\n    step: curveStep,\n    stepAfter: curveStepAfter,\n    stepBefore: curveStepBefore,\n};\n\nexport const emptyDonutData = [\n    {\n        quantity: 1,\n        percentage: 100,\n    },\n];\n\nexport const timeIntervals = {\n    timeMillisecond: timeMillisecond,\n    utcMillisecond: utcMillisecond,\n    timeSecond: timeSecond,\n    utcSecond: utcSecond,\n    timeMinute: timeMinute,\n    utcMinute: utcMinute,\n    timeHour: timeHour,\n    utcHour: utcHour,\n    timeDay: timeDay,\n    utcDay: utcDay,\n    timeWeek: timeWeek,\n    utcWeek: utcWeek,\n    timeSunday: timeSunday,\n    utcSunday: utcSunday,\n    timeMonday: timeMonday,\n    utcMonday: utcMonday,\n    timeTuesday: timeTuesday,\n    utcTuesday: utcTuesday,\n    timeWednesday: timeWednesday,\n    utcWednesday: utcWednesday,\n    timeThursday: timeThursday,\n    utcThursday: utcThursday,\n    timeFriday: timeFriday,\n    utcFriday: utcFriday,\n    timeSaturday: timeSaturday,\n    utcSaturday: utcSaturday,\n    timeMonth: timeMonth,\n    utcMonth: utcMonth,\n    timeYear: timeYear,\n    utcYear: utcYear,\n};\n\nexport default {\n    axisTimeCombinations,\n    curveMap,\n    emptyDonutData,\n    timeBenchmarks,\n    lineGradientId: 'lineGradientId',\n    timeIntervals,\n    hoursHuman,\n};\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\n\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","export const dataKeyDeprecationMessage = (keyName) => {\n    // eslint-disable-next-line no-console\n    console.warn(\n        `This method is being deprecated! Please modify your data to use \"${keyName}\" as the key.`\n    );\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__14__;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithHoles = require(\"./arrayWithHoles.js\");\n\nvar iterableToArrayLimit = require(\"./iterableToArrayLimit.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableRest = require(\"./nonIterableRest.js\");\n\nfunction _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n\nmodule.exports = _slicedToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","module.exports = __WEBPACK_EXTERNAL_MODULE__17__;","import { format } from 'd3-format';\nimport { max, min } from 'd3-array';\n\nlet idCounter = 0;\n\nconst integerValueFormats = {\n    small: {\n        limit: 10,\n        format: format(''),\n    },\n    medium: {\n        limit: 1000,\n        format: format(''),\n    },\n    large: {\n        limit: null,\n        format: format('.2s'),\n    },\n};\n\nconst decimalValueFormats = {\n    small: {\n        limit: 10,\n        format: format('.3f'),\n    },\n    medium: {\n        limit: 100,\n        format: format('.1f'),\n    },\n    large: {\n        limit: null,\n        format: format('.2s'),\n    },\n};\n\n/**\n * Return a relative size for the value given, based in our decimal or integer tables\n * @param {Number} value    Value to assess its relative size\n * @param {Object} limits   Object stablishing the limits and formats\n * to consider the value of a given size\n * @private\n */\nconst getValueSize = (value, limits) => {\n    let size = 'large';\n\n    if (value < limits.small.limit) {\n        size = 'small';\n    } else if (value < limits.medium.limit) {\n        size = 'medium';\n    }\n\n    return size;\n};\n\n/**\n * Returns an object that contains necessary coordinates for drawing the trendline. The\n * calculation of slope and y-intercept uses basic accumulative linear regression formula.\n * @param  {Object[]} dataPoints    Array of circle data points\n * @return {Object}\n * @private\n */\nexport const calcLinearRegression = (dataPoints) => {\n    let n = dataPoints.length,\n        x = 0,\n        y = 0,\n        xy = 0,\n        x2 = 0;\n\n    dataPoints.forEach((d) => {\n        x += d.x;\n        y += d.y;\n        xy += d.x * d.y;\n        x2 += d.x * d.x;\n    });\n\n    const denominator = n * x2 - x * x;\n    const intercept = (y * x2 - x * xy) / denominator;\n    const slope = (n * xy - x * y) / denominator;\n    const minX = min(dataPoints, ({ x }) => x);\n    const maxX = max(dataPoints, ({ x }) => x);\n\n    return {\n        x1: minX,\n        y1: slope * n + intercept,\n        x2: maxX,\n        y2: slope * maxX + intercept,\n    };\n};\n\n/**\n * Calculates percentage of value from total\n * @param  {Number}  value    Value to check\n * @param  {Number}  total    Sum of values\n * @param  {String}  decimals Specifies number of decimals https://github.com/d3/d3-format\n * @return {String}           Percentage\n * @private\n */\nexport const calculatePercent = (value, total, decimals) => {\n    const percent = total ? (value / total) * 100 : 0;\n\n    return format(decimals)(percent);\n};\n\n/**\n * Checks if a number is an integer or a decimal value\n * @param  {Number}  value Value to check\n * @return {Boolean}       If it is an iteger\n * @private\n */\nexport const isInteger = (value) => {\n    return value % 1 === 0;\n};\n\n/**\n * Formats a floating point value depending on its value range\n * @param  {Number} value Decimal point value to format\n * @return {Number}       Formatted value to show\n * @private\n */\nexport const formatDecimalValue = (value) => {\n    let size = getValueSize(value, decimalValueFormats);\n    let format = decimalValueFormats[size].format;\n\n    return format(value);\n};\n\n/**\n * Formats an integer value depending on its value range\n * @param  {Number} value Decimal point value to format\n * @return {Number}       Formatted value to show\n * @private\n */\nexport const formatIntegerValue = (value) => {\n    let size = getValueSize(value, integerValueFormats);\n    let format = integerValueFormats[size].format;\n\n    return format(value);\n};\n\n/**\n * Generates a unique id with a prefix\n * @param  {String} prefix   Prefix to add before the id\n * @return {String}          Unique id\n * @private\n */\nexport const uniqueId = (prefix) => {\n    const id = ++idCounter;\n\n    return `${prefix.toString()}-${id}`;\n};\n\nexport default {\n    calculatePercent,\n    isInteger,\n    formatDecimalValue,\n    formatIntegerValue,\n    uniqueId,\n    calcLinearRegression,\n};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__22__;","function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nmodule.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nmodule.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableRest, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import { select } from 'd3-selection';\n\nconst wrapConfig = {\n    lineHeight: 1.2,\n    smallTextOffset: 10,\n    smallTextLineHeightRatio: 0.9,\n    smallTextRatio: 0.6,\n    valueClassName: 'value',\n    labelClassName: 'label',\n};\n\nconst defaultTextSize = 12;\nconst defaultFontFace = 'Arial';\n\n/**\n * Wraps a selection of text within the available width\n * @param  {Number} xOffset        X axis offset for the text\n * @param  {Number} fontSize       Size of the base font\n * @param  {Number} availableWidth Width of the container where the text needs to wrap on\n * @param  {D3Selection} node      SVG text element that contains the text to wrap\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapText = function (xOffset, fontSize, availableWidth, node) {\n    let text = select(node),\n        words = text.text().split(/\\s+/).reverse(),\n        word,\n        line = [],\n        lineNumber = 0,\n        smallLineHeight =\n            wrapConfig.lineHeight * wrapConfig.smallTextLineHeightRatio,\n        y = text.attr('y'),\n        dy = parseFloat(text.attr('dy')),\n        smallFontSize = fontSize * wrapConfig.smallTextRatio,\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xOffset)\n            .attr('y', y - 5)\n            .attr('dy', dy + 'em')\n            .classed(wrapConfig.valueClassName, true)\n            .style('font-size', fontSize + 'px');\n\n    tspan.text(words.pop());\n    tspan = text\n        .append('tspan')\n        .classed(wrapConfig.labelClassName, true)\n        .attr('x', xOffset)\n        .attr('y', y + wrapConfig.smallTextOffset)\n        .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n        .style('font-size', smallFontSize + 'px');\n\n    while ((word = words.pop())) {\n        line.push(word);\n        tspan.text(line.join(' '));\n        if (\n            tspan.node() &&\n            tspan.node().getComputedTextLength() > availableWidth - 50\n        ) {\n            line.pop();\n            tspan.text(line.join(' '));\n            line = [word];\n            tspan = text\n                .append('tspan')\n                .classed(wrapConfig.labelClassName, true)\n                .attr('x', xOffset)\n                .attr('y', y + wrapConfig.smallTextOffset)\n                .attr('dy', ++lineNumber * smallLineHeight + dy + 'em')\n                .text(word)\n                .style('font-size', smallFontSize + 'px');\n        }\n    }\n};\n\n/**\n * Wraps a selection of text within the available width, also adds class .adjust-upwards\n * to configure a y offset for entries with multiple rows\n * @param  {D3Selection} text       D3 text element\n * @param  {Number} width           Width of the container where the text needs to wrap on\n * @param  {Number} [xpos=0]        Number passed to determine the x offset\n * @param  {Number} [limit=2]       Number of lines before an ellipses is added and the rest of the text is cut off\n *\n * REF: http://bl.ocks.org/mbostock/7555321\n * More discussions on https://github.com/mbostock/d3/issues/1642\n * @return {void}\n * @private\n */\nexport const wrapTextWithEllipses = function (\n    text,\n    width,\n    xpos = 0,\n    limit = 2\n) {\n    text.each(function () {\n        var words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\n        text = select(this);\n\n        words = text.text().split(/\\s+/).reverse();\n        line = [];\n        lineNumber = 0;\n        lineHeight = 1.2;\n        y = text.attr('y');\n        dy = parseFloat(text.attr('dy'));\n        tspan = text\n            .text(null)\n            .append('tspan')\n            .attr('x', xpos)\n            .attr('y', y)\n            .attr('dy', dy + 'em');\n\n        while ((word = words.pop())) {\n            line.push(word);\n            tspan.text(line.join(' '));\n\n            if (tspan.node() && tspan.node().getComputedTextLength() > width) {\n                line.pop();\n                tspan.text(line.join(' '));\n\n                if (lineNumber < limit - 1) {\n                    line = [word];\n                    tspan = text\n                        .append('tspan')\n                        .attr('x', xpos)\n                        .attr('y', y)\n                        .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                        .text(word);\n                    // if we need two lines for the text, move them both up to center them\n                    text.classed('adjust-upwards', true);\n                } else {\n                    line.push('...');\n                    tspan.text(line.join(' '));\n                    break;\n                }\n            }\n        }\n    });\n};\n\n/**\n * Figures out an approximate of the text width by using a canvas element\n * This avoids having to actually render the text to measure it from the DOM itself\n * @param  {String} text                Text to measure\n * @param  {Number} [fontSize=12]       Font size (or default)\n * @param  {String} [fontFace='Arial']  Font family to use in the calculation (or default)\n * @return {String}                     Approximated width of the text\n * @private\n */\nexport const getTextWidth = function (\n    text,\n    fontSize = defaultTextSize,\n    fontFace = defaultFontFace\n) {\n    let a = document.createElement('canvas'),\n        b = a.getContext('2d');\n\n    b.font = fontSize + 'px ' + fontFace;\n\n    return b.measureText(text).width;\n};\n\n/**\n * Gets the font size of the passed node using getComputedStyle\n * or falls back to the default font size\n * @param {HTMLElement} node The node to get the computed font size for\n * @return {number}\n * @private\n */\nexport const getFontSize = function (node) {\n    if (typeof window.getComputedStyle === 'function') {\n        return parseFloat(window.getComputedStyle(node).fontSize);\n    }\n\n    return defaultTextSize;\n};\n\n/**\n * Heuristic which gets the number of lines needed to display the title of the tooltip\n * If shouldShowDateInTitle is set to true, it takes the formatted Date.now() as additional influencer\n * for the approximation of the needed number of lines.\n * @param  {String}  text  Text which shall be tested for the necessary number of lines\n * @param  {Number}  fontSize  Fontsize to use for the heuristic\n * @param  {Number}  maxLength  Maximal length per line\n * @return  {Number}  approximateLineNumber  Approximative number of lines needed to display the title\n * @private\n */\nexport const getApproximateNumberOfLines = function (\n    title,\n    fontSize,\n    maxLength\n) {\n    const words = title.split(/\\s+/).reverse();\n\n    let line = [],\n        approximateLineNumber = 1;\n\n    for (let word of words) {\n        line.push(word);\n\n        const textWidth = getTextWidth(\n            line.join(' '),\n            fontSize,\n            'Karla, sans-serif'\n        );\n\n        if (textWidth > maxLength) {\n            line.pop();\n            line = [word];\n            ++approximateLineNumber;\n        }\n    }\n\n    return approximateLineNumber;\n};\n\nexport default {\n    getApproximateNumberOfLines,\n    getFontSize,\n    getTextWidth,\n    wrapText,\n    wrapTextWithEllipses,\n};\n","import { easeQuadInOut } from 'd3-ease';\nimport { format } from 'd3-format';\nimport { select } from 'd3-selection';\nimport { timeFormat } from 'd3-time-format';\nimport 'd3-transition';\n\nimport { axisTimeCombinations } from '../helpers/constants';\nimport { dataKeyDeprecationMessage } from '../helpers/project';\nimport {\n    formatIntegerValue,\n    formatDecimalValue,\n    isInteger,\n} from '../helpers/number';\nimport { getTextWidth, getApproximateNumberOfLines } from '../helpers/text';\n\n/**\n * Tooltip Component reusable API class that renders a\n * simple and configurable tooltip element for Britechart's\n * line chart or stacked area chart.\n *\n * @module Tooltip\n * @tutorial tooltip\n * @requires d3-array, d3-axis, d3-dispatch, d3-format, d3-scale, d3-selection, d3-transition\n *\n * @example\n * var lineChart = line(),\n *     tooltip = tooltip();\n *\n * tooltip\n *     .title('Tooltip title');\n *\n * lineChart\n *     .width(500)\n *     .on('customMouseOver', function() {\n *          tooltip.show();\n *     })\n *     .on('customMouseMove', function(dataPoint, topicColorMap, dataPointXPosition) {\n *          tooltip.update(dataPoint, topicColorMap, dataPointXPosition);\n *     })\n *     .on('customMouseOut', function() {\n *          tooltip.hide();\n *     });\n *\n * d3Selection.select('.css-selector')\n *     .datum(dataset)\n *     .call(lineChart);\n *\n * d3Selection.select('.metadata-group .hover-marker')\n *     .datum([])\n *     .call(tooltip);\n *\n */\nexport default function module() {\n    let margin = {\n            top: 2,\n            right: 2,\n            bottom: 2,\n            left: 2,\n        },\n        width = 250,\n        height = 45,\n        title = 'Tooltip title',\n        shouldShowDateInTitle = true,\n        valueFormat = null,\n        // tooltip\n        tooltipBackground,\n        tooltipOffset = {\n            y: -55,\n            x: 0,\n        },\n        tooltipMaxTopicLength = 170,\n        tooltipMaxTitleLength = 230,\n        tooltipTextContainer,\n        tooltipBody,\n        tooltipTitle,\n        tooltipWidth = 250,\n        tooltipHeight = 48,\n        tooltipBorderRadius = 3,\n        tooltipContentPadding = 12,\n        circularMarkerRadius = 4,\n        ttTextX = 0,\n        ttTextY = 37,\n        textHeight,\n        entryLineLimit = 3,\n        initialTooltipBodyYPosition = 37,\n        additionalTooltipTitleHeight = 0,\n        initialTooltipTextXPosition = -22,\n        tooltipTextLinePadding = 5,\n        tooltipRightWidth,\n        // Animations\n        mouseChaseDuration = 100,\n        fadeInDuration = 100,\n        ease = easeQuadInOut,\n        circleYOffset = 8,\n        colorMap,\n        titleFillColor = '#6D717A',\n        textFillColor = '#282C35',\n        tooltipTextColor = '#000000',\n        dateLabel = 'date',\n        valueLabel = 'value',\n        nameLabel = 'name',\n        topicLabel = 'topics',\n        defaultAxisSettings = axisTimeCombinations.DAY_MONTH,\n        xAxisValueType = 'date',\n        dateFormat = null,\n        dateCustomFormat = null,\n        topicsOrder = [],\n        // formats\n        numberFormat = null,\n        valueFormatter = null,\n        monthDayYearFormat = timeFormat('%b %d, %Y'),\n        monthDayHourFormat = timeFormat('%b %d, %I %p'),\n        locale,\n        chartWidth,\n        chartHeight,\n        data,\n        svg;\n\n    /**\n     * This function creates the graph using the selection as container\n     * @param {D3Selection} _selection A d3 selection that represents\n     *                                  the container(s) where the chart(s) will be rendered\n     * @param {Object} _data The data to attach and generate the chart\n     */\n    function exports(_selection) {\n        _selection.each(function (_data) {\n            chartWidth = width - margin.left - margin.right;\n            chartHeight = height - margin.top - margin.bottom;\n            data = _data;\n\n            buildSVG(this);\n        });\n    }\n\n    /**\n     * Builds containers for the tooltip\n     * Also applies the Margin convention\n     * @private\n     */\n    function buildContainerGroups() {\n        var container = svg\n            .append('g')\n            .classed('tooltip-container-group select-disable', true)\n            .attr('transform', `translate( ${margin.left}, ${margin.top})`);\n\n        container.append('g').classed('tooltip-group', true);\n    }\n\n    /**\n     * Builds the SVG element that will contain the chart\n     * @param  {HTMLElement} container DOM element that will work as the container of the graph\n     * @private\n     */\n    function buildSVG(container) {\n        if (!svg) {\n            svg = select(container)\n                .append('g')\n                .classed('britechart britechart-tooltip', true)\n                .style('visibility', 'hidden');\n\n            buildContainerGroups();\n            drawTooltip();\n        }\n        svg.transition().attr('width', width).attr('height', height);\n\n        // Hidden by default\n        exports.hide();\n    }\n\n    /**\n     * Resets the tooltipBody content\n     * @return void\n     * @private\n     */\n    function cleanContent() {\n        tooltipBody.selectAll('text').remove();\n        tooltipBody.selectAll('circle').remove();\n    }\n\n    /**\n     * Draws the different elements of the Tooltip box\n     * @return void\n     * @private\n     */\n    function drawTooltip() {\n        const textStartX = -tooltipWidth / 4 + tooltipContentPadding;\n\n        tooltipTextContainer = svg\n            .selectAll('.tooltip-group')\n            .append('g')\n            .classed('tooltip-text', true);\n\n        tooltipBackground = tooltipTextContainer\n            .append('rect')\n            .classed('tooltip-background', true)\n            .attr('x', textStartX)\n            .attr('y', 0)\n            .attr('width', tooltipWidth)\n            .attr('height', tooltipHeight)\n            .attr('rx', tooltipBorderRadius)\n            .attr('ry', tooltipBorderRadius);\n\n        tooltipTitle = tooltipTextContainer\n            .append('text')\n            .classed('tooltip-title', true)\n            .attr('x', getTooltipTitleXPosition())\n            .attr('dy', '0em')\n            .attr('y', tooltipContentPadding * 2)\n            .style('fill', titleFillColor);\n\n        tooltipBody = tooltipTextContainer\n            .append('g')\n            .classed('tooltip-body', true)\n            .style('fill', textFillColor);\n\n        updateTooltipTitleYPosition();\n    }\n\n    /**\n     * Formats the value depending on its characteristics\n     * @param  {Number} value Value to format\n     * @return {Number}       Formatted value\n     * @private\n     */\n    function getFormattedValue(value) {\n        if (valueFormatter !== null) {\n            return valueFormatter(value);\n        }\n\n        let chosenValueFormatter = formatDecimalValue;\n\n        if (!value) {\n            return 0;\n        }\n        if (numberFormat !== null) {\n            chosenValueFormatter = format(numberFormat);\n        } else if (isInteger(value)) {\n            chosenValueFormatter = formatIntegerValue;\n        }\n\n        return chosenValueFormatter(value);\n    }\n\n    /**\n     * Calculates the desired position for the tooltip\n     * @param  {Number} mouseX             Current horizontal mouse position\n     * @param  {Number} mouseY             Current vertical mouse position\n     * @return {Number[]}                  X and Y position\n     * @private\n     */\n    function getTooltipPosition([mouseX, mouseY]) {\n        let tooltipX, tooltipY;\n\n        // show tooltip to the right\n        if (mouseX - tooltipWidth < 0) {\n            // Tooltip on the right\n            tooltipX = tooltipWidth - 185;\n        } else {\n            // Tooltip on the left\n            tooltipX = -215;\n        }\n\n        if (mouseY) {\n            tooltipY = tooltipOffset.y;\n            // tooltipY = mouseY + tooltipOffset.y;\n        } else {\n            tooltipY = tooltipOffset.y;\n        }\n\n        return [tooltipX, tooltipY];\n    }\n\n    /**\n     * Extracts the value from the data object\n     * @param  {Object} data Data value containing the info\n     * @return {String}      Value to show\n     */\n    function getValueText(data) {\n        let value = data[valueLabel];\n        let valueText;\n\n        if (data.missingValue) {\n            valueText = '-';\n        } else {\n            valueText = getFormattedValue(value).toString();\n        }\n\n        return valueText;\n    }\n\n    /**\n     * Resets the height of the tooltip and the pointer for the text\n     * position\n     */\n    function resetSizeAndPositionPointers() {\n        tooltipHeight =\n            48 + additionalTooltipTitleHeight + tooltipContentPadding;\n        ttTextY = initialTooltipBodyYPosition + additionalTooltipTitleHeight;\n        ttTextX = 0;\n    }\n\n    /**\n     * Draws the data entries inside the tooltip for a given topic\n     * @param  {Object} topic Topic to extract data from\n     * @return void\n     * @private\n     */\n    function updateTopicContent(topic) {\n        let name = topic[nameLabel],\n            tooltipRight,\n            tooltipLeftText,\n            tooltipRightText,\n            elementText;\n\n        tooltipLeftText = topic.topicName || name;\n        tooltipRightText = getValueText(topic);\n\n        elementText = tooltipBody\n            .append('text')\n            .classed('tooltip-left-text', true)\n            .attr('dy', '1em')\n            .attr('x', ttTextX)\n            .attr('y', ttTextY)\n            .style('fill', tooltipTextColor)\n            .text(tooltipLeftText)\n            .call(textWrap, tooltipMaxTopicLength, initialTooltipTextXPosition);\n\n        tooltipRight = tooltipBody\n            .append('text')\n            .classed('tooltip-right-text', true)\n            .attr('dy', '1em')\n            .attr('x', ttTextX)\n            .attr('y', ttTextY)\n            .style('fill', tooltipTextColor)\n            .text(tooltipRightText);\n\n        // IE11 give us sometimes a height of 0 when hovering on top of the vertical marker\n        // This hack fixes it for some cases, but it doesn't work in multiline (they won't wrap)\n        // Let's remove this once we stop supporting IE11\n        textHeight = elementText.node().getBBox().height\n            ? elementText.node().getBBox().height\n            : textHeight;\n\n        tooltipHeight += textHeight + tooltipTextLinePadding;\n        // update the width if it exists because IE renders the elements\n        // too slow and cant figure out the width?\n        tooltipRightWidth = tooltipRight.node().getBBox().width\n            ? tooltipRight.node().getBBox().width\n            : tooltipRightWidth;\n        tooltipRight.attr(\n            'x',\n            tooltipWidth - tooltipRightWidth - 10 - tooltipWidth / 4\n        );\n\n        tooltipBody\n            .append('circle')\n            .classed('tooltip-circle', true)\n            .attr('cx', -tooltipWidth / 4 + 30)\n            .attr('cy', ttTextY + circleYOffset)\n            .attr('r', circularMarkerRadius)\n            .style('fill', colorMap[name])\n            .style('stroke-width', 1);\n\n        ttTextY += textHeight + 7;\n    }\n\n    /**\n     * Updates size and position of tooltip depending on the side of the chart we are in\n     * TODO: This needs a refactor, following the mini-tooltip code.\n     *\n     * @param  {Number} xPosition DataPoint's x position in the chart\n     * @param  {Number} xPosition DataPoint's y position in the chart\n     * @return void\n     * @private\n     */\n    function updatePositionAndSize(xPosition, yPosition) {\n        let [tooltipX, tooltipY] = getTooltipPosition([xPosition, yPosition]);\n\n        svg.transition()\n            .duration(fadeInDuration)\n            .ease(ease)\n            .style('opacity', 1);\n\n        tooltipBackground\n            .attr('width', tooltipWidth)\n            .attr('height', tooltipHeight);\n\n        svg.selectAll('.tooltip-group')\n            .transition()\n            .duration(mouseChaseDuration)\n            .ease(ease)\n            .attr('transform', `translate(${tooltipX}, ${tooltipY})`);\n    }\n\n    /**\n     * Get formatted key to show in the tooltip title\n     * @param {Date | String} key   Key to format\n     * @return {String}     Formatted Key\n     * @private\n     */\n    function formatKey(key) {\n        if (xAxisValueType === 'number') {\n            return Number(key);\n        }\n\n        return formatDate(new Date(key));\n    }\n\n    /**\n     * Figures out which date format to use when showing the date of the current data entry\n     * @param {Date} date   Date object to format\n     * @return {Function}   The proper date formatting function\n     * @private\n     */\n    function formatDate(date) {\n        let settings = dateFormat || defaultAxisSettings;\n        let format = null;\n        let localeOptions = { month: 'short', day: 'numeric' };\n\n        if (\n            settings === axisTimeCombinations.DAY_MONTH ||\n            settings === axisTimeCombinations.MONTH_YEAR\n        ) {\n            format = monthDayYearFormat;\n            localeOptions.year = 'numeric';\n        } else if (\n            settings === axisTimeCombinations.HOUR_DAY ||\n            settings === axisTimeCombinations.MINUTE_HOUR\n        ) {\n            format = monthDayHourFormat;\n            localeOptions.hour = 'numeric';\n        } else if (\n            settings === axisTimeCombinations.CUSTOM &&\n            typeof dateCustomFormat === 'string'\n        ) {\n            format = timeFormat(dateCustomFormat);\n        }\n\n        if (\n            locale &&\n            typeof Intl !== 'undefined' &&\n            typeof Intl === 'object' &&\n            Intl.DateTimeFormat\n        ) {\n            let f = Intl.DateTimeFormat(locale, localeOptions);\n\n            return f.format(date);\n        }\n\n        return format(date);\n    }\n\n    /**\n     * Returns the x-Position of the Tooltip Title\n     * @private\n     */\n    function getTooltipTitleXPosition() {\n        return -tooltipWidth / 4 + 2 * tooltipContentPadding;\n    }\n\n    /**\n     * Helper method to sort the passed topics array by the names passed int he order arary\n     * @param  {Object[]} topics    Topics data, retrieved from datapoint passed by line chart\n     * @param  {Object[]} order     Array of names in the order to sort topics by\n     * @return {Object[]}           sorted topics object\n     * @private\n     */\n    function _sortByTopicsOrder(topics, order = topicsOrder) {\n        return order.map(\n            (orderName) => topics.filter(({ name }) => name === orderName)[0]\n        );\n    }\n\n    /**\n     * Sorts topic by alphabetical order for arrays of objects with a name proeprty\n     * @param  {Array} topics   List of topic objects\n     * @return {Array}          List of topic name strings\n     * @private\n     */\n    function _sortByAlpha(topics) {\n        return topics\n            .map((d) => d)\n            .sort((a, b) => {\n                if (a.name > b.name) return 1;\n                if (a.name === b.name) return 0;\n\n                return -1;\n            });\n    }\n\n    /**\n     * Calculates the number of lines the tooltip title will need and updates the\n     * initialTooltipBodyYPosition accordingly\n     * @private\n     */\n    function updateTooltipTitleYPosition() {\n        const approximateTitle = getTooltipTitle(Date.now());\n        const approximateNumberOfTitleLines = getApproximateNumberOfLines(\n            approximateTitle,\n            16,\n            tooltipMaxTitleLength\n        );\n\n        if (approximateNumberOfTitleLines > 1) {\n            additionalTooltipTitleHeight =\n                17 * (approximateNumberOfTitleLines - 1);\n        }\n    }\n\n    /**\n     * Updates value of tooltipTitle with the data meaning and the date\n     * @param  {Object} dataPoint Point of data to use as source\n     * @return void\n     * @private\n     */\n    function updateTitle(dataPoint) {\n        const textTitle = getTooltipTitle(dataPoint[dateLabel]);\n\n        tooltipTitle\n            .text(textTitle)\n            .call(textWrap, tooltipMaxTitleLength, getTooltipTitleXPosition());\n    }\n\n    /**\n     * Gets the tooltipTitle respecting the different settings\n     * @param  {Date | String}  date  Date to use\n     * @private\n     */\n    function getTooltipTitle(date) {\n        let textTitle = title;\n        let formattedDate = formatKey(date);\n\n        if (textTitle.length) {\n            if (shouldShowDateInTitle) {\n                textTitle = `${textTitle} - ${formattedDate}`;\n            }\n        } else {\n            textTitle = formattedDate;\n        }\n\n        return textTitle;\n    }\n\n    /**\n     * Hides the tooltip\n     * @return {void}\n     * @private\n     */\n    function hideTooltip() {\n        svg.style('visibility', 'hidden');\n    }\n\n    /**\n     * Shows the tooltip updating it's content\n     * @return {void}\n     * @private\n     */\n    function showTooltip() {\n        svg.style('visibility', 'visible').style('opacity', 0);\n    }\n\n    /**\n     * Wraps a text given the text, width, x position and textFormatter function\n     * @param  {D3Selection} text  Selection with the text to wrap inside\n     * @param  {Number} width Desired max width for that line\n     * @param  {Number} xpos  Initial x position of the text\n     * REF: http://bl.ocks.org/mbostock/7555321\n     * More discussions on https://github.com/mbostock/d3/issues/1642\n     * @private\n     *\n     */\n    function textWrap(text, width, xpos = 0) {\n        text.each(function () {\n            var words, word, line, lineNumber, lineHeight, y, dy, tspan;\n\n            text = select(this);\n\n            words = text.text().split(/\\s+/).reverse();\n            line = [];\n            lineNumber = 0;\n            lineHeight = 1.2;\n            y = text.attr('y');\n            dy = parseFloat(text.attr('dy'));\n            tspan = text\n                .text(null)\n                .append('tspan')\n                .attr('x', xpos)\n                .attr('y', y)\n                .attr('dy', dy + 'em');\n\n            while ((word = words.pop())) {\n                line.push(word);\n                tspan.text(line.join(' '));\n\n                // fixes for IE wrap text issue\n                const textWidth = getTextWidth(\n                    line.join(' '),\n                    16,\n                    'Karla, sans-serif'\n                );\n\n                if (textWidth > width) {\n                    line.pop();\n                    tspan.text(line.join(' '));\n\n                    if (lineNumber < entryLineLimit - 1) {\n                        line = [word];\n                        tspan = text\n                            .append('tspan')\n                            .attr('x', xpos)\n                            .attr('y', y)\n                            .attr('dy', ++lineNumber * lineHeight + dy + 'em')\n                            .text(word);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     * Draws the data entries inside the tooltip\n     * @param  {Object} dataPoint   Data entry from to take the info\n     * @return void\n     * @private\n     */\n    function updateContent(dataPoint) {\n        var topics = dataPoint[topicLabel];\n\n        // sort order by topicsOrder array if passed\n        if (topicsOrder.length) {\n            topics = _sortByTopicsOrder(topics);\n        } else if (topics.length && topics[0].name) {\n            topics = _sortByAlpha(topics);\n        }\n\n        cleanContent();\n        updateTitle(dataPoint);\n        resetSizeAndPositionPointers();\n        topics.forEach(updateTopicContent);\n    }\n\n    /**\n     * Updates tooltip title, content, size and position\n     * sorts by alphatical name order if not forced order given\n     *\n     * @param  {lineChartPointByDate} dataPoint  Current datapoint to show info about\n     * @param  {Number} xPosition           Position of the mouse on the X axis\n     * @return void\n     * @private\n     */\n    function updateTooltip(dataPoint, xPosition, yPosition) {\n        updateContent(dataPoint);\n        updatePositionAndSize(xPosition, yPosition);\n    }\n\n    // API\n\n    /**\n     * constants to be used to force the x axis to respect a certain granularity\n     * current options: HOUR_DAY, DAY_MONTH, MONTH_YEAR\n     * @example tooltip.dateFormat(tooltip.axisTimeCombinations.HOUR_DAY)\n     */\n    exports.axisTimeCombinations = axisTimeCombinations;\n\n    /**\n     * Exposes the ability to force the tooltip to use a certain date format\n     * @param  {String} _x          Desired format\n     * @return {String | module}  Current format or module to chain calls\n     * @public\n     */\n    exports.dateFormat = function (_x) {\n        if (!arguments.length) {\n            return dateFormat || defaultAxisSettings;\n        }\n        dateFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Exposes the ability to use a custom date format\n     * @param  {String} _x          Desired custom format\n     * @return {String | module}  Current format or module to chain calls\n     * @public\n     * @example tooltip.dateFormat(tooltip.axisTimeCombinations.CUSTOM);\n     * tooltip.dateCustomFormat('%H:%M %p')\n     */\n    exports.dateCustomFormat = function (_x) {\n        if (!arguments.length) {\n            return dateCustomFormat;\n        }\n        dateCustomFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the dateLabel of the data\n     * @param  {String} _x          Desired dateLabel\n     * @return {String | module}   Current dateLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.dateLabel = function (_x) {\n        if (!arguments.length) {\n            return dateLabel;\n        }\n        dateLabel = _x;\n        dataKeyDeprecationMessage('date');\n\n        return this;\n    };\n\n    /**\n     * Hides the tooltip\n     * @return {module} Tooltip module to chain calls\n     * @public\n     */\n    exports.hide = function () {\n        hideTooltip();\n\n        return this;\n    };\n\n    /**\n     * Pass locale for the tooltip to render the date in\n     * @param  {String} _x          Must be a locale tag like 'en-US' or 'fr-FR'\n     * @return {String | module}    Current locale or module to chain calls\n     * @public\n     */\n    exports.locale = function (_x) {\n        if (!arguments.length) {\n            return locale;\n        }\n        locale = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the nameLabel of the data\n     * @param  {String} _x           Desired nameLabel\n     * @return {String | module}    Current nameLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.nameLabel = function (_x) {\n        if (!arguments.length) {\n            return nameLabel;\n        }\n        nameLabel = _x;\n        dataKeyDeprecationMessage('name');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the number format for the value displayed on the tooltip\n     * @param  {string} _x              Desired numberFormat for the chart. See examples [here]{@link https://observablehq.com/@d3/d3-format}\n     * @return {string | module}        Current numberFormat or Chart module to chain calls\n     * @public\n     */\n    exports.numberFormat = function (_x) {\n        if (!arguments.length) {\n            return numberFormat;\n        }\n        numberFormat = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the formatter function for the value displayed on the tooltip.\n     * Setting this property makes the tooltip ignore numberFormat.\n     * @param  {Function} _x Desired formatter function\n     * @return {Function | module} Current valueFormatter or Chart module to chain calls\n     * @public\n     * @example tooltipChart.valueFormatter(value => value.toString().length.toString())\n     */\n    exports.valueFormatter = function (_x) {\n        if (!arguments.length) {\n            return valueFormatter;\n        }\n        valueFormatter = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets shouldShowDateInTitle\n     * @param  {Boolean} _x          Desired value\n     * @return {Boolean | module}    Current shouldShowDateInTitle or Chart module to chain calls\n     * @public\n     */\n    exports.shouldShowDateInTitle = function (_x) {\n        if (!arguments.length) {\n            return shouldShowDateInTitle;\n        }\n        shouldShowDateInTitle = _x;\n\n        return this;\n    };\n\n    /**\n     * Shows the tooltip\n     * @return {module} Tooltip module to chain calls\n     * @public\n     */\n    exports.show = function () {\n        showTooltip();\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the title of the tooltip (to only show the date, set a blank title)\n     * @param  {String} _x          Desired title\n     * @return {String | module}   Current title or module to chain calls\n     * @public\n     */\n    exports.title = function (_x) {\n        if (!arguments.length) {\n            return title;\n        }\n        title = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass an override for the offset of your tooltip\n     * @param  {Object} tooltipOffset  Object representing the X and Y offsets\n     * @return {Object | module}       Current tooltipOffset\n     * @public\n     */\n    exports.tooltipOffset = function (_x) {\n        if (!arguments.length) {\n            return tooltipOffset;\n        }\n        tooltipOffset = _x;\n\n        return this;\n    };\n\n    /**\n     * Pass an override for the ordering of your tooltip\n     * @param  {String[]} _x           Array of the names of your tooltip items\n     * @return {String[] | module}    Current overrideOrder or Chart module to chain calls\n     * @public\n     */\n    exports.topicsOrder = function (_x) {\n        if (!arguments.length) {\n            return topicsOrder;\n        }\n        topicsOrder = _x;\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the topicLabel of the data\n     * @param  {String} _x          Desired topicLabel\n     * @return {String | module}   Current topicLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.topicLabel = function (_x) {\n        if (!arguments.length) {\n            return topicLabel;\n        }\n        topicLabel = _x;\n        dataKeyDeprecationMessage('topic');\n\n        return this;\n    };\n\n    /**\n     * Updates the position and content of the tooltip\n     * @param  {Object} dataPoint       Datapoint to represent\n     * @param  {Object} colorMapping    Color scheme of the topics\n     * @param  {Number} position        X-scale position in pixels\n     * @return {Module}                 Tooltip module to chain calls\n     * @public\n     */\n    exports.update = function (\n        dataPoint,\n        colorMapping,\n        xPosition,\n        yPosition = null\n    ) {\n        colorMap = colorMapping;\n        updateTooltip(dataPoint, xPosition, yPosition);\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the valueLabel of the data\n     * @param  {String} _x          Desired valueLabel\n     * @return {String | module}   Current valueLabel or Chart module to chain calls\n     * @public\n     * @deprecated\n     */\n    exports.valueLabel = function (_x) {\n        if (!arguments.length) {\n            return valueLabel;\n        }\n        valueLabel = _x;\n        dataKeyDeprecationMessage('value');\n\n        return this;\n    };\n\n    /**\n     * Gets or Sets the `xAxisValueType` of the data. Choose between 'date' and 'number'. When set to\n     * number, the x-Axis values won't be parsed as dates anymore, but as numbers.\n     * @param  {String} [_x='date']     Desired keyType\n     * @return {String | module}        Current keyType or Chart module to chain calls\n     * @public\n     */\n    exports.xAxisValueType = function (_x) {\n        if (!arguments.length) {\n            return xAxisValueType;\n        }\n        xAxisValueType = _x;\n\n        return this;\n    };\n\n    return exports;\n}\n"],"sourceRoot":""}